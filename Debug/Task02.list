
Task02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000539c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800559c  0800559c  0001559c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005784  08005784  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800578c  0800578c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004994  20000074  08005808  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a08  08005808  00024a08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fe0  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000299e  00000000  00000000  00033082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00035a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00036678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004092  00000000  00000000  000371b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db8f  00000000  00000000  0003b24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6d82  00000000  00000000  00048dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013fb5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000394c  00000000  00000000  0013fbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08005584 	.word	0x08005584

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08005584 	.word	0x08005584

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 xQueue = xQueueCreate(5,sizeof(int));
 80005dc:	2200      	movs	r2, #0
 80005de:	2104      	movs	r1, #4
 80005e0:	2005      	movs	r0, #5
 80005e2:	f001 fcdb 	bl	8001f9c <xQueueGenericCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <main+0x64>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fa91 	bl	8000b12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f83c 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f896 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f001 f9ec 	bl	80019d4 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  if(xQueue != NULL){
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <main+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d019      	beq.n	8000638 <main+0x60>
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000604:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <main+0x68>)
 8000606:	2100      	movs	r1, #0
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <main+0x6c>)
 800060a:	f001 fa4d 	bl	8001aa8 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <main+0x70>)
 8000612:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, &xStructsToSend[0], &myTask02_attributes);
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <main+0x74>)
 8000616:	490e      	ldr	r1, [pc, #56]	; (8000650 <main+0x78>)
 8000618:	480e      	ldr	r0, [pc, #56]	; (8000654 <main+0x7c>)
 800061a:	f001 fa45 	bl	8001aa8 <osThreadNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <main+0x80>)
 8000622:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, &xStructsToSend[1], &myTask03_attributes);
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <main+0x84>)
 8000626:	490e      	ldr	r1, [pc, #56]	; (8000660 <main+0x88>)
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0x8c>)
 800062a:	f001 fa3d 	bl	8001aa8 <osThreadNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <main+0x90>)
 8000632:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f001 fa02 	bl	8001a3c <osKernelStart>
  }
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x60>
 800063a:	bf00      	nop
 800063c:	200049ac 	.word	0x200049ac
 8000640:	08005670 	.word	0x08005670
 8000644:	08000789 	.word	0x08000789
 8000648:	200049a4 	.word	0x200049a4
 800064c:	08005694 	.word	0x08005694
 8000650:	0800566c 	.word	0x0800566c
 8000654:	080007f9 	.word	0x080007f9
 8000658:	200049a8 	.word	0x200049a8
 800065c:	080056b8 	.word	0x080056b8
 8000660:	0800566e 	.word	0x0800566e
 8000664:	0800082d 	.word	0x0800082d
 8000668:	200049b0 	.word	0x200049b0

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	; 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 ffae 	bl	80045dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <SystemClock_Config+0xb0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <SystemClock_Config+0xb0>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemClock_Config+0xb0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <SystemClock_Config+0xb4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <SystemClock_Config+0xb4>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <SystemClock_Config+0xb4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fd23 	bl	8001124 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006e4:	f000 f8bc 	bl	8000860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f000 ffbc 	bl	8001680 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800070e:	f000 f8a7 	bl	8000860 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_GPIO_Init+0x5c>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	4a10      	ldr	r2, [pc, #64]	; (8000780 <MX_GPIO_Init+0x5c>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	6313      	str	r3, [r2, #48]	; 0x30
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_GPIO_Init+0x5c>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, gled_Pin|rled_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f244 0101 	movw	r1, #16385	; 0x4001
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <MX_GPIO_Init+0x60>)
 8000758:	f000 fcca 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : gled_Pin rled_Pin */
  GPIO_InitStruct.Pin = gled_Pin|rled_Pin;
 800075c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0x60>)
 8000774:	f000 fb10 	bl	8000d98 <HAL_GPIO_Init>

}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40020400 	.word	0x40020400

08000788 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	/* Because it has the lowest priority this task will only run when the
	sending tasks are in the Blocked state. The sending tasks will only enter
	the Blocked state when the queue is full so this task always expects the
	number of items in the queue to be equal to the queue length, which is 3 in
	this case. */
	if( uxQueueMessagesWaiting( xQueue ) != 3 )
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <StartDefaultTask+0x5c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fef3 	bl	8002580 <uxQueueMessagesWaiting>
 800079a:	4603      	mov	r3, r0
 800079c:	2b03      	cmp	r3, #3
 800079e:	d002      	beq.n	80007a6 <StartDefaultTask+0x1e>
	{
	printf( "Queue should have been full!\r\n" );
 80007a0:	4811      	ldr	r0, [pc, #68]	; (80007e8 <StartDefaultTask+0x60>)
 80007a2:	f003 ffa9 	bl	80046f8 <puts>
	has the required size to hold the received structure.
	The last parameter is the block time - the maximum amount of time that the
	task will remain in the Blocked state to wait for data to be available
	if the queue is already empty. In this case a block time is not necessary
	because this task will only run when the queue is full. */
	xStatus = xQueueReceive( xQueue, &xReceivedStructure, 100 );
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <StartDefaultTask+0x5c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f107 0108 	add.w	r1, r7, #8
 80007ae:	2264      	movs	r2, #100	; 0x64
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fdff 	bl	80023b4 <xQueueReceive>
 80007b6:	60f8      	str	r0, [r7, #12]
	if( xStatus == pdPASS )
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d10e      	bne.n	80007dc <StartDefaultTask+0x54>
	{
	/* Data was successfully received from the queue, print out the received
	value and the source of the value. */
	if( xReceivedStructure.eDataSource == eSender1 )
 80007be:	7a7b      	ldrb	r3, [r7, #9]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d105      	bne.n	80007d0 <StartDefaultTask+0x48>
	{
	printf( "From Sender 1 = %d \r\n ", xReceivedStructure.ucValue );
 80007c4:	7a3b      	ldrb	r3, [r7, #8]
 80007c6:	4619      	mov	r1, r3
 80007c8:	4808      	ldr	r0, [pc, #32]	; (80007ec <StartDefaultTask+0x64>)
 80007ca:	f003 ff0f 	bl	80045ec <iprintf>
 80007ce:	e7df      	b.n	8000790 <StartDefaultTask+0x8>
	}
	else
	{
	printf( "From Sender 2 = %d \r\n ", xReceivedStructure.ucValue );
 80007d0:	7a3b      	ldrb	r3, [r7, #8]
 80007d2:	4619      	mov	r1, r3
 80007d4:	4806      	ldr	r0, [pc, #24]	; (80007f0 <StartDefaultTask+0x68>)
 80007d6:	f003 ff09 	bl	80045ec <iprintf>
 80007da:	e7d9      	b.n	8000790 <StartDefaultTask+0x8>
	}
	else
	{
	/* Nothing was received from the queue. This must be an error as this
	task should only run when the queue is full. */
	printf( "Could not receive from the queue.\r\n" );
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <StartDefaultTask+0x6c>)
 80007de:	f003 ff8b 	bl	80046f8 <puts>
	if( uxQueueMessagesWaiting( xQueue ) != 3 )
 80007e2:	e7d5      	b.n	8000790 <StartDefaultTask+0x8>
 80007e4:	200049ac 	.word	0x200049ac
 80007e8:	080055c0 	.word	0x080055c0
 80007ec:	080055e0 	.word	0x080055e0
 80007f0:	080055f8 	.word	0x080055f8
 80007f4:	08005610 	.word	0x08005610

080007f8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
//	        // Delay before sending the next data
//	        vTaskDelay(1000);
//	    }

	BaseType_t xStatus;
	const TickType_t xTicksToWait = pdMS_TO_TICKS( 100 );
 8000800:	2364      	movs	r3, #100	; 0x64
 8000802:	60fb      	str	r3, [r7, #12]
	in the Blocked state to wait for space to become available on the queue
	if the queue is already full. A block time is specified because the
	sending tasks have a higher priority than the receiving task so the queue
	is expected to become full. The receiving task will remove items from
	the queue when both sending tasks are in the Blocked state. */
	xStatus = xQueueSendToBack( xQueue, argument, xTicksToWait );
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <StartTask02+0x2c>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	2300      	movs	r3, #0
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	f001 fc2b 	bl	8002068 <xQueueGenericSend>
 8000812:	60b8      	str	r0, [r7, #8]
	if( xStatus != pdPASS )
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d0f4      	beq.n	8000804 <StartTask02+0xc>
	{
	/* The send operation could not complete, even after waiting for 100ms.
	This must be an error as the receiving task should make space in the
	queue as soon as both sending tasks are in the Blocked state. */
	printf( "Could not send to the queue.\r\n" );
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <StartTask02+0x30>)
 800081c:	f003 ff6c 	bl	80046f8 <puts>
	xStatus = xQueueSendToBack( xQueue, argument, xTicksToWait );
 8000820:	e7f0      	b.n	8000804 <StartTask02+0xc>
 8000822:	bf00      	nop
 8000824:	200049ac 	.word	0x200049ac
 8000828:	08005634 	.word	0x08005634

0800082c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
//	        }
//	        // Delay before sending the next data
//	        vTaskDelay(1000);
//	    }
	BaseType_t xStatus;
		const TickType_t xTicksToWait = pdMS_TO_TICKS( 100 );
 8000834:	2364      	movs	r3, #100	; 0x64
 8000836:	60fb      	str	r3, [r7, #12]
		in the Blocked state to wait for space to become available on the queue
		if the queue is already full. A block time is specified because the
		sending tasks have a higher priority than the receiving task so the queue
		is expected to become full. The receiving task will remove items from
		the queue when both sending tasks are in the Blocked state. */
		xStatus = xQueueSendToBack( xQueue, argument, xTicksToWait );
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <StartTask03+0x2c>)
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	2300      	movs	r3, #0
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	f001 fc11 	bl	8002068 <xQueueGenericSend>
 8000846:	60b8      	str	r0, [r7, #8]
		if( xStatus != pdPASS )
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d0f4      	beq.n	8000838 <StartTask03+0xc>
		{
		/* The send operation could not complete, even after waiting for 100ms.
		This must be an error as the receiving task should make space in the
		queue as soon as both sending tasks are in the Blocked state. */
		printf( "Could not send to the queue.\r\n" );
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <StartTask03+0x30>)
 8000850:	f003 ff52 	bl	80046f8 <puts>
		xStatus = xQueueSendToBack( xQueue, argument, xTicksToWait );
 8000854:	e7f0      	b.n	8000838 <StartTask03+0xc>
 8000856:	bf00      	nop
 8000858:	200049ac 	.word	0x200049ac
 800085c:	08005634 	.word	0x08005634

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fa4c 	bl	8000d46 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f94e 	bl	8000b8c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008f0:	f002 fddc 	bl	80034ac <xTaskGetSchedulerState>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d001      	beq.n	80008fe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008fa:	f003 fbbd 	bl	8004078 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <ITM_SendChar+0x48>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <ITM_SendChar+0x48>)
 8000914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000918:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <ITM_SendChar+0x4c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <ITM_SendChar+0x4c>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000926:	bf00      	nop
 8000928:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0f8      	beq.n	8000928 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000936:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	6013      	str	r3, [r2, #0]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000edfc 	.word	0xe000edfc
 8000950:	e0000e00 	.word	0xe0000e00

08000954 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	e00a      	b.n	800097c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000966:	f3af 8000 	nop.w
 800096a:	4601      	mov	r1, r0
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	b2ca      	uxtb	r2, r1
 8000974:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf0      	blt.n	8000966 <_read+0x12>
	}

return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	e009      	b.n	80009b4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	60ba      	str	r2, [r7, #8]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ffab 	bl	8000904 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbf1      	blt.n	80009a0 <_write+0x12>
	}
	return len;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_close>:

int _close(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
	return -1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ee:	605a      	str	r2, [r3, #4]
	return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <_isatty>:

int _isatty(int file)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
	return 1;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f003 fd84 	bl	800456c <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <_sbrk+0x64>)
 8000a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20080000 	.word	0x20080000
 8000a90:	00000400 	.word	0x00000400
 8000a94:	20000090 	.word	0x20000090
 8000a98:	20004a08 	.word	0x20004a08

08000a9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <SystemInit+0x20>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <SystemInit+0x20>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac6:	490e      	ldr	r1, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000adc:	4c0b      	ldr	r4, [pc, #44]	; (8000b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aea:	f7ff ffd7 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aee:	f003 fd43 	bl	8004578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fd71 	bl	80005d8 <main>
  bx  lr    
 8000af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b04:	08005794 	.word	0x08005794
  ldr r2, =_sbss
 8000b08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b0c:	20004a08 	.word	0x20004a08

08000b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC_IRQHandler>

08000b12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b16:	2003      	movs	r0, #3
 8000b18:	f000 f90a 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1c:	200f      	movs	r0, #15
 8000b1e:	f000 f805 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b22:	f7ff fea3 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f917 	bl	8000d7e <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f8ed 	bl	8000d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	200049b4 	.word	0x200049b4

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200049b4 	.word	0x200049b4

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <__NVIC_SetPriorityGrouping+0x40>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x40>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00
 8000c10:	05fa0000 	.word	0x05fa0000

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f7ff ff8e 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff47 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff5c 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff8e 	bl	8000c84 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffb0 	bl	8000cec <SysTick_Config>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	e175      	b.n	80010a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f040 8164 	bne.w	800109e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d005      	beq.n	8000dee <HAL_GPIO_Init+0x56>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d130      	bne.n	8000e50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	f003 0201 	and.w	r2, r3, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d017      	beq.n	8000e8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d123      	bne.n	8000ee0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	69b9      	ldr	r1, [r7, #24]
 8000edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0203 	and.w	r2, r3, #3
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80be 	beq.w	800109e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b66      	ldr	r3, [pc, #408]	; (80010bc <HAL_GPIO_Init+0x324>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a65      	ldr	r2, [pc, #404]	; (80010bc <HAL_GPIO_Init+0x324>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b63      	ldr	r3, [pc, #396]	; (80010bc <HAL_GPIO_Init+0x324>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f3a:	4a61      	ldr	r2, [pc, #388]	; (80010c0 <HAL_GPIO_Init+0x328>)
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a58      	ldr	r2, [pc, #352]	; (80010c4 <HAL_GPIO_Init+0x32c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d037      	beq.n	8000fd6 <HAL_GPIO_Init+0x23e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a57      	ldr	r2, [pc, #348]	; (80010c8 <HAL_GPIO_Init+0x330>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d031      	beq.n	8000fd2 <HAL_GPIO_Init+0x23a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a56      	ldr	r2, [pc, #344]	; (80010cc <HAL_GPIO_Init+0x334>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d02b      	beq.n	8000fce <HAL_GPIO_Init+0x236>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a55      	ldr	r2, [pc, #340]	; (80010d0 <HAL_GPIO_Init+0x338>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d025      	beq.n	8000fca <HAL_GPIO_Init+0x232>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a54      	ldr	r2, [pc, #336]	; (80010d4 <HAL_GPIO_Init+0x33c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d01f      	beq.n	8000fc6 <HAL_GPIO_Init+0x22e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a53      	ldr	r2, [pc, #332]	; (80010d8 <HAL_GPIO_Init+0x340>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d019      	beq.n	8000fc2 <HAL_GPIO_Init+0x22a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a52      	ldr	r2, [pc, #328]	; (80010dc <HAL_GPIO_Init+0x344>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0x226>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a51      	ldr	r2, [pc, #324]	; (80010e0 <HAL_GPIO_Init+0x348>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d00d      	beq.n	8000fba <HAL_GPIO_Init+0x222>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a50      	ldr	r2, [pc, #320]	; (80010e4 <HAL_GPIO_Init+0x34c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d007      	beq.n	8000fb6 <HAL_GPIO_Init+0x21e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4f      	ldr	r2, [pc, #316]	; (80010e8 <HAL_GPIO_Init+0x350>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_GPIO_Init+0x21a>
 8000fae:	2309      	movs	r3, #9
 8000fb0:	e012      	b.n	8000fd8 <HAL_GPIO_Init+0x240>
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	e010      	b.n	8000fd8 <HAL_GPIO_Init+0x240>
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	e00e      	b.n	8000fd8 <HAL_GPIO_Init+0x240>
 8000fba:	2307      	movs	r3, #7
 8000fbc:	e00c      	b.n	8000fd8 <HAL_GPIO_Init+0x240>
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	e00a      	b.n	8000fd8 <HAL_GPIO_Init+0x240>
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	e008      	b.n	8000fd8 <HAL_GPIO_Init+0x240>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	e006      	b.n	8000fd8 <HAL_GPIO_Init+0x240>
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e004      	b.n	8000fd8 <HAL_GPIO_Init+0x240>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e002      	b.n	8000fd8 <HAL_GPIO_Init+0x240>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_GPIO_Init+0x240>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	f002 0203 	and.w	r2, r2, #3
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	4093      	lsls	r3, r2
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fe8:	4935      	ldr	r1, [pc, #212]	; (80010c0 <HAL_GPIO_Init+0x328>)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <HAL_GPIO_Init+0x354>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101a:	4a34      	ldr	r2, [pc, #208]	; (80010ec <HAL_GPIO_Init+0x354>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	4b32      	ldr	r3, [pc, #200]	; (80010ec <HAL_GPIO_Init+0x354>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001044:	4a29      	ldr	r2, [pc, #164]	; (80010ec <HAL_GPIO_Init+0x354>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <HAL_GPIO_Init+0x354>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800106e:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <HAL_GPIO_Init+0x354>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <HAL_GPIO_Init+0x354>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <HAL_GPIO_Init+0x354>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	2b0f      	cmp	r3, #15
 80010a8:	f67f ae86 	bls.w	8000db8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40013800 	.word	0x40013800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40021400 	.word	0x40021400
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40021c00 	.word	0x40021c00
 80010e4:	40022000 	.word	0x40022000
 80010e8:	40022400 	.word	0x40022400
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	041a      	lsls	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	619a      	str	r2, [r3, #24]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800112c:	2300      	movs	r3, #0
 800112e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e29b      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8087 	beq.w	8001256 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001148:	4b96      	ldr	r3, [pc, #600]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b04      	cmp	r3, #4
 8001152:	d00c      	beq.n	800116e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001154:	4b93      	ldr	r3, [pc, #588]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	d112      	bne.n	8001186 <HAL_RCC_OscConfig+0x62>
 8001160:	4b90      	ldr	r3, [pc, #576]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800116c:	d10b      	bne.n	8001186 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116e:	4b8d      	ldr	r3, [pc, #564]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d06c      	beq.n	8001254 <HAL_RCC_OscConfig+0x130>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d168      	bne.n	8001254 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e275      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x7a>
 8001190:	4b84      	ldr	r3, [pc, #528]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a83      	ldr	r2, [pc, #524]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e02e      	b.n	80011fc <HAL_RCC_OscConfig+0xd8>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x9c>
 80011a6:	4b7f      	ldr	r3, [pc, #508]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a7e      	ldr	r2, [pc, #504]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b7c      	ldr	r3, [pc, #496]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a7b      	ldr	r2, [pc, #492]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e01d      	b.n	80011fc <HAL_RCC_OscConfig+0xd8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0xc0>
 80011ca:	4b76      	ldr	r3, [pc, #472]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a75      	ldr	r2, [pc, #468]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b73      	ldr	r3, [pc, #460]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a72      	ldr	r2, [pc, #456]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e00b      	b.n	80011fc <HAL_RCC_OscConfig+0xd8>
 80011e4:	4b6f      	ldr	r3, [pc, #444]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a6e      	ldr	r2, [pc, #440]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b6c      	ldr	r3, [pc, #432]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a6b      	ldr	r2, [pc, #428]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001204:	f7ff fcd6 	bl	8000bb4 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fcd2 	bl	8000bb4 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e229      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b61      	ldr	r3, [pc, #388]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0xe8>
 800122a:	e014      	b.n	8001256 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff fcc2 	bl	8000bb4 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fcbe 	bl	8000bb4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e215      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	4b57      	ldr	r3, [pc, #348]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x110>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d069      	beq.n	8001336 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001262:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00b      	beq.n	8001286 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126e:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b08      	cmp	r3, #8
 8001278:	d11c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x190>
 800127a:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d116      	bne.n	80012b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x17a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e1e9      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	493d      	ldr	r1, [pc, #244]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	e040      	b.n	8001336 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d023      	beq.n	8001304 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012bc:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a38      	ldr	r2, [pc, #224]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fc74 	bl	8000bb4 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fc70 	bl	8000bb4 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e1c7      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ee:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4929      	ldr	r1, [pc, #164]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
 8001302:	e018      	b.n	8001336 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fc50 	bl	8000bb4 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fc4c 	bl	8000bb4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1a3      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d038      	beq.n	80013b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d019      	beq.n	800137e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 800134c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001356:	f7ff fc2d 	bl	8000bb4 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135e:	f7ff fc29 	bl	8000bb4 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e180      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x23a>
 800137c:	e01a      	b.n	80013b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_RCC_OscConfig+0x280>)
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138a:	f7ff fc13 	bl	8000bb4 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001392:	f7ff fc0f 	bl	8000bb4 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d903      	bls.n	80013a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e166      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
 80013a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a8:	4b92      	ldr	r3, [pc, #584]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 80013aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ee      	bne.n	8001392 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a4 	beq.w	800150a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b8c      	ldr	r3, [pc, #560]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10d      	bne.n	80013ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a88      	ldr	r2, [pc, #544]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b86      	ldr	r3, [pc, #536]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ea:	4b83      	ldr	r3, [pc, #524]	; (80015f8 <HAL_RCC_OscConfig+0x4d4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013f6:	4b80      	ldr	r3, [pc, #512]	; (80015f8 <HAL_RCC_OscConfig+0x4d4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7f      	ldr	r2, [pc, #508]	; (80015f8 <HAL_RCC_OscConfig+0x4d4>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff fbd7 	bl	8000bb4 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff fbd3 	bl	8000bb4 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b64      	cmp	r3, #100	; 0x64
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e12a      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800141c:	4b76      	ldr	r3, [pc, #472]	; (80015f8 <HAL_RCC_OscConfig+0x4d4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x31a>
 8001430:	4b70      	ldr	r3, [pc, #448]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	4a6f      	ldr	r2, [pc, #444]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
 800143c:	e02d      	b.n	800149a <HAL_RCC_OscConfig+0x376>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x33c>
 8001446:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	4a6a      	ldr	r2, [pc, #424]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6713      	str	r3, [r2, #112]	; 0x70
 8001452:	4b68      	ldr	r3, [pc, #416]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a67      	ldr	r2, [pc, #412]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
 800145e:	e01c      	b.n	800149a <HAL_RCC_OscConfig+0x376>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x35e>
 8001468:	4b62      	ldr	r3, [pc, #392]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a61      	ldr	r2, [pc, #388]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
 8001474:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001478:	4a5e      	ldr	r2, [pc, #376]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6713      	str	r3, [r2, #112]	; 0x70
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x376>
 8001482:	4b5c      	ldr	r3, [pc, #368]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a5b      	ldr	r2, [pc, #364]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d015      	beq.n	80014ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff fb87 	bl	8000bb4 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fb83 	bl	8000bb4 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0d8      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ee      	beq.n	80014aa <HAL_RCC_OscConfig+0x386>
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb71 	bl	8000bb4 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff fb6d 	bl	8000bb4 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e0c2      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fe:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a3c      	ldr	r2, [pc, #240]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80ae 	beq.w	8001670 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001514:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d06d      	beq.n	80015fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d14b      	bne.n	80015c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 800152e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fb3e 	bl	8000bb4 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff fb3a 	bl	8000bb4 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e091      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69da      	ldr	r2, [r3, #28]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	019b      	lsls	r3, r3, #6
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	085b      	lsrs	r3, r3, #1
 8001572:	3b01      	subs	r3, #1
 8001574:	041b      	lsls	r3, r3, #16
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	071b      	lsls	r3, r3, #28
 8001586:	491b      	ldr	r1, [pc, #108]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a18      	ldr	r2, [pc, #96]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 8001592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fb0c 	bl	8000bb4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fb08 	bl	8000bb4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e05f      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x47c>
 80015be:	e057      	b.n	8001670 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 80015c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff faf2 	bl	8000bb4 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff faee 	bl	8000bb4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e045      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e6:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_RCC_OscConfig+0x4d0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4b0>
 80015f2:	e03d      	b.n	8001670 <HAL_RCC_OscConfig+0x54c>
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_RCC_OscConfig+0x558>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d030      	beq.n	800166c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d129      	bne.n	800166c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	429a      	cmp	r2, r3
 8001624:	d122      	bne.n	800166c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800162c:	4013      	ands	r3, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001632:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001634:	4293      	cmp	r3, r2
 8001636:	d119      	bne.n	800166c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	3b01      	subs	r3, #1
 8001646:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d10f      	bne.n	800166c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0d0      	b.n	800183a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d910      	bls.n	80016c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 020f 	bic.w	r2, r3, #15
 80016ae:	4965      	ldr	r1, [pc, #404]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b6:	4b63      	ldr	r3, [pc, #396]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0b8      	b.n	800183a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4a58      	ldr	r2, [pc, #352]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 80016e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 80016fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001702:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001704:	4b50      	ldr	r3, [pc, #320]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	494d      	ldr	r1, [pc, #308]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d040      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d107      	bne.n	800173a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4b47      	ldr	r3, [pc, #284]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d115      	bne.n	8001762 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e07f      	b.n	800183a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e073      	b.n	800183a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e06b      	b.n	800183a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4936      	ldr	r1, [pc, #216]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001774:	f7ff fa1e 	bl	8000bb4 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	e00a      	b.n	8001792 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7ff fa1a 	bl	8000bb4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e053      	b.n	800183a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 020c 	and.w	r2, r3, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d1eb      	bne.n	800177c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d210      	bcs.n	80017d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 020f 	bic.w	r2, r3, #15
 80017ba:	4922      	ldr	r1, [pc, #136]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e032      	b.n	800183a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4916      	ldr	r1, [pc, #88]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	490e      	ldr	r1, [pc, #56]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001812:	f000 f821 	bl	8001858 <HAL_RCC_GetSysClockFreq>
 8001816:	4602      	mov	r2, r0
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	490a      	ldr	r1, [pc, #40]	; (800184c <HAL_RCC_ClockConfig+0x1cc>)
 8001824:	5ccb      	ldrb	r3, [r1, r3]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <HAL_RCC_ClockConfig+0x1d0>)
 800182c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_RCC_ClockConfig+0x1d4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f97a 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023c00 	.word	0x40023c00
 8001848:	40023800 	.word	0x40023800
 800184c:	080056dc 	.word	0x080056dc
 8001850:	20000000 	.word	0x20000000
 8001854:	20000004 	.word	0x20000004

08001858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800185e:	2100      	movs	r1, #0
 8001860:	6079      	str	r1, [r7, #4]
 8001862:	2100      	movs	r1, #0
 8001864:	60f9      	str	r1, [r7, #12]
 8001866:	2100      	movs	r1, #0
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800186a:	2100      	movs	r1, #0
 800186c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800186e:	4952      	ldr	r1, [pc, #328]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001870:	6889      	ldr	r1, [r1, #8]
 8001872:	f001 010c 	and.w	r1, r1, #12
 8001876:	2908      	cmp	r1, #8
 8001878:	d00d      	beq.n	8001896 <HAL_RCC_GetSysClockFreq+0x3e>
 800187a:	2908      	cmp	r1, #8
 800187c:	f200 8094 	bhi.w	80019a8 <HAL_RCC_GetSysClockFreq+0x150>
 8001880:	2900      	cmp	r1, #0
 8001882:	d002      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x32>
 8001884:	2904      	cmp	r1, #4
 8001886:	d003      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x38>
 8001888:	e08e      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800188a:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <HAL_RCC_GetSysClockFreq+0x164>)
 800188c:	60bb      	str	r3, [r7, #8]
      break;
 800188e:	e08e      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001890:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001892:	60bb      	str	r3, [r7, #8]
      break;
 8001894:	e08b      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001896:	4948      	ldr	r1, [pc, #288]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001898:	6849      	ldr	r1, [r1, #4]
 800189a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800189e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018a0:	4945      	ldr	r1, [pc, #276]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80018a2:	6849      	ldr	r1, [r1, #4]
 80018a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d024      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ac:	4942      	ldr	r1, [pc, #264]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80018ae:	6849      	ldr	r1, [r1, #4]
 80018b0:	0989      	lsrs	r1, r1, #6
 80018b2:	4608      	mov	r0, r1
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80018bc:	f04f 0500 	mov.w	r5, #0
 80018c0:	ea00 0204 	and.w	r2, r0, r4
 80018c4:	ea01 0305 	and.w	r3, r1, r5
 80018c8:	493d      	ldr	r1, [pc, #244]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80018ca:	fb01 f003 	mul.w	r0, r1, r3
 80018ce:	2100      	movs	r1, #0
 80018d0:	fb01 f102 	mul.w	r1, r1, r2
 80018d4:	1844      	adds	r4, r0, r1
 80018d6:	493a      	ldr	r1, [pc, #232]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80018d8:	fba2 0101 	umull	r0, r1, r2, r1
 80018dc:	1863      	adds	r3, r4, r1
 80018de:	4619      	mov	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	f7fe fcfa 	bl	80002e0 <__aeabi_uldivmod>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4613      	mov	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e04a      	b.n	800198c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f6:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	099b      	lsrs	r3, r3, #6
 80018fc:	461a      	mov	r2, r3
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	ea02 0400 	and.w	r4, r2, r0
 800190e:	ea03 0501 	and.w	r5, r3, r1
 8001912:	4620      	mov	r0, r4
 8001914:	4629      	mov	r1, r5
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	014b      	lsls	r3, r1, #5
 8001920:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001924:	0142      	lsls	r2, r0, #5
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	1b00      	subs	r0, r0, r4
 800192c:	eb61 0105 	sbc.w	r1, r1, r5
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	018b      	lsls	r3, r1, #6
 800193a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800193e:	0182      	lsls	r2, r0, #6
 8001940:	1a12      	subs	r2, r2, r0
 8001942:	eb63 0301 	sbc.w	r3, r3, r1
 8001946:	f04f 0000 	mov.w	r0, #0
 800194a:	f04f 0100 	mov.w	r1, #0
 800194e:	00d9      	lsls	r1, r3, #3
 8001950:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001954:	00d0      	lsls	r0, r2, #3
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	1912      	adds	r2, r2, r4
 800195c:	eb45 0303 	adc.w	r3, r5, r3
 8001960:	f04f 0000 	mov.w	r0, #0
 8001964:	f04f 0100 	mov.w	r1, #0
 8001968:	0299      	lsls	r1, r3, #10
 800196a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800196e:	0290      	lsls	r0, r2, #10
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	461a      	mov	r2, r3
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	f7fe fcae 	bl	80002e0 <__aeabi_uldivmod>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4613      	mov	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	3301      	adds	r3, #1
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	60bb      	str	r3, [r7, #8]
      break;
 80019a6:	e002      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <HAL_RCC_GetSysClockFreq+0x164>)
 80019aa:	60bb      	str	r3, [r7, #8]
      break;
 80019ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ae:	68bb      	ldr	r3, [r7, #8]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	00f42400 	.word	0x00f42400
 80019c0:	017d7840 	.word	0x017d7840

080019c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019da:	f3ef 8305 	mrs	r3, IPSR
 80019de:	60bb      	str	r3, [r7, #8]
  return(result);
 80019e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10f      	bne.n	8001a06 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019e6:	f3ef 8310 	mrs	r3, PRIMASK
 80019ea:	607b      	str	r3, [r7, #4]
  return(result);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019f2:	f3ef 8311 	mrs	r3, BASEPRI
 80019f6:	603b      	str	r3, [r7, #0]
  return(result);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d007      	beq.n	8001a0e <osKernelInitialize+0x3a>
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <osKernelInitialize+0x64>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d103      	bne.n	8001a0e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001a06:	f06f 0305 	mvn.w	r3, #5
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	e00c      	b.n	8001a28 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <osKernelInitialize+0x64>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <osKernelInitialize+0x64>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	e002      	b.n	8001a28 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a28:	68fb      	ldr	r3, [r7, #12]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000094 	.word	0x20000094

08001a3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a42:	f3ef 8305 	mrs	r3, IPSR
 8001a46:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10f      	bne.n	8001a6e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8001a52:	607b      	str	r3, [r7, #4]
  return(result);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8001a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <osKernelStart+0x3a>
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <osKernelStart+0x68>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d103      	bne.n	8001a76 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001a6e:	f06f 0305 	mvn.w	r3, #5
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e010      	b.n	8001a98 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <osKernelStart+0x68>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d109      	bne.n	8001a92 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001a7e:	f7ff ffa1 	bl	80019c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <osKernelStart+0x68>)
 8001a84:	2202      	movs	r2, #2
 8001a86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001a88:	f001 f8b2 	bl	8002bf0 <vTaskStartScheduler>
      stat = osOK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e002      	b.n	8001a98 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a98:	68fb      	ldr	r3, [r7, #12]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000094 	.word	0x20000094

08001aa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b090      	sub	sp, #64	; 0x40
 8001aac:	af04      	add	r7, sp, #16
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ab8:	f3ef 8305 	mrs	r3, IPSR
 8001abc:	61fb      	str	r3, [r7, #28]
  return(result);
 8001abe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f040 808f 	bne.w	8001be4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8001aca:	61bb      	str	r3, [r7, #24]
  return(result);
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d105      	bne.n	8001ade <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8001ad6:	617b      	str	r3, [r7, #20]
  return(result);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <osThreadNew+0x3e>
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <osThreadNew+0x148>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d07e      	beq.n	8001be4 <osThreadNew+0x13c>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d07b      	beq.n	8001be4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001af0:	2318      	movs	r3, #24
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
 8001afc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d045      	beq.n	8001b90 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <osThreadNew+0x6a>
        name = attr->name;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d008      	beq.n	8001b38 <osThreadNew+0x90>
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	2b38      	cmp	r3, #56	; 0x38
 8001b2a:	d805      	bhi.n	8001b38 <osThreadNew+0x90>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <osThreadNew+0x94>
        return (NULL);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e054      	b.n	8001be6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00e      	beq.n	8001b72 <osThreadNew+0xca>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b5b      	cmp	r3, #91	; 0x5b
 8001b5a:	d90a      	bls.n	8001b72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <osThreadNew+0xca>
        mem = 1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	e010      	b.n	8001b94 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <osThreadNew+0xec>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d108      	bne.n	8001b94 <osThreadNew+0xec>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d104      	bne.n	8001b94 <osThreadNew+0xec>
          mem = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
 8001b8e:	e001      	b.n	8001b94 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d110      	bne.n	8001bbc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ba2:	9202      	str	r2, [sp, #8]
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 fe73 	bl	800289c <xTaskCreateStatic>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e013      	b.n	8001be4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d110      	bne.n	8001be4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fec4 	bl	8002962 <xTaskCreate>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d001      	beq.n	8001be4 <osThreadNew+0x13c>
          hTask = NULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001be4:	693b      	ldr	r3, [r7, #16]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3730      	adds	r7, #48	; 0x30
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000094 	.word	0x20000094

08001bf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <vApplicationGetIdleTaskMemory+0x2c>)
 8001c04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <vApplicationGetIdleTaskMemory+0x30>)
 8001c0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000098 	.word	0x20000098
 8001c24:	200000f4 	.word	0x200000f4

08001c28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <vApplicationGetTimerTaskMemory+0x2c>)
 8001c38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <vApplicationGetTimerTaskMemory+0x30>)
 8001c3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c46:	601a      	str	r2, [r3, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	200002f4 	.word	0x200002f4
 8001c58:	20000350 	.word	0x20000350

08001c5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f103 0208 	add.w	r2, r3, #8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f103 0208 	add.w	r2, r3, #8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f103 0208 	add.w	r2, r3, #8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	601a      	str	r2, [r3, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b085      	sub	sp, #20
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d103      	bne.n	8001d1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e00c      	b.n	8001d38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3308      	adds	r3, #8
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e002      	b.n	8001d2c <vListInsert+0x2e>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d2f6      	bcs.n	8001d26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6892      	ldr	r2, [r2, #8]
 8001d86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6852      	ldr	r2, [r2, #4]
 8001d90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d103      	bne.n	8001da4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	1e5a      	subs	r2, r3, #1
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10c      	bne.n	8001df2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ddc:	b672      	cpsid	i
 8001dde:	f383 8811 	msr	BASEPRI, r3
 8001de2:	f3bf 8f6f 	isb	sy
 8001de6:	f3bf 8f4f 	dsb	sy
 8001dea:	b662      	cpsie	i
 8001dec:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001dee:	bf00      	nop
 8001df0:	e7fe      	b.n	8001df0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8001df2:	f002 f8ab 	bl	8003f4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	68f9      	ldr	r1, [r7, #12]
 8001e00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	441a      	add	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e22:	3b01      	subs	r3, #1
 8001e24:	68f9      	ldr	r1, [r7, #12]
 8001e26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	441a      	add	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	22ff      	movs	r2, #255	; 0xff
 8001e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	22ff      	movs	r2, #255	; 0xff
 8001e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d114      	bne.n	8001e72 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01a      	beq.n	8001e86 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3310      	adds	r3, #16
 8001e54:	4618      	mov	r0, r3
 8001e56:	f001 f963 	bl	8003120 <xTaskRemoveFromEventList>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d012      	beq.n	8001e86 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <xQueueGenericReset+0xd0>)
 8001e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f3bf 8f4f 	dsb	sy
 8001e6c:	f3bf 8f6f 	isb	sy
 8001e70:	e009      	b.n	8001e86 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3310      	adds	r3, #16
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fef0 	bl	8001c5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3324      	adds	r3, #36	; 0x24
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff feeb 	bl	8001c5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e86:	f002 f895 	bl	8003fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	e000ed04 	.word	0xe000ed04

08001e98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08e      	sub	sp, #56	; 0x38
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10c      	bne.n	8001ec6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8001eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb0:	b672      	cpsid	i
 8001eb2:	f383 8811 	msr	BASEPRI, r3
 8001eb6:	f3bf 8f6f 	isb	sy
 8001eba:	f3bf 8f4f 	dsb	sy
 8001ebe:	b662      	cpsie	i
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ec2:	bf00      	nop
 8001ec4:	e7fe      	b.n	8001ec4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10c      	bne.n	8001ee6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8001ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed0:	b672      	cpsid	i
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	b662      	cpsie	i
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001ee2:	bf00      	nop
 8001ee4:	e7fe      	b.n	8001ee4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <xQueueGenericCreateStatic+0x5a>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <xQueueGenericCreateStatic+0x5e>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <xQueueGenericCreateStatic+0x60>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10c      	bne.n	8001f16 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8001efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f00:	b672      	cpsid	i
 8001f02:	f383 8811 	msr	BASEPRI, r3
 8001f06:	f3bf 8f6f 	isb	sy
 8001f0a:	f3bf 8f4f 	dsb	sy
 8001f0e:	b662      	cpsie	i
 8001f10:	623b      	str	r3, [r7, #32]
}
 8001f12:	bf00      	nop
 8001f14:	e7fe      	b.n	8001f14 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <xQueueGenericCreateStatic+0x8a>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <xQueueGenericCreateStatic+0x8e>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <xQueueGenericCreateStatic+0x90>
 8001f26:	2300      	movs	r3, #0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10c      	bne.n	8001f46 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8001f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f30:	b672      	cpsid	i
 8001f32:	f383 8811 	msr	BASEPRI, r3
 8001f36:	f3bf 8f6f 	isb	sy
 8001f3a:	f3bf 8f4f 	dsb	sy
 8001f3e:	b662      	cpsie	i
 8001f40:	61fb      	str	r3, [r7, #28]
}
 8001f42:	bf00      	nop
 8001f44:	e7fe      	b.n	8001f44 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f46:	2350      	movs	r3, #80	; 0x50
 8001f48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b50      	cmp	r3, #80	; 0x50
 8001f4e:	d00c      	beq.n	8001f6a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8001f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f54:	b672      	cpsid	i
 8001f56:	f383 8811 	msr	BASEPRI, r3
 8001f5a:	f3bf 8f6f 	isb	sy
 8001f5e:	f3bf 8f4f 	dsb	sy
 8001f62:	b662      	cpsie	i
 8001f64:	61bb      	str	r3, [r7, #24]
}
 8001f66:	bf00      	nop
 8001f68:	e7fe      	b.n	8001f68 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001f6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00d      	beq.n	8001f92 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4613      	mov	r3, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f847 	bl	8002020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3730      	adds	r7, #48	; 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10c      	bne.n	8001fca <xQueueGenericCreate+0x2e>
	__asm volatile
 8001fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb4:	b672      	cpsid	i
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	b662      	cpsie	i
 8001fc4:	613b      	str	r3, [r7, #16]
}
 8001fc6:	bf00      	nop
 8001fc8:	e7fe      	b.n	8001fc8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	e004      	b.n	8001fe0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	3350      	adds	r3, #80	; 0x50
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 f8dd 	bl	80041a4 <pvPortMalloc>
 8001fea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d011      	beq.n	8002016 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3350      	adds	r3, #80	; 0x50
 8001ffa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002004:	79fa      	ldrb	r2, [r7, #7]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4613      	mov	r3, r2
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f805 	bl	8002020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002016:	69bb      	ldr	r3, [r7, #24]
	}
 8002018:	4618      	mov	r0, r3
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d103      	bne.n	800203c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e002      	b.n	8002042 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800204e:	2101      	movs	r1, #1
 8002050:	69b8      	ldr	r0, [r7, #24]
 8002052:	f7ff feb7 	bl	8001dc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08e      	sub	sp, #56	; 0x38
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002076:	2300      	movs	r3, #0
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10c      	bne.n	800209e <xQueueGenericSend+0x36>
	__asm volatile
 8002084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002088:	b672      	cpsid	i
 800208a:	f383 8811 	msr	BASEPRI, r3
 800208e:	f3bf 8f6f 	isb	sy
 8002092:	f3bf 8f4f 	dsb	sy
 8002096:	b662      	cpsie	i
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800209a:	bf00      	nop
 800209c:	e7fe      	b.n	800209c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d103      	bne.n	80020ac <xQueueGenericSend+0x44>
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <xQueueGenericSend+0x48>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <xQueueGenericSend+0x4a>
 80020b0:	2300      	movs	r3, #0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <xQueueGenericSend+0x68>
	__asm volatile
 80020b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ba:	b672      	cpsid	i
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	b662      	cpsie	i
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80020cc:	bf00      	nop
 80020ce:	e7fe      	b.n	80020ce <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d103      	bne.n	80020de <xQueueGenericSend+0x76>
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <xQueueGenericSend+0x7a>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <xQueueGenericSend+0x7c>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10c      	bne.n	8002102 <xQueueGenericSend+0x9a>
	__asm volatile
 80020e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ec:	b672      	cpsid	i
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	b662      	cpsie	i
 80020fc:	623b      	str	r3, [r7, #32]
}
 80020fe:	bf00      	nop
 8002100:	e7fe      	b.n	8002100 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002102:	f001 f9d3 	bl	80034ac <xTaskGetSchedulerState>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <xQueueGenericSend+0xaa>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <xQueueGenericSend+0xae>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <xQueueGenericSend+0xb0>
 8002116:	2300      	movs	r3, #0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10c      	bne.n	8002136 <xQueueGenericSend+0xce>
	__asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002120:	b672      	cpsid	i
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	b662      	cpsie	i
 8002130:	61fb      	str	r3, [r7, #28]
}
 8002132:	bf00      	nop
 8002134:	e7fe      	b.n	8002134 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002136:	f001 ff09 	bl	8003f4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	429a      	cmp	r2, r3
 8002144:	d302      	bcc.n	800214c <xQueueGenericSend+0xe4>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d129      	bne.n	80021a0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	68b9      	ldr	r1, [r7, #8]
 8002150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002152:	f000 fa35 	bl	80025c0 <prvCopyDataToQueue>
 8002156:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	2b00      	cmp	r3, #0
 800215e:	d010      	beq.n	8002182 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	3324      	adds	r3, #36	; 0x24
 8002164:	4618      	mov	r0, r3
 8002166:	f000 ffdb 	bl	8003120 <xTaskRemoveFromEventList>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002170:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <xQueueGenericSend+0x208>)
 8002172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	f3bf 8f4f 	dsb	sy
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	e00a      	b.n	8002198 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002188:	4b39      	ldr	r3, [pc, #228]	; (8002270 <xQueueGenericSend+0x208>)
 800218a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002198:	f001 ff0c 	bl	8003fb4 <vPortExitCritical>
				return pdPASS;
 800219c:	2301      	movs	r3, #1
 800219e:	e063      	b.n	8002268 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d103      	bne.n	80021ae <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021a6:	f001 ff05 	bl	8003fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e05c      	b.n	8002268 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d106      	bne.n	80021c2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4618      	mov	r0, r3
 80021ba:	f001 f817 	bl	80031ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021be:	2301      	movs	r3, #1
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021c2:	f001 fef7 	bl	8003fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021c6:	f000 fd7d 	bl	8002cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021ca:	f001 febf 	bl	8003f4c <vPortEnterCritical>
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021da:	d103      	bne.n	80021e4 <xQueueGenericSend+0x17c>
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ea:	b25b      	sxtb	r3, r3
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d103      	bne.n	80021fa <xQueueGenericSend+0x192>
 80021f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021fa:	f001 fedb 	bl	8003fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021fe:	1d3a      	adds	r2, r7, #4
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f001 f806 	bl	8003218 <xTaskCheckForTimeOut>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d124      	bne.n	800225c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002214:	f000 facc 	bl	80027b0 <prvIsQueueFull>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d018      	beq.n	8002250 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	3310      	adds	r3, #16
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f000 ff26 	bl	8003078 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800222c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800222e:	f000 fa57 	bl	80026e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002232:	f000 fd55 	bl	8002ce0 <xTaskResumeAll>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	f47f af7c 	bne.w	8002136 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <xQueueGenericSend+0x208>)
 8002240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	f3bf 8f6f 	isb	sy
 800224e:	e772      	b.n	8002136 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002252:	f000 fa45 	bl	80026e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002256:	f000 fd43 	bl	8002ce0 <xTaskResumeAll>
 800225a:	e76c      	b.n	8002136 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800225c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800225e:	f000 fa3f 	bl	80026e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002262:	f000 fd3d 	bl	8002ce0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002266:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002268:	4618      	mov	r0, r3
 800226a:	3738      	adds	r7, #56	; 0x38
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	e000ed04 	.word	0xe000ed04

08002274 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08e      	sub	sp, #56	; 0x38
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10c      	bne.n	80022a6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002290:	b672      	cpsid	i
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	b662      	cpsie	i
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80022a2:	bf00      	nop
 80022a4:	e7fe      	b.n	80022a4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d103      	bne.n	80022b4 <xQueueGenericSendFromISR+0x40>
 80022ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <xQueueGenericSendFromISR+0x44>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <xQueueGenericSendFromISR+0x46>
 80022b8:	2300      	movs	r3, #0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c2:	b672      	cpsid	i
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	b662      	cpsie	i
 80022d2:	623b      	str	r3, [r7, #32]
}
 80022d4:	bf00      	nop
 80022d6:	e7fe      	b.n	80022d6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d103      	bne.n	80022e6 <xQueueGenericSendFromISR+0x72>
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <xQueueGenericSendFromISR+0x76>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <xQueueGenericSendFromISR+0x78>
 80022ea:	2300      	movs	r3, #0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10c      	bne.n	800230a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80022f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f4:	b672      	cpsid	i
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	b662      	cpsie	i
 8002304:	61fb      	str	r3, [r7, #28]
}
 8002306:	bf00      	nop
 8002308:	e7fe      	b.n	8002308 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800230a:	f001 ff07 	bl	800411c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800230e:	f3ef 8211 	mrs	r2, BASEPRI
 8002312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002316:	b672      	cpsid	i
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	b662      	cpsie	i
 8002326:	61ba      	str	r2, [r7, #24]
 8002328:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800232a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <xQueueGenericSendFromISR+0xcc>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d12c      	bne.n	800239a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002350:	f000 f936 	bl	80025c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002354:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d112      	bne.n	8002384 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2b00      	cmp	r3, #0
 8002364:	d016      	beq.n	8002394 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	3324      	adds	r3, #36	; 0x24
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fed8 	bl	8003120 <xTaskRemoveFromEventList>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00e      	beq.n	8002394 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e007      	b.n	8002394 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002384:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002388:	3301      	adds	r3, #1
 800238a:	b2db      	uxtb	r3, r3
 800238c:	b25a      	sxtb	r2, r3
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002394:	2301      	movs	r3, #1
 8002396:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002398:	e001      	b.n	800239e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800239a:	2300      	movs	r3, #0
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80023a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80023aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3738      	adds	r7, #56	; 0x38
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08c      	sub	sp, #48	; 0x30
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <xQueueReceive+0x34>
	__asm volatile
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	b672      	cpsid	i
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	b662      	cpsie	i
 80023e2:	623b      	str	r3, [r7, #32]
}
 80023e4:	bf00      	nop
 80023e6:	e7fe      	b.n	80023e6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <xQueueReceive+0x42>
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <xQueueReceive+0x46>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <xQueueReceive+0x48>
 80023fa:	2300      	movs	r3, #0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10c      	bne.n	800241a <xQueueReceive+0x66>
	__asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002404:	b672      	cpsid	i
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	b662      	cpsie	i
 8002414:	61fb      	str	r3, [r7, #28]
}
 8002416:	bf00      	nop
 8002418:	e7fe      	b.n	8002418 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800241a:	f001 f847 	bl	80034ac <xTaskGetSchedulerState>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <xQueueReceive+0x76>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <xQueueReceive+0x7a>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <xQueueReceive+0x7c>
 800242e:	2300      	movs	r3, #0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10c      	bne.n	800244e <xQueueReceive+0x9a>
	__asm volatile
 8002434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002438:	b672      	cpsid	i
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	b662      	cpsie	i
 8002448:	61bb      	str	r3, [r7, #24]
}
 800244a:	bf00      	nop
 800244c:	e7fe      	b.n	800244c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800244e:	f001 fd7d 	bl	8003f4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01f      	beq.n	800249e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002462:	f000 f917 	bl	8002694 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00f      	beq.n	8002496 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	3310      	adds	r3, #16
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fe50 	bl	8003120 <xTaskRemoveFromEventList>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <xQueueReceive+0x1c8>)
 8002488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002496:	f001 fd8d 	bl	8003fb4 <vPortExitCritical>
				return pdPASS;
 800249a:	2301      	movs	r3, #1
 800249c:	e069      	b.n	8002572 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d103      	bne.n	80024ac <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024a4:	f001 fd86 	bl	8003fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e062      	b.n	8002572 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024b2:	f107 0310 	add.w	r3, r7, #16
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fe98 	bl	80031ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024bc:	2301      	movs	r3, #1
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024c0:	f001 fd78 	bl	8003fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024c4:	f000 fbfe 	bl	8002cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024c8:	f001 fd40 	bl	8003f4c <vPortEnterCritical>
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024d2:	b25b      	sxtb	r3, r3
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d103      	bne.n	80024e2 <xQueueReceive+0x12e>
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ee:	d103      	bne.n	80024f8 <xQueueReceive+0x144>
 80024f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024f8:	f001 fd5c 	bl	8003fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024fc:	1d3a      	adds	r2, r7, #4
 80024fe:	f107 0310 	add.w	r3, r7, #16
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fe87 	bl	8003218 <xTaskCheckForTimeOut>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d123      	bne.n	8002558 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002512:	f000 f937 	bl	8002784 <prvIsQueueEmpty>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d017      	beq.n	800254c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	3324      	adds	r3, #36	; 0x24
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fda7 	bl	8003078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800252a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800252c:	f000 f8d8 	bl	80026e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002530:	f000 fbd6 	bl	8002ce0 <xTaskResumeAll>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d189      	bne.n	800244e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <xQueueReceive+0x1c8>)
 800253c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	e780      	b.n	800244e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800254c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800254e:	f000 f8c7 	bl	80026e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002552:	f000 fbc5 	bl	8002ce0 <xTaskResumeAll>
 8002556:	e77a      	b.n	800244e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800255a:	f000 f8c1 	bl	80026e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800255e:	f000 fbbf 	bl	8002ce0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002564:	f000 f90e 	bl	8002784 <prvIsQueueEmpty>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	f43f af6f 	beq.w	800244e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002570:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002572:	4618      	mov	r0, r3
 8002574:	3730      	adds	r7, #48	; 0x30
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000ed04 	.word	0xe000ed04

08002580 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	b672      	cpsid	i
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	b662      	cpsie	i
 80025a2:	60bb      	str	r3, [r7, #8]
}
 80025a4:	bf00      	nop
 80025a6:	e7fe      	b.n	80025a6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80025a8:	f001 fcd0 	bl	8003f4c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80025b2:	f001 fcff 	bl	8003fb4 <vPortExitCritical>

	return uxReturn;
 80025b6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d14d      	bne.n	8002682 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 ff7c 	bl	80034e8 <xTaskPriorityDisinherit>
 80025f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	e043      	b.n	8002682 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d119      	bne.n	8002634 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6858      	ldr	r0, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	461a      	mov	r2, r3
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	f001 ffd8 	bl	80045c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	441a      	add	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	429a      	cmp	r2, r3
 8002628:	d32b      	bcc.n	8002682 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	e026      	b.n	8002682 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	68d8      	ldr	r0, [r3, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	461a      	mov	r2, r3
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	f001 ffbe 	bl	80045c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	425b      	negs	r3, r3
 800264e:	441a      	add	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d207      	bcs.n	8002670 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	425b      	negs	r3, r3
 800266a:	441a      	add	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d105      	bne.n	8002682 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	3b01      	subs	r3, #1
 8002680:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800268a:	697b      	ldr	r3, [r7, #20]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d018      	beq.n	80026d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	441a      	add	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d303      	bcc.n	80026c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68d9      	ldr	r1, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	461a      	mov	r2, r3
 80026d2:	6838      	ldr	r0, [r7, #0]
 80026d4:	f001 ff74 	bl	80045c0 <memcpy>
	}
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80026e8:	f001 fc30 	bl	8003f4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026f4:	e011      	b.n	800271a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d012      	beq.n	8002724 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3324      	adds	r3, #36	; 0x24
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fd0c 	bl	8003120 <xTaskRemoveFromEventList>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800270e:	f000 fde9 	bl	80032e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	3b01      	subs	r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800271a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	dce9      	bgt.n	80026f6 <prvUnlockQueue+0x16>
 8002722:	e000      	b.n	8002726 <prvUnlockQueue+0x46>
					break;
 8002724:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	22ff      	movs	r2, #255	; 0xff
 800272a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800272e:	f001 fc41 	bl	8003fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002732:	f001 fc0b 	bl	8003f4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800273c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800273e:	e011      	b.n	8002764 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d012      	beq.n	800276e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3310      	adds	r3, #16
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fce7 	bl	8003120 <xTaskRemoveFromEventList>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002758:	f000 fdc4 	bl	80032e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800275c:	7bbb      	ldrb	r3, [r7, #14]
 800275e:	3b01      	subs	r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002768:	2b00      	cmp	r3, #0
 800276a:	dce9      	bgt.n	8002740 <prvUnlockQueue+0x60>
 800276c:	e000      	b.n	8002770 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800276e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	22ff      	movs	r2, #255	; 0xff
 8002774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002778:	f001 fc1c 	bl	8003fb4 <vPortExitCritical>
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800278c:	f001 fbde 	bl	8003f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002798:	2301      	movs	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e001      	b.n	80027a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027a2:	f001 fc07 	bl	8003fb4 <vPortExitCritical>

	return xReturn;
 80027a6:	68fb      	ldr	r3, [r7, #12]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027b8:	f001 fbc8 	bl	8003f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d102      	bne.n	80027ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80027c8:	2301      	movs	r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	e001      	b.n	80027d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027d2:	f001 fbef 	bl	8003fb4 <vPortExitCritical>

	return xReturn;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	e014      	b.n	800281a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80027f0:	4a0f      	ldr	r2, [pc, #60]	; (8002830 <vQueueAddToRegistry+0x50>)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10b      	bne.n	8002814 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <vQueueAddToRegistry+0x50>)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002806:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <vQueueAddToRegistry+0x50>)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002812:	e006      	b.n	8002822 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3301      	adds	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b07      	cmp	r3, #7
 800281e:	d9e7      	bls.n	80027f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	200049b8 	.word	0x200049b8

08002834 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002844:	f001 fb82 	bl	8003f4c <vPortEnterCritical>
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800284e:	b25b      	sxtb	r3, r3
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d103      	bne.n	800285e <vQueueWaitForMessageRestricted+0x2a>
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002864:	b25b      	sxtb	r3, r3
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d103      	bne.n	8002874 <vQueueWaitForMessageRestricted+0x40>
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002874:	f001 fb9e 	bl	8003fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	2b00      	cmp	r3, #0
 800287e:	d106      	bne.n	800288e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3324      	adds	r3, #36	; 0x24
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fc1b 	bl	80030c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff26 	bl	80026e0 <prvUnlockQueue>
	}
 8002894:	bf00      	nop
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08e      	sub	sp, #56	; 0x38
 80028a0:	af04      	add	r7, sp, #16
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10c      	bne.n	80028ca <xTaskCreateStatic+0x2e>
	__asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b4:	b672      	cpsid	i
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	b662      	cpsie	i
 80028c4:	623b      	str	r3, [r7, #32]
}
 80028c6:	bf00      	nop
 80028c8:	e7fe      	b.n	80028c8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10c      	bne.n	80028ea <xTaskCreateStatic+0x4e>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	b672      	cpsid	i
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	b662      	cpsie	i
 80028e4:	61fb      	str	r3, [r7, #28]
}
 80028e6:	bf00      	nop
 80028e8:	e7fe      	b.n	80028e8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028ea:	235c      	movs	r3, #92	; 0x5c
 80028ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b5c      	cmp	r3, #92	; 0x5c
 80028f2:	d00c      	beq.n	800290e <xTaskCreateStatic+0x72>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	b672      	cpsid	i
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	b662      	cpsie	i
 8002908:	61bb      	str	r3, [r7, #24]
}
 800290a:	bf00      	nop
 800290c:	e7fe      	b.n	800290c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800290e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01e      	beq.n	8002954 <xTaskCreateStatic+0xb8>
 8002916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01b      	beq.n	8002954 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002924:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	2202      	movs	r2, #2
 800292a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800292e:	2300      	movs	r3, #0
 8002930:	9303      	str	r3, [sp, #12]
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	9302      	str	r3, [sp, #8]
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	9301      	str	r3, [sp, #4]
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f850 	bl	80029ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800294c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800294e:	f000 f8df 	bl	8002b10 <prvAddNewTaskToReadyList>
 8002952:	e001      	b.n	8002958 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002958:	697b      	ldr	r3, [r7, #20]
	}
 800295a:	4618      	mov	r0, r3
 800295c:	3728      	adds	r7, #40	; 0x28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002962:	b580      	push	{r7, lr}
 8002964:	b08c      	sub	sp, #48	; 0x30
 8002966:	af04      	add	r7, sp, #16
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	4613      	mov	r3, r2
 8002970:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4618      	mov	r0, r3
 8002978:	f001 fc14 	bl	80041a4 <pvPortMalloc>
 800297c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002984:	205c      	movs	r0, #92	; 0x5c
 8002986:	f001 fc0d 	bl	80041a4 <pvPortMalloc>
 800298a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
 8002998:	e005      	b.n	80029a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f001 fccc 	bl	8004338 <vPortFree>
 80029a0:	e001      	b.n	80029a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d017      	beq.n	80029dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9303      	str	r3, [sp, #12]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	9302      	str	r3, [sp, #8]
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f80e 	bl	80029ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029d0:	69f8      	ldr	r0, [r7, #28]
 80029d2:	f000 f89d 	bl	8002b10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	e002      	b.n	80029e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029e2:	69bb      	ldr	r3, [r7, #24]
	}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	461a      	mov	r2, r3
 8002a04:	21a5      	movs	r1, #165	; 0xa5
 8002a06:	f001 fde9 	bl	80045dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002a14:	440b      	add	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f023 0307 	bic.w	r3, r3, #7
 8002a22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00c      	beq.n	8002a48 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	b672      	cpsid	i
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	b662      	cpsie	i
 8002a42:	617b      	str	r3, [r7, #20]
}
 8002a44:	bf00      	nop
 8002a46:	e7fe      	b.n	8002a46 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01f      	beq.n	8002a8e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	e012      	b.n	8002a7a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	4413      	add	r3, r2
 8002a5a:	7819      	ldrb	r1, [r3, #0]
 8002a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	3334      	adds	r3, #52	; 0x34
 8002a64:	460a      	mov	r2, r1
 8002a66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d006      	beq.n	8002a82 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	3301      	adds	r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	2b0f      	cmp	r3, #15
 8002a7e:	d9e9      	bls.n	8002a54 <prvInitialiseNewTask+0x68>
 8002a80:	e000      	b.n	8002a84 <prvInitialiseNewTask+0x98>
			{
				break;
 8002a82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a8c:	e003      	b.n	8002a96 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	2b37      	cmp	r3, #55	; 0x37
 8002a9a:	d901      	bls.n	8002aa0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a9c:	2337      	movs	r3, #55	; 0x37
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aaa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	2200      	movs	r2, #0
 8002ab0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff f8f0 	bl	8001c9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	3318      	adds	r3, #24
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff f8eb 	bl	8001c9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	2200      	movs	r2, #0
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	68f9      	ldr	r1, [r7, #12]
 8002aee:	69b8      	ldr	r0, [r7, #24]
 8002af0:	f001 f91c 	bl	8003d2c <pxPortInitialiseStack>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b06:	bf00      	nop
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b18:	f001 fa18 	bl	8003f4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <prvAddNewTaskToReadyList+0xc4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	4a2c      	ldr	r2, [pc, #176]	; (8002bd4 <prvAddNewTaskToReadyList+0xc4>)
 8002b24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b26:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <prvAddNewTaskToReadyList+0xc8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b2e:	4a2a      	ldr	r2, [pc, #168]	; (8002bd8 <prvAddNewTaskToReadyList+0xc8>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <prvAddNewTaskToReadyList+0xc4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d110      	bne.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b3c:	f000 fbf6 	bl	800332c <prvInitialiseTaskLists>
 8002b40:	e00d      	b.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <prvAddNewTaskToReadyList+0xcc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <prvAddNewTaskToReadyList+0xc8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d802      	bhi.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b58:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <prvAddNewTaskToReadyList+0xc8>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <prvAddNewTaskToReadyList+0xd0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <prvAddNewTaskToReadyList+0xd0>)
 8002b66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <prvAddNewTaskToReadyList+0xd0>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <prvAddNewTaskToReadyList+0xd4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d903      	bls.n	8002b84 <prvAddNewTaskToReadyList+0x74>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <prvAddNewTaskToReadyList+0xd4>)
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <prvAddNewTaskToReadyList+0xd8>)
 8002b92:	441a      	add	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3304      	adds	r3, #4
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	f7ff f88b 	bl	8001cb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ba0:	f001 fa08 	bl	8003fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <prvAddNewTaskToReadyList+0xcc>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00e      	beq.n	8002bca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <prvAddNewTaskToReadyList+0xc8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d207      	bcs.n	8002bca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <prvAddNewTaskToReadyList+0xdc>)
 8002bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000c24 	.word	0x20000c24
 8002bd8:	20000750 	.word	0x20000750
 8002bdc:	20000c30 	.word	0x20000c30
 8002be0:	20000c40 	.word	0x20000c40
 8002be4:	20000c2c 	.word	0x20000c2c
 8002be8:	20000754 	.word	0x20000754
 8002bec:	e000ed04 	.word	0xe000ed04

08002bf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002bfe:	463a      	mov	r2, r7
 8002c00:	1d39      	adds	r1, r7, #4
 8002c02:	f107 0308 	add.w	r3, r7, #8
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fff4 	bl	8001bf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c0c:	6839      	ldr	r1, [r7, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	9202      	str	r2, [sp, #8]
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	2300      	movs	r3, #0
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	4923      	ldr	r1, [pc, #140]	; (8002cac <vTaskStartScheduler+0xbc>)
 8002c20:	4823      	ldr	r0, [pc, #140]	; (8002cb0 <vTaskStartScheduler+0xc0>)
 8002c22:	f7ff fe3b 	bl	800289c <xTaskCreateStatic>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <vTaskStartScheduler+0xc4>)
 8002c2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c2c:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <vTaskStartScheduler+0xc4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c34:	2301      	movs	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e001      	b.n	8002c3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d102      	bne.n	8002c4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002c44:	f000 fd16 	bl	8003674 <xTimerCreateTimerTask>
 8002c48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d118      	bne.n	8002c82 <vTaskStartScheduler+0x92>
	__asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	b672      	cpsid	i
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	b662      	cpsie	i
 8002c64:	613b      	str	r3, [r7, #16]
}
 8002c66:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <vTaskStartScheduler+0xc8>)
 8002c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <vTaskStartScheduler+0xcc>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <vTaskStartScheduler+0xd0>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c7c:	f001 f8e8 	bl	8003e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c80:	e010      	b.n	8002ca4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d10c      	bne.n	8002ca4 <vTaskStartScheduler+0xb4>
	__asm volatile
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	b672      	cpsid	i
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	b662      	cpsie	i
 8002c9e:	60fb      	str	r3, [r7, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	e7fe      	b.n	8002ca2 <vTaskStartScheduler+0xb2>
}
 8002ca4:	bf00      	nop
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	08005654 	.word	0x08005654
 8002cb0:	080032fd 	.word	0x080032fd
 8002cb4:	20000c48 	.word	0x20000c48
 8002cb8:	20000c44 	.word	0x20000c44
 8002cbc:	20000c30 	.word	0x20000c30
 8002cc0:	20000c28 	.word	0x20000c28

08002cc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <vTaskSuspendAll+0x18>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	4a03      	ldr	r2, [pc, #12]	; (8002cdc <vTaskSuspendAll+0x18>)
 8002cd0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	20000c4c 	.word	0x20000c4c

08002ce0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002cee:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <xTaskResumeAll+0x11c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <xTaskResumeAll+0x30>
	__asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	b672      	cpsid	i
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	b662      	cpsie	i
 8002d0a:	603b      	str	r3, [r7, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d10:	f001 f91c 	bl	8003f4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d14:	4b39      	ldr	r3, [pc, #228]	; (8002dfc <xTaskResumeAll+0x11c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	4a38      	ldr	r2, [pc, #224]	; (8002dfc <xTaskResumeAll+0x11c>)
 8002d1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d1e:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <xTaskResumeAll+0x11c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d162      	bne.n	8002dec <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d26:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <xTaskResumeAll+0x120>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d05e      	beq.n	8002dec <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d2e:	e02f      	b.n	8002d90 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d30:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <xTaskResumeAll+0x124>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3318      	adds	r3, #24
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f817 	bl	8001d70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3304      	adds	r3, #4
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff f812 	bl	8001d70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <xTaskResumeAll+0x128>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d903      	bls.n	8002d60 <xTaskResumeAll+0x80>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	4a2a      	ldr	r2, [pc, #168]	; (8002e08 <xTaskResumeAll+0x128>)
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <xTaskResumeAll+0x12c>)
 8002d6e:	441a      	add	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3304      	adds	r3, #4
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f7fe ff9d 	bl	8001cb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <xTaskResumeAll+0x130>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <xTaskResumeAll+0x134>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <xTaskResumeAll+0x124>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1cb      	bne.n	8002d30 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d9e:	f000 fb65 	bl	800346c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <xTaskResumeAll+0x138>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d010      	beq.n	8002dd0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002dae:	f000 f847 	bl	8002e40 <xTaskIncrementTick>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <xTaskResumeAll+0x134>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f1      	bne.n	8002dae <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <xTaskResumeAll+0x138>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <xTaskResumeAll+0x134>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <xTaskResumeAll+0x13c>)
 8002dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002dec:	f001 f8e2 	bl	8003fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8002df0:	68bb      	ldr	r3, [r7, #8]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000c4c 	.word	0x20000c4c
 8002e00:	20000c24 	.word	0x20000c24
 8002e04:	20000be4 	.word	0x20000be4
 8002e08:	20000c2c 	.word	0x20000c2c
 8002e0c:	20000754 	.word	0x20000754
 8002e10:	20000750 	.word	0x20000750
 8002e14:	20000c38 	.word	0x20000c38
 8002e18:	20000c34 	.word	0x20000c34
 8002e1c:	e000ed04 	.word	0xe000ed04

08002e20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <xTaskGetTickCount+0x1c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002e2c:	687b      	ldr	r3, [r7, #4]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000c28 	.word	0x20000c28

08002e40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e4a:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <xTaskIncrementTick+0x14c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 808b 	bne.w	8002f6a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e54:	4b4e      	ldr	r3, [pc, #312]	; (8002f90 <xTaskIncrementTick+0x150>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e5c:	4a4c      	ldr	r2, [pc, #304]	; (8002f90 <xTaskIncrementTick+0x150>)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d122      	bne.n	8002eae <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e68:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <xTaskIncrementTick+0x154>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <xTaskIncrementTick+0x4c>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	b672      	cpsid	i
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	b662      	cpsie	i
 8002e86:	603b      	str	r3, [r7, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	e7fe      	b.n	8002e8a <xTaskIncrementTick+0x4a>
 8002e8c:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <xTaskIncrementTick+0x154>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b41      	ldr	r3, [pc, #260]	; (8002f98 <xTaskIncrementTick+0x158>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a3f      	ldr	r2, [pc, #252]	; (8002f94 <xTaskIncrementTick+0x154>)
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4a3f      	ldr	r2, [pc, #252]	; (8002f98 <xTaskIncrementTick+0x158>)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b3e      	ldr	r3, [pc, #248]	; (8002f9c <xTaskIncrementTick+0x15c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	4a3d      	ldr	r2, [pc, #244]	; (8002f9c <xTaskIncrementTick+0x15c>)
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	f000 fadf 	bl	800346c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002eae:	4b3c      	ldr	r3, [pc, #240]	; (8002fa0 <xTaskIncrementTick+0x160>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d349      	bcc.n	8002f4c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eb8:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <xTaskIncrementTick+0x154>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d104      	bne.n	8002ecc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec2:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <xTaskIncrementTick+0x160>)
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	601a      	str	r2, [r3, #0]
					break;
 8002eca:	e03f      	b.n	8002f4c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <xTaskIncrementTick+0x154>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d203      	bcs.n	8002eec <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ee4:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <xTaskIncrementTick+0x160>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002eea:	e02f      	b.n	8002f4c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe ff3d 	bl	8001d70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d004      	beq.n	8002f08 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3318      	adds	r3, #24
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe ff34 	bl	8001d70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <xTaskIncrementTick+0x164>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d903      	bls.n	8002f1c <xTaskIncrementTick+0xdc>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <xTaskIncrementTick+0x164>)
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <xTaskIncrementTick+0x168>)
 8002f2a:	441a      	add	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7fe febf 	bl	8001cb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <xTaskIncrementTick+0x16c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d3b8      	bcc.n	8002eb8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8002f46:	2301      	movs	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f4a:	e7b5      	b.n	8002eb8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f4c:	4b17      	ldr	r3, [pc, #92]	; (8002fac <xTaskIncrementTick+0x16c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f52:	4915      	ldr	r1, [pc, #84]	; (8002fa8 <xTaskIncrementTick+0x168>)
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d907      	bls.n	8002f74 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	e004      	b.n	8002f74 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <xTaskIncrementTick+0x170>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <xTaskIncrementTick+0x170>)
 8002f72:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <xTaskIncrementTick+0x174>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002f80:	697b      	ldr	r3, [r7, #20]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000c4c 	.word	0x20000c4c
 8002f90:	20000c28 	.word	0x20000c28
 8002f94:	20000bdc 	.word	0x20000bdc
 8002f98:	20000be0 	.word	0x20000be0
 8002f9c:	20000c3c 	.word	0x20000c3c
 8002fa0:	20000c44 	.word	0x20000c44
 8002fa4:	20000c2c 	.word	0x20000c2c
 8002fa8:	20000754 	.word	0x20000754
 8002fac:	20000750 	.word	0x20000750
 8002fb0:	20000c34 	.word	0x20000c34
 8002fb4:	20000c38 	.word	0x20000c38

08002fb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <vTaskSwitchContext+0xac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002fc6:	4b28      	ldr	r3, [pc, #160]	; (8003068 <vTaskSwitchContext+0xb0>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002fcc:	e043      	b.n	8003056 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8002fce:	4b26      	ldr	r3, [pc, #152]	; (8003068 <vTaskSwitchContext+0xb0>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <vTaskSwitchContext+0xb4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e012      	b.n	8003002 <vTaskSwitchContext+0x4a>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <vTaskSwitchContext+0x44>
	__asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe6:	b672      	cpsid	i
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	b662      	cpsie	i
 8002ff6:	607b      	str	r3, [r7, #4]
}
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <vTaskSwitchContext+0x42>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	491b      	ldr	r1, [pc, #108]	; (8003070 <vTaskSwitchContext+0xb8>)
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0e2      	beq.n	8002fdc <vTaskSwitchContext+0x24>
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4a13      	ldr	r2, [pc, #76]	; (8003070 <vTaskSwitchContext+0xb8>)
 8003022:	4413      	add	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	3308      	adds	r3, #8
 8003038:	429a      	cmp	r2, r3
 800303a:	d104      	bne.n	8003046 <vTaskSwitchContext+0x8e>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a09      	ldr	r2, [pc, #36]	; (8003074 <vTaskSwitchContext+0xbc>)
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4a06      	ldr	r2, [pc, #24]	; (800306c <vTaskSwitchContext+0xb4>)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6013      	str	r3, [r2, #0]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000c4c 	.word	0x20000c4c
 8003068:	20000c38 	.word	0x20000c38
 800306c:	20000c2c 	.word	0x20000c2c
 8003070:	20000754 	.word	0x20000754
 8003074:	20000750 	.word	0x20000750

08003078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10c      	bne.n	80030a2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	b672      	cpsid	i
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	b662      	cpsie	i
 800309c:	60fb      	str	r3, [r7, #12]
}
 800309e:	bf00      	nop
 80030a0:	e7fe      	b.n	80030a0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <vTaskPlaceOnEventList+0x48>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3318      	adds	r3, #24
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fe fe27 	bl	8001cfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030b0:	2101      	movs	r1, #1
 80030b2:	6838      	ldr	r0, [r7, #0]
 80030b4:	f000 fa8a 	bl	80035cc <prvAddCurrentTaskToDelayedList>
}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000750 	.word	0x20000750

080030c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	b672      	cpsid	i
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	b662      	cpsie	i
 80030ea:	617b      	str	r3, [r7, #20]
}
 80030ec:	bf00      	nop
 80030ee:	e7fe      	b.n	80030ee <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <vTaskPlaceOnEventListRestricted+0x58>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3318      	adds	r3, #24
 80030f6:	4619      	mov	r1, r3
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7fe fddc 	bl	8001cb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
 8003108:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	68b8      	ldr	r0, [r7, #8]
 800310e:	f000 fa5d 	bl	80035cc <prvAddCurrentTaskToDelayedList>
	}
 8003112:	bf00      	nop
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000750 	.word	0x20000750

08003120 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10c      	bne.n	8003150 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	b672      	cpsid	i
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	b662      	cpsie	i
 800314a:	60fb      	str	r3, [r7, #12]
}
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	3318      	adds	r3, #24
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fe0b 	bl	8001d70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <xTaskRemoveFromEventList+0xb4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11d      	bne.n	800319e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	3304      	adds	r3, #4
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fe02 	bl	8001d70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <xTaskRemoveFromEventList+0xb8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d903      	bls.n	8003180 <xTaskRemoveFromEventList+0x60>
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	4a16      	ldr	r2, [pc, #88]	; (80031d8 <xTaskRemoveFromEventList+0xb8>)
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4a13      	ldr	r2, [pc, #76]	; (80031dc <xTaskRemoveFromEventList+0xbc>)
 800318e:	441a      	add	r2, r3
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	3304      	adds	r3, #4
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f7fe fd8d 	bl	8001cb6 <vListInsertEnd>
 800319c:	e005      	b.n	80031aa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3318      	adds	r3, #24
 80031a2:	4619      	mov	r1, r3
 80031a4:	480e      	ldr	r0, [pc, #56]	; (80031e0 <xTaskRemoveFromEventList+0xc0>)
 80031a6:	f7fe fd86 	bl	8001cb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <xTaskRemoveFromEventList+0xc4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d905      	bls.n	80031c4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80031b8:	2301      	movs	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <xTaskRemoveFromEventList+0xc8>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e001      	b.n	80031c8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80031c8:	697b      	ldr	r3, [r7, #20]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000c4c 	.word	0x20000c4c
 80031d8:	20000c2c 	.word	0x20000c2c
 80031dc:	20000754 	.word	0x20000754
 80031e0:	20000be4 	.word	0x20000be4
 80031e4:	20000750 	.word	0x20000750
 80031e8:	20000c38 	.word	0x20000c38

080031ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <vTaskInternalSetTimeOutState+0x24>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <vTaskInternalSetTimeOutState+0x28>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	605a      	str	r2, [r3, #4]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	20000c3c 	.word	0x20000c3c
 8003214:	20000c28 	.word	0x20000c28

08003218 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10c      	bne.n	8003242 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	b672      	cpsid	i
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	b662      	cpsie	i
 800323c:	613b      	str	r3, [r7, #16]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10c      	bne.n	8003262 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	b672      	cpsid	i
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	b662      	cpsie	i
 800325c:	60fb      	str	r3, [r7, #12]
}
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8003262:	f000 fe73 	bl	8003f4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <xTaskCheckForTimeOut+0xc4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d102      	bne.n	8003286 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
 8003284:	e023      	b.n	80032ce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <xTaskCheckForTimeOut+0xc8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d007      	beq.n	80032a2 <xTaskCheckForTimeOut+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	429a      	cmp	r2, r3
 800329a:	d302      	bcc.n	80032a2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800329c:	2301      	movs	r3, #1
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e015      	b.n	80032ce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d20b      	bcs.n	80032c4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	1ad2      	subs	r2, r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff97 	bl	80031ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	e004      	b.n	80032ce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80032ce:	f000 fe71 	bl	8003fb4 <vPortExitCritical>

	return xReturn;
 80032d2:	69fb      	ldr	r3, [r7, #28]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000c28 	.word	0x20000c28
 80032e0:	20000c3c 	.word	0x20000c3c

080032e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <vTaskMissedYield+0x14>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	20000c38 	.word	0x20000c38

080032fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003304:	f000 f852 	bl	80033ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <prvIdleTask+0x28>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d9f9      	bls.n	8003304 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <prvIdleTask+0x2c>)
 8003312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003320:	e7f0      	b.n	8003304 <prvIdleTask+0x8>
 8003322:	bf00      	nop
 8003324:	20000754 	.word	0x20000754
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	e00c      	b.n	8003352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <prvInitialiseTaskLists+0x60>)
 8003344:	4413      	add	r3, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fc88 	bl	8001c5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3301      	adds	r3, #1
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b37      	cmp	r3, #55	; 0x37
 8003356:	d9ef      	bls.n	8003338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003358:	480d      	ldr	r0, [pc, #52]	; (8003390 <prvInitialiseTaskLists+0x64>)
 800335a:	f7fe fc7f 	bl	8001c5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800335e:	480d      	ldr	r0, [pc, #52]	; (8003394 <prvInitialiseTaskLists+0x68>)
 8003360:	f7fe fc7c 	bl	8001c5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003364:	480c      	ldr	r0, [pc, #48]	; (8003398 <prvInitialiseTaskLists+0x6c>)
 8003366:	f7fe fc79 	bl	8001c5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800336a:	480c      	ldr	r0, [pc, #48]	; (800339c <prvInitialiseTaskLists+0x70>)
 800336c:	f7fe fc76 	bl	8001c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003370:	480b      	ldr	r0, [pc, #44]	; (80033a0 <prvInitialiseTaskLists+0x74>)
 8003372:	f7fe fc73 	bl	8001c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <prvInitialiseTaskLists+0x78>)
 8003378:	4a05      	ldr	r2, [pc, #20]	; (8003390 <prvInitialiseTaskLists+0x64>)
 800337a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <prvInitialiseTaskLists+0x7c>)
 800337e:	4a05      	ldr	r2, [pc, #20]	; (8003394 <prvInitialiseTaskLists+0x68>)
 8003380:	601a      	str	r2, [r3, #0]
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000754 	.word	0x20000754
 8003390:	20000bb4 	.word	0x20000bb4
 8003394:	20000bc8 	.word	0x20000bc8
 8003398:	20000be4 	.word	0x20000be4
 800339c:	20000bf8 	.word	0x20000bf8
 80033a0:	20000c10 	.word	0x20000c10
 80033a4:	20000bdc 	.word	0x20000bdc
 80033a8:	20000be0 	.word	0x20000be0

080033ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033b2:	e019      	b.n	80033e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80033b4:	f000 fdca 	bl	8003f4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <prvCheckTasksWaitingTermination+0x50>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe fcd3 	bl	8001d70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <prvCheckTasksWaitingTermination+0x54>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <prvCheckTasksWaitingTermination+0x54>)
 80033d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <prvCheckTasksWaitingTermination+0x58>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3b01      	subs	r3, #1
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <prvCheckTasksWaitingTermination+0x58>)
 80033dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80033de:	f000 fde9 	bl	8003fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f810 	bl	8003408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <prvCheckTasksWaitingTermination+0x58>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e1      	bne.n	80033b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000bf8 	.word	0x20000bf8
 8003400:	20000c24 	.word	0x20000c24
 8003404:	20000c0c 	.word	0x20000c0c

08003408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003416:	2b00      	cmp	r3, #0
 8003418:	d108      	bne.n	800342c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4618      	mov	r0, r3
 8003420:	f000 ff8a 	bl	8004338 <vPortFree>
				vPortFree( pxTCB );
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 ff87 	bl	8004338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800342a:	e01a      	b.n	8003462 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003432:	2b01      	cmp	r3, #1
 8003434:	d103      	bne.n	800343e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 ff7e 	bl	8004338 <vPortFree>
	}
 800343c:	e011      	b.n	8003462 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003444:	2b02      	cmp	r3, #2
 8003446:	d00c      	beq.n	8003462 <prvDeleteTCB+0x5a>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	b672      	cpsid	i
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	b662      	cpsie	i
 800345c:	60fb      	str	r3, [r7, #12]
}
 800345e:	bf00      	nop
 8003460:	e7fe      	b.n	8003460 <prvDeleteTCB+0x58>
	}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <prvResetNextTaskUnblockTime+0x38>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <prvResetNextTaskUnblockTime+0x3c>)
 800347e:	f04f 32ff 	mov.w	r2, #4294967295
 8003482:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003484:	e008      	b.n	8003498 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003486:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <prvResetNextTaskUnblockTime+0x38>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <prvResetNextTaskUnblockTime+0x3c>)
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	20000bdc 	.word	0x20000bdc
 80034a8:	20000c44 	.word	0x20000c44

080034ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <xTaskGetSchedulerState+0x34>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034ba:	2301      	movs	r3, #1
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	e008      	b.n	80034d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <xTaskGetSchedulerState+0x38>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034c8:	2302      	movs	r3, #2
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	e001      	b.n	80034d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034d2:	687b      	ldr	r3, [r7, #4]
	}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	20000c30 	.word	0x20000c30
 80034e4:	20000c4c 	.word	0x20000c4c

080034e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d05a      	beq.n	80035b4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80034fe:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <xTaskPriorityDisinherit+0xd8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d00c      	beq.n	8003522 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	b672      	cpsid	i
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	b662      	cpsie	i
 800351c:	60fb      	str	r3, [r7, #12]
}
 800351e:	bf00      	nop
 8003520:	e7fe      	b.n	8003520 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352e:	b672      	cpsid	i
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	b662      	cpsie	i
 800353e:	60bb      	str	r3, [r7, #8]
}
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003548:	1e5a      	subs	r2, r3, #1
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003556:	429a      	cmp	r2, r3
 8003558:	d02c      	beq.n	80035b4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355e:	2b00      	cmp	r3, #0
 8003560:	d128      	bne.n	80035b4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	3304      	adds	r3, #4
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fc02 	bl	8001d70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <xTaskPriorityDisinherit+0xdc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d903      	bls.n	8003594 <xTaskPriorityDisinherit+0xac>
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <xTaskPriorityDisinherit+0xdc>)
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <xTaskPriorityDisinherit+0xe0>)
 80035a2:	441a      	add	r2, r3
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4619      	mov	r1, r3
 80035aa:	4610      	mov	r0, r2
 80035ac:	f7fe fb83 	bl	8001cb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80035b4:	697b      	ldr	r3, [r7, #20]
	}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000750 	.word	0x20000750
 80035c4:	20000c2c 	.word	0x20000c2c
 80035c8:	20000754 	.word	0x20000754

080035cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <prvAddCurrentTaskToDelayedList+0x90>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035dc:	4b20      	ldr	r3, [pc, #128]	; (8003660 <prvAddCurrentTaskToDelayedList+0x94>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3304      	adds	r3, #4
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fbc4 	bl	8001d70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d10a      	bne.n	8003606 <prvAddCurrentTaskToDelayedList+0x3a>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035f6:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <prvAddCurrentTaskToDelayedList+0x94>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4619      	mov	r1, r3
 80035fe:	4819      	ldr	r0, [pc, #100]	; (8003664 <prvAddCurrentTaskToDelayedList+0x98>)
 8003600:	f7fe fb59 	bl	8001cb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003604:	e026      	b.n	8003654 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4413      	add	r3, r2
 800360c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800360e:	4b14      	ldr	r3, [pc, #80]	; (8003660 <prvAddCurrentTaskToDelayedList+0x94>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	429a      	cmp	r2, r3
 800361c:	d209      	bcs.n	8003632 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <prvAddCurrentTaskToDelayedList+0x94>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3304      	adds	r3, #4
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f7fe fb67 	bl	8001cfe <vListInsert>
}
 8003630:	e010      	b.n	8003654 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <prvAddCurrentTaskToDelayedList+0x94>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f7fe fb5d 	bl	8001cfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	429a      	cmp	r2, r3
 800364c:	d202      	bcs.n	8003654 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800364e:	4a08      	ldr	r2, [pc, #32]	; (8003670 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	6013      	str	r3, [r2, #0]
}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20000c28 	.word	0x20000c28
 8003660:	20000750 	.word	0x20000750
 8003664:	20000c10 	.word	0x20000c10
 8003668:	20000be0 	.word	0x20000be0
 800366c:	20000bdc 	.word	0x20000bdc
 8003670:	20000c44 	.word	0x20000c44

08003674 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800367e:	f000 fb15 	bl	8003cac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <xTimerCreateTimerTask+0x84>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d021      	beq.n	80036ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003692:	1d3a      	adds	r2, r7, #4
 8003694:	f107 0108 	add.w	r1, r7, #8
 8003698:	f107 030c 	add.w	r3, r7, #12
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe fac3 	bl	8001c28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	9202      	str	r2, [sp, #8]
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	2302      	movs	r3, #2
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2300      	movs	r3, #0
 80036b2:	460a      	mov	r2, r1
 80036b4:	4911      	ldr	r1, [pc, #68]	; (80036fc <xTimerCreateTimerTask+0x88>)
 80036b6:	4812      	ldr	r0, [pc, #72]	; (8003700 <xTimerCreateTimerTask+0x8c>)
 80036b8:	f7ff f8f0 	bl	800289c <xTaskCreateStatic>
 80036bc:	4603      	mov	r3, r0
 80036be:	4a11      	ldr	r2, [pc, #68]	; (8003704 <xTimerCreateTimerTask+0x90>)
 80036c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <xTimerCreateTimerTask+0x90>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80036ca:	2301      	movs	r3, #1
 80036cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10c      	bne.n	80036ee <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	b672      	cpsid	i
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	b662      	cpsie	i
 80036e8:	613b      	str	r3, [r7, #16]
}
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <xTimerCreateTimerTask+0x78>
	return xReturn;
 80036ee:	697b      	ldr	r3, [r7, #20]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000c80 	.word	0x20000c80
 80036fc:	0800565c 	.word	0x0800565c
 8003700:	08003845 	.word	0x08003845
 8003704:	20000c84 	.word	0x20000c84

08003708 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10c      	bne.n	800373a <xTimerGenericCommand+0x32>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	b672      	cpsid	i
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	b662      	cpsie	i
 8003734:	623b      	str	r3, [r7, #32]
}
 8003736:	bf00      	nop
 8003738:	e7fe      	b.n	8003738 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800373a:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <xTimerGenericCommand+0x9c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d02a      	beq.n	8003798 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b05      	cmp	r3, #5
 8003752:	dc18      	bgt.n	8003786 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003754:	f7ff feaa 	bl	80034ac <xTaskGetSchedulerState>
 8003758:	4603      	mov	r3, r0
 800375a:	2b02      	cmp	r3, #2
 800375c:	d109      	bne.n	8003772 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <xTimerGenericCommand+0x9c>)
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	f107 0110 	add.w	r1, r7, #16
 8003766:	2300      	movs	r3, #0
 8003768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376a:	f7fe fc7d 	bl	8002068 <xQueueGenericSend>
 800376e:	6278      	str	r0, [r7, #36]	; 0x24
 8003770:	e012      	b.n	8003798 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <xTimerGenericCommand+0x9c>)
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	f107 0110 	add.w	r1, r7, #16
 800377a:	2300      	movs	r3, #0
 800377c:	2200      	movs	r2, #0
 800377e:	f7fe fc73 	bl	8002068 <xQueueGenericSend>
 8003782:	6278      	str	r0, [r7, #36]	; 0x24
 8003784:	e008      	b.n	8003798 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003786:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <xTimerGenericCommand+0x9c>)
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	f107 0110 	add.w	r1, r7, #16
 800378e:	2300      	movs	r3, #0
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	f7fe fd6f 	bl	8002274 <xQueueGenericSendFromISR>
 8003796:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800379a:	4618      	mov	r0, r3
 800379c:	3728      	adds	r7, #40	; 0x28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000c80 	.word	0x20000c80

080037a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b2:	4b23      	ldr	r3, [pc, #140]	; (8003840 <prvProcessExpiredTimer+0x98>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	3304      	adds	r3, #4
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fad5 	bl	8001d70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d024      	beq.n	800381e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	18d1      	adds	r1, r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	6978      	ldr	r0, [r7, #20]
 80037e2:	f000 f8d3 	bl	800398c <prvInsertTimerInActiveList>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d021      	beq.n	8003830 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037ec:	2300      	movs	r3, #0
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	2100      	movs	r1, #0
 80037f6:	6978      	ldr	r0, [r7, #20]
 80037f8:	f7ff ff86 	bl	8003708 <xTimerGenericCommand>
 80037fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d115      	bne.n	8003830 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	b672      	cpsid	i
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	b662      	cpsie	i
 8003818:	60fb      	str	r3, [r7, #12]
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	b2da      	uxtb	r2, r3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	6978      	ldr	r0, [r7, #20]
 8003836:	4798      	blx	r3
}
 8003838:	bf00      	nop
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000c78 	.word	0x20000c78

08003844 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800384c:	f107 0308 	add.w	r3, r7, #8
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f857 	bl	8003904 <prvGetNextExpireTime>
 8003856:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4619      	mov	r1, r3
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f803 	bl	8003868 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003862:	f000 f8d5 	bl	8003a10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003866:	e7f1      	b.n	800384c <prvTimerTask+0x8>

08003868 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003872:	f7ff fa27 	bl	8002cc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003876:	f107 0308 	add.w	r3, r7, #8
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f866 	bl	800394c <prvSampleTimeNow>
 8003880:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d130      	bne.n	80038ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <prvProcessTimerOrBlockTask+0x3c>
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	429a      	cmp	r2, r3
 8003894:	d806      	bhi.n	80038a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003896:	f7ff fa23 	bl	8002ce0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800389a:	68f9      	ldr	r1, [r7, #12]
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff83 	bl	80037a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80038a2:	e024      	b.n	80038ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <prvProcessTimerOrBlockTask+0x90>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <prvProcessTimerOrBlockTask+0x50>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <prvProcessTimerOrBlockTask+0x52>
 80038b8:	2300      	movs	r3, #0
 80038ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <prvProcessTimerOrBlockTask+0x94>)
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	4619      	mov	r1, r3
 80038ca:	f7fe ffb3 	bl	8002834 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80038ce:	f7ff fa07 	bl	8002ce0 <xTaskResumeAll>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80038d8:	4b09      	ldr	r3, [pc, #36]	; (8003900 <prvProcessTimerOrBlockTask+0x98>)
 80038da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	f3bf 8f6f 	isb	sy
}
 80038e8:	e001      	b.n	80038ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80038ea:	f7ff f9f9 	bl	8002ce0 <xTaskResumeAll>
}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000c7c 	.word	0x20000c7c
 80038fc:	20000c80 	.word	0x20000c80
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <prvGetNextExpireTime+0x44>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <prvGetNextExpireTime+0x16>
 8003916:	2201      	movs	r2, #1
 8003918:	e000      	b.n	800391c <prvGetNextExpireTime+0x18>
 800391a:	2200      	movs	r2, #0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <prvGetNextExpireTime+0x44>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e001      	b.n	8003938 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003938:	68fb      	ldr	r3, [r7, #12]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000c78 	.word	0x20000c78

0800394c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003954:	f7ff fa64 	bl	8002e20 <xTaskGetTickCount>
 8003958:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <prvSampleTimeNow+0x3c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	429a      	cmp	r2, r3
 8003962:	d205      	bcs.n	8003970 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003964:	f000 f93c 	bl	8003be0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e002      	b.n	8003976 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003976:	4a04      	ldr	r2, [pc, #16]	; (8003988 <prvSampleTimeNow+0x3c>)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800397c:	68fb      	ldr	r3, [r7, #12]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000c88 	.word	0x20000c88

0800398c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d812      	bhi.n	80039d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	1ad2      	subs	r2, r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d302      	bcc.n	80039c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	e01b      	b.n	80039fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80039c6:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <prvInsertTimerInActiveList+0x7c>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f7fe f994 	bl	8001cfe <vListInsert>
 80039d6:	e012      	b.n	80039fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d206      	bcs.n	80039ee <prvInsertTimerInActiveList+0x62>
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d302      	bcc.n	80039ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80039e8:	2301      	movs	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	e007      	b.n	80039fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <prvInsertTimerInActiveList+0x80>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3304      	adds	r3, #4
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f7fe f980 	bl	8001cfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80039fe:	697b      	ldr	r3, [r7, #20]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000c7c 	.word	0x20000c7c
 8003a0c:	20000c78 	.word	0x20000c78

08003a10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08e      	sub	sp, #56	; 0x38
 8003a14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a16:	e0d0      	b.n	8003bba <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da1a      	bge.n	8003a54 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	3304      	adds	r3, #4
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10c      	bne.n	8003a44 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	b672      	cpsid	i
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	b662      	cpsie	i
 8003a3e:	61fb      	str	r3, [r7, #28]
}
 8003a40:	bf00      	nop
 8003a42:	e7fe      	b.n	8003a42 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4a:	6850      	ldr	r0, [r2, #4]
 8003a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4e:	6892      	ldr	r2, [r2, #8]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f2c0 80ae 	blt.w	8003bb8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe f97f 	bl	8001d70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a72:	463b      	mov	r3, r7
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff69 	bl	800394c <prvSampleTimeNow>
 8003a7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b09      	cmp	r3, #9
 8003a80:	f200 809b 	bhi.w	8003bba <prvProcessReceivedCommands+0x1aa>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <prvProcessReceivedCommands+0x7c>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003ab5 	.word	0x08003ab5
 8003a94:	08003ab5 	.word	0x08003ab5
 8003a98:	08003b2d 	.word	0x08003b2d
 8003a9c:	08003b41 	.word	0x08003b41
 8003aa0:	08003b8f 	.word	0x08003b8f
 8003aa4:	08003ab5 	.word	0x08003ab5
 8003aa8:	08003ab5 	.word	0x08003ab5
 8003aac:	08003b2d 	.word	0x08003b2d
 8003ab0:	08003b41 	.word	0x08003b41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	18d1      	adds	r1, r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ad4:	f7ff ff5a 	bl	800398c <prvInsertTimerInActiveList>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d06d      	beq.n	8003bba <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d062      	beq.n	8003bba <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	441a      	add	r2, r3
 8003afc:	2300      	movs	r3, #0
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2300      	movs	r3, #0
 8003b02:	2100      	movs	r1, #0
 8003b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b06:	f7ff fdff 	bl	8003708 <xTimerGenericCommand>
 8003b0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d153      	bne.n	8003bba <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	b672      	cpsid	i
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	b662      	cpsie	i
 8003b26:	61bb      	str	r3, [r7, #24]
}
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003b3e:	e03c      	b.n	8003bba <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10c      	bne.n	8003b7a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	b672      	cpsid	i
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	b662      	cpsie	i
 8003b74:	617b      	str	r3, [r7, #20]
}
 8003b76:	bf00      	nop
 8003b78:	e7fe      	b.n	8003b78 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	18d1      	adds	r1, r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b88:	f7ff ff00 	bl	800398c <prvInsertTimerInActiveList>
					break;
 8003b8c:	e015      	b.n	8003bba <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8003b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9e:	f000 fbcb 	bl	8004338 <vPortFree>
 8003ba2:	e00a      	b.n	8003bba <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003bb6:	e000      	b.n	8003bba <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003bb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <prvProcessReceivedCommands+0x1cc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	1d39      	adds	r1, r7, #4
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fbf6 	bl	80023b4 <xQueueReceive>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f47f af24 	bne.w	8003a18 <prvProcessReceivedCommands+0x8>
	}
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	3730      	adds	r7, #48	; 0x30
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000c80 	.word	0x20000c80

08003be0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003be6:	e04a      	b.n	8003c7e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003be8:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <prvSwitchTimerLists+0xc4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf2:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <prvSwitchTimerLists+0xc4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe f8b5 	bl	8001d70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d030      	beq.n	8003c7e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d90e      	bls.n	8003c4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <prvSwitchTimerLists+0xc4>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f7fe f85a 	bl	8001cfe <vListInsert>
 8003c4a:	e018      	b.n	8003c7e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2300      	movs	r3, #0
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	2100      	movs	r1, #0
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff fd56 	bl	8003708 <xTimerGenericCommand>
 8003c5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10c      	bne.n	8003c7e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	b672      	cpsid	i
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	b662      	cpsie	i
 8003c78:	603b      	str	r3, [r7, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	e7fe      	b.n	8003c7c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <prvSwitchTimerLists+0xc4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1af      	bne.n	8003be8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <prvSwitchTimerLists+0xc4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <prvSwitchTimerLists+0xc8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <prvSwitchTimerLists+0xc4>)
 8003c94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003c96:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <prvSwitchTimerLists+0xc8>)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	6013      	str	r3, [r2, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000c78 	.word	0x20000c78
 8003ca8:	20000c7c 	.word	0x20000c7c

08003cac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003cb2:	f000 f94b 	bl	8003f4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003cb6:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <prvCheckForValidListAndQueue+0x60>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d120      	bne.n	8003d00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003cbe:	4814      	ldr	r0, [pc, #80]	; (8003d10 <prvCheckForValidListAndQueue+0x64>)
 8003cc0:	f7fd ffcc 	bl	8001c5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003cc4:	4813      	ldr	r0, [pc, #76]	; (8003d14 <prvCheckForValidListAndQueue+0x68>)
 8003cc6:	f7fd ffc9 	bl	8001c5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003cca:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <prvCheckForValidListAndQueue+0x6c>)
 8003ccc:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <prvCheckForValidListAndQueue+0x64>)
 8003cce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <prvCheckForValidListAndQueue+0x70>)
 8003cd2:	4a10      	ldr	r2, [pc, #64]	; (8003d14 <prvCheckForValidListAndQueue+0x68>)
 8003cd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <prvCheckForValidListAndQueue+0x74>)
 8003cdc:	4a11      	ldr	r2, [pc, #68]	; (8003d24 <prvCheckForValidListAndQueue+0x78>)
 8003cde:	2110      	movs	r1, #16
 8003ce0:	200a      	movs	r0, #10
 8003ce2:	f7fe f8d9 	bl	8001e98 <xQueueGenericCreateStatic>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <prvCheckForValidListAndQueue+0x60>)
 8003cea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003cec:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <prvCheckForValidListAndQueue+0x60>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <prvCheckForValidListAndQueue+0x60>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	490b      	ldr	r1, [pc, #44]	; (8003d28 <prvCheckForValidListAndQueue+0x7c>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fd70 	bl	80027e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d00:	f000 f958 	bl	8003fb4 <vPortExitCritical>
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000c80 	.word	0x20000c80
 8003d10:	20000c50 	.word	0x20000c50
 8003d14:	20000c64 	.word	0x20000c64
 8003d18:	20000c78 	.word	0x20000c78
 8003d1c:	20000c7c 	.word	0x20000c7c
 8003d20:	20000d2c 	.word	0x20000d2c
 8003d24:	20000c8c 	.word	0x20000c8c
 8003d28:	08005664 	.word	0x08005664

08003d2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3b04      	subs	r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3b04      	subs	r3, #4
 8003d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f023 0201 	bic.w	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3b04      	subs	r3, #4
 8003d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d5c:	4a0c      	ldr	r2, [pc, #48]	; (8003d90 <pxPortInitialiseStack+0x64>)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3b14      	subs	r3, #20
 8003d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3b04      	subs	r3, #4
 8003d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f06f 0202 	mvn.w	r2, #2
 8003d7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3b20      	subs	r3, #32
 8003d80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	08003d95 	.word	0x08003d95

08003d94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <prvTaskExitError+0x5c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d00c      	beq.n	8003dc2 <prvTaskExitError+0x2e>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	b672      	cpsid	i
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	b662      	cpsie	i
 8003dbc:	60fb      	str	r3, [r7, #12]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <prvTaskExitError+0x2c>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	b672      	cpsid	i
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	b662      	cpsie	i
 8003dd6:	60bb      	str	r3, [r7, #8]
}
 8003dd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003dda:	bf00      	nop
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0fc      	beq.n	8003ddc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	2000000c 	.word	0x2000000c
	...

08003e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <pxCurrentTCBConst2>)
 8003e02:	6819      	ldr	r1, [r3, #0]
 8003e04:	6808      	ldr	r0, [r1, #0]
 8003e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	f380 8809 	msr	PSP, r0
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f380 8811 	msr	BASEPRI, r0
 8003e1a:	4770      	bx	lr
 8003e1c:	f3af 8000 	nop.w

08003e20 <pxCurrentTCBConst2>:
 8003e20:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop

08003e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e28:	4808      	ldr	r0, [pc, #32]	; (8003e4c <prvPortStartFirstTask+0x24>)
 8003e2a:	6800      	ldr	r0, [r0, #0]
 8003e2c:	6800      	ldr	r0, [r0, #0]
 8003e2e:	f380 8808 	msr	MSP, r0
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f380 8814 	msr	CONTROL, r0
 8003e3a:	b662      	cpsie	i
 8003e3c:	b661      	cpsie	f
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	df00      	svc	0
 8003e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e4a:	bf00      	nop
 8003e4c:	e000ed08 	.word	0xe000ed08

08003e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e56:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <xPortStartScheduler+0xe4>)
 8003e58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	22ff      	movs	r2, #255	; 0xff
 8003e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	; (8003f38 <xPortStartScheduler+0xe8>)
 8003e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e7e:	4b2f      	ldr	r3, [pc, #188]	; (8003f3c <xPortStartScheduler+0xec>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e84:	e009      	b.n	8003e9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003e86:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <xPortStartScheduler+0xec>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	4a2b      	ldr	r2, [pc, #172]	; (8003f3c <xPortStartScheduler+0xec>)
 8003e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d0ef      	beq.n	8003e86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ea6:	4b25      	ldr	r3, [pc, #148]	; (8003f3c <xPortStartScheduler+0xec>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d00c      	beq.n	8003ecc <xPortStartScheduler+0x7c>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	b672      	cpsid	i
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	b662      	cpsie	i
 8003ec6:	60bb      	str	r3, [r7, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <xPortStartScheduler+0xec>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <xPortStartScheduler+0xec>)
 8003ed4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ed6:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <xPortStartScheduler+0xec>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ede:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <xPortStartScheduler+0xec>)
 8003ee0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <xPortStartScheduler+0xf0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <xPortStartScheduler+0xf0>)
 8003ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <xPortStartScheduler+0xf0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a11      	ldr	r2, [pc, #68]	; (8003f40 <xPortStartScheduler+0xf0>)
 8003efc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f02:	f000 f8dd 	bl	80040c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <xPortStartScheduler+0xf4>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f0c:	f000 f8fc 	bl	8004108 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f10:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <xPortStartScheduler+0xf8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0c      	ldr	r2, [pc, #48]	; (8003f48 <xPortStartScheduler+0xf8>)
 8003f16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f1c:	f7ff ff84 	bl	8003e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f20:	f7ff f84a 	bl	8002fb8 <vTaskSwitchContext>
	prvTaskExitError();
 8003f24:	f7ff ff36 	bl	8003d94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	e000e400 	.word	0xe000e400
 8003f38:	20000d7c 	.word	0x20000d7c
 8003f3c:	20000d80 	.word	0x20000d80
 8003f40:	e000ed20 	.word	0xe000ed20
 8003f44:	2000000c 	.word	0x2000000c
 8003f48:	e000ef34 	.word	0xe000ef34

08003f4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	b672      	cpsid	i
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	b662      	cpsie	i
 8003f66:	607b      	str	r3, [r7, #4]
}
 8003f68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f6a:	4b10      	ldr	r3, [pc, #64]	; (8003fac <vPortEnterCritical+0x60>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	4a0e      	ldr	r2, [pc, #56]	; (8003fac <vPortEnterCritical+0x60>)
 8003f72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <vPortEnterCritical+0x60>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d111      	bne.n	8003fa0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <vPortEnterCritical+0x64>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00c      	beq.n	8003fa0 <vPortEnterCritical+0x54>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	b672      	cpsid	i
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	b662      	cpsie	i
 8003f9a:	603b      	str	r3, [r7, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <vPortEnterCritical+0x52>
	}
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fba:	4b13      	ldr	r3, [pc, #76]	; (8004008 <vPortExitCritical+0x54>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10c      	bne.n	8003fdc <vPortExitCritical+0x28>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	b672      	cpsid	i
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	b662      	cpsie	i
 8003fd6:	607b      	str	r3, [r7, #4]
}
 8003fd8:	bf00      	nop
 8003fda:	e7fe      	b.n	8003fda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <vPortExitCritical+0x54>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	4a09      	ldr	r2, [pc, #36]	; (8004008 <vPortExitCritical+0x54>)
 8003fe4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <vPortExitCritical+0x54>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d105      	bne.n	8003ffa <vPortExitCritical+0x46>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f383 8811 	msr	BASEPRI, r3
}
 8003ff8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	2000000c 	.word	0x2000000c
 800400c:	00000000 	.word	0x00000000

08004010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004010:	f3ef 8009 	mrs	r0, PSP
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4b15      	ldr	r3, [pc, #84]	; (8004070 <pxCurrentTCBConst>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	f01e 0f10 	tst.w	lr, #16
 8004020:	bf08      	it	eq
 8004022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402a:	6010      	str	r0, [r2, #0]
 800402c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004034:	b672      	cpsid	i
 8004036:	f380 8811 	msr	BASEPRI, r0
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	b662      	cpsie	i
 8004044:	f7fe ffb8 	bl	8002fb8 <vTaskSwitchContext>
 8004048:	f04f 0000 	mov.w	r0, #0
 800404c:	f380 8811 	msr	BASEPRI, r0
 8004050:	bc09      	pop	{r0, r3}
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	f01e 0f10 	tst.w	lr, #16
 800405e:	bf08      	it	eq
 8004060:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004064:	f380 8809 	msr	PSP, r0
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop

08004070 <pxCurrentTCBConst>:
 8004070:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	b672      	cpsid	i
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	b662      	cpsie	i
 8004092:	607b      	str	r3, [r7, #4]
}
 8004094:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004096:	f7fe fed3 	bl	8002e40 <xTaskIncrementTick>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <xPortSysTickHandler+0x44>)
 80040a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	f383 8811 	msr	BASEPRI, r3
}
 80040b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040b4:	bf00      	nop
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <vPortSetupTimerInterrupt+0x34>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <vPortSetupTimerInterrupt+0x38>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <vPortSetupTimerInterrupt+0x3c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <vPortSetupTimerInterrupt+0x40>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	4a09      	ldr	r2, [pc, #36]	; (8004104 <vPortSetupTimerInterrupt+0x44>)
 80040de:	3b01      	subs	r3, #1
 80040e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040e2:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <vPortSetupTimerInterrupt+0x34>)
 80040e4:	2207      	movs	r2, #7
 80040e6:	601a      	str	r2, [r3, #0]
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	e000e010 	.word	0xe000e010
 80040f8:	e000e018 	.word	0xe000e018
 80040fc:	20000000 	.word	0x20000000
 8004100:	10624dd3 	.word	0x10624dd3
 8004104:	e000e014 	.word	0xe000e014

08004108 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004108:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004118 <vPortEnableVFP+0x10>
 800410c:	6801      	ldr	r1, [r0, #0]
 800410e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004112:	6001      	str	r1, [r0, #0]
 8004114:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004116:	bf00      	nop
 8004118:	e000ed88 	.word	0xe000ed88

0800411c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004122:	f3ef 8305 	mrs	r3, IPSR
 8004126:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b0f      	cmp	r3, #15
 800412c:	d916      	bls.n	800415c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800412e:	4a19      	ldr	r2, [pc, #100]	; (8004194 <vPortValidateInterruptPriority+0x78>)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004138:	4b17      	ldr	r3, [pc, #92]	; (8004198 <vPortValidateInterruptPriority+0x7c>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	7afa      	ldrb	r2, [r7, #11]
 800413e:	429a      	cmp	r2, r3
 8004140:	d20c      	bcs.n	800415c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	b672      	cpsid	i
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	b662      	cpsie	i
 8004156:	607b      	str	r3, [r7, #4]
}
 8004158:	bf00      	nop
 800415a:	e7fe      	b.n	800415a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800415c:	4b0f      	ldr	r3, [pc, #60]	; (800419c <vPortValidateInterruptPriority+0x80>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <vPortValidateInterruptPriority+0x84>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d90c      	bls.n	8004186 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	b672      	cpsid	i
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	b662      	cpsie	i
 8004180:	603b      	str	r3, [r7, #0]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <vPortValidateInterruptPriority+0x68>
	}
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	e000e3f0 	.word	0xe000e3f0
 8004198:	20000d7c 	.word	0x20000d7c
 800419c:	e000ed0c 	.word	0xe000ed0c
 80041a0:	20000d80 	.word	0x20000d80

080041a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041b0:	f7fe fd88 	bl	8002cc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041b4:	4b5b      	ldr	r3, [pc, #364]	; (8004324 <pvPortMalloc+0x180>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041bc:	f000 f91a 	bl	80043f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041c0:	4b59      	ldr	r3, [pc, #356]	; (8004328 <pvPortMalloc+0x184>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f040 8092 	bne.w	80042f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01f      	beq.n	8004214 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80041d4:	2208      	movs	r2, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f023 0307 	bic.w	r3, r3, #7
 80041ec:	3308      	adds	r3, #8
 80041ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00c      	beq.n	8004214 <pvPortMalloc+0x70>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	b672      	cpsid	i
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	b662      	cpsie	i
 800420e:	617b      	str	r3, [r7, #20]
}
 8004210:	bf00      	nop
 8004212:	e7fe      	b.n	8004212 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d06b      	beq.n	80042f2 <pvPortMalloc+0x14e>
 800421a:	4b44      	ldr	r3, [pc, #272]	; (800432c <pvPortMalloc+0x188>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d866      	bhi.n	80042f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004224:	4b42      	ldr	r3, [pc, #264]	; (8004330 <pvPortMalloc+0x18c>)
 8004226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004228:	4b41      	ldr	r3, [pc, #260]	; (8004330 <pvPortMalloc+0x18c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800422e:	e004      	b.n	800423a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d903      	bls.n	800424c <pvPortMalloc+0xa8>
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f1      	bne.n	8004230 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800424c:	4b35      	ldr	r3, [pc, #212]	; (8004324 <pvPortMalloc+0x180>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004252:	429a      	cmp	r2, r3
 8004254:	d04d      	beq.n	80042f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2208      	movs	r2, #8
 800425c:	4413      	add	r3, r2
 800425e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1ad2      	subs	r2, r2, r3
 8004270:	2308      	movs	r3, #8
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	429a      	cmp	r2, r3
 8004276:	d921      	bls.n	80042bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <pvPortMalloc+0x100>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	b672      	cpsid	i
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	b662      	cpsie	i
 800429e:	613b      	str	r3, [r7, #16]
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	1ad2      	subs	r2, r2, r3
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042b6:	69b8      	ldr	r0, [r7, #24]
 80042b8:	f000 f8fe 	bl	80044b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042bc:	4b1b      	ldr	r3, [pc, #108]	; (800432c <pvPortMalloc+0x188>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	4a19      	ldr	r2, [pc, #100]	; (800432c <pvPortMalloc+0x188>)
 80042c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042ca:	4b18      	ldr	r3, [pc, #96]	; (800432c <pvPortMalloc+0x188>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b19      	ldr	r3, [pc, #100]	; (8004334 <pvPortMalloc+0x190>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d203      	bcs.n	80042de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <pvPortMalloc+0x188>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a16      	ldr	r2, [pc, #88]	; (8004334 <pvPortMalloc+0x190>)
 80042dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <pvPortMalloc+0x184>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042f2:	f7fe fcf5 	bl	8002ce0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00c      	beq.n	800431a <pvPortMalloc+0x176>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	b672      	cpsid	i
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	b662      	cpsie	i
 8004314:	60fb      	str	r3, [r7, #12]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <pvPortMalloc+0x174>
	return pvReturn;
 800431a:	69fb      	ldr	r3, [r7, #28]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3728      	adds	r7, #40	; 0x28
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	2000498c 	.word	0x2000498c
 8004328:	20004998 	.word	0x20004998
 800432c:	20004990 	.word	0x20004990
 8004330:	20004984 	.word	0x20004984
 8004334:	20004994 	.word	0x20004994

08004338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d04c      	beq.n	80043e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800434a:	2308      	movs	r3, #8
 800434c:	425b      	negs	r3, r3
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4413      	add	r3, r2
 8004352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	4b23      	ldr	r3, [pc, #140]	; (80043ec <vPortFree+0xb4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10c      	bne.n	8004380 <vPortFree+0x48>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	b672      	cpsid	i
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	b662      	cpsie	i
 800437a:	60fb      	str	r3, [r7, #12]
}
 800437c:	bf00      	nop
 800437e:	e7fe      	b.n	800437e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00c      	beq.n	80043a2 <vPortFree+0x6a>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	b672      	cpsid	i
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	b662      	cpsie	i
 800439c:	60bb      	str	r3, [r7, #8]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	4b11      	ldr	r3, [pc, #68]	; (80043ec <vPortFree+0xb4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d019      	beq.n	80043e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d115      	bne.n	80043e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <vPortFree+0xb4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	401a      	ands	r2, r3
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043c8:	f7fe fc7c 	bl	8002cc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <vPortFree+0xb8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4413      	add	r3, r2
 80043d6:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <vPortFree+0xb8>)
 80043d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043da:	6938      	ldr	r0, [r7, #16]
 80043dc:	f000 f86c 	bl	80044b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80043e0:	f7fe fc7e 	bl	8002ce0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043e4:	bf00      	nop
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20004998 	.word	0x20004998
 80043f0:	20004990 	.word	0x20004990

080043f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80043fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004400:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <prvHeapInit+0xac>)
 8004402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00c      	beq.n	8004428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3307      	adds	r3, #7
 8004412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0307 	bic.w	r3, r3, #7
 800441a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <prvHeapInit+0xac>)
 8004424:	4413      	add	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800442c:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <prvHeapInit+0xb0>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004432:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <prvHeapInit+0xb0>)
 8004434:	2200      	movs	r2, #0
 8004436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	4413      	add	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004440:	2208      	movs	r2, #8
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0307 	bic.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <prvHeapInit+0xb4>)
 8004454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <prvHeapInit+0xb4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <prvHeapInit+0xb4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <prvHeapInit+0xb4>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <prvHeapInit+0xb8>)
 8004482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <prvHeapInit+0xbc>)
 800448a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <prvHeapInit+0xc0>)
 800448e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004492:	601a      	str	r2, [r3, #0]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	20000d84 	.word	0x20000d84
 80044a4:	20004984 	.word	0x20004984
 80044a8:	2000498c 	.word	0x2000498c
 80044ac:	20004994 	.word	0x20004994
 80044b0:	20004990 	.word	0x20004990
 80044b4:	20004998 	.word	0x20004998

080044b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044c0:	4b28      	ldr	r3, [pc, #160]	; (8004564 <prvInsertBlockIntoFreeList+0xac>)
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e002      	b.n	80044cc <prvInsertBlockIntoFreeList+0x14>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d8f7      	bhi.n	80044c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d108      	bne.n	80044fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	441a      	add	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	441a      	add	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d118      	bne.n	8004540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <prvInsertBlockIntoFreeList+0xb0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d00d      	beq.n	8004536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	441a      	add	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e008      	b.n	8004548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <prvInsertBlockIntoFreeList+0xb0>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e003      	b.n	8004548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	d002      	beq.n	8004556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20004984 	.word	0x20004984
 8004568:	2000498c 	.word	0x2000498c

0800456c <__errno>:
 800456c:	4b01      	ldr	r3, [pc, #4]	; (8004574 <__errno+0x8>)
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000010 	.word	0x20000010

08004578 <__libc_init_array>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	4d0d      	ldr	r5, [pc, #52]	; (80045b0 <__libc_init_array+0x38>)
 800457c:	4c0d      	ldr	r4, [pc, #52]	; (80045b4 <__libc_init_array+0x3c>)
 800457e:	1b64      	subs	r4, r4, r5
 8004580:	10a4      	asrs	r4, r4, #2
 8004582:	2600      	movs	r6, #0
 8004584:	42a6      	cmp	r6, r4
 8004586:	d109      	bne.n	800459c <__libc_init_array+0x24>
 8004588:	4d0b      	ldr	r5, [pc, #44]	; (80045b8 <__libc_init_array+0x40>)
 800458a:	4c0c      	ldr	r4, [pc, #48]	; (80045bc <__libc_init_array+0x44>)
 800458c:	f000 fffa 	bl	8005584 <_init>
 8004590:	1b64      	subs	r4, r4, r5
 8004592:	10a4      	asrs	r4, r4, #2
 8004594:	2600      	movs	r6, #0
 8004596:	42a6      	cmp	r6, r4
 8004598:	d105      	bne.n	80045a6 <__libc_init_array+0x2e>
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a0:	4798      	blx	r3
 80045a2:	3601      	adds	r6, #1
 80045a4:	e7ee      	b.n	8004584 <__libc_init_array+0xc>
 80045a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045aa:	4798      	blx	r3
 80045ac:	3601      	adds	r6, #1
 80045ae:	e7f2      	b.n	8004596 <__libc_init_array+0x1e>
 80045b0:	0800578c 	.word	0x0800578c
 80045b4:	0800578c 	.word	0x0800578c
 80045b8:	0800578c 	.word	0x0800578c
 80045bc:	08005790 	.word	0x08005790

080045c0 <memcpy>:
 80045c0:	440a      	add	r2, r1
 80045c2:	4291      	cmp	r1, r2
 80045c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045c8:	d100      	bne.n	80045cc <memcpy+0xc>
 80045ca:	4770      	bx	lr
 80045cc:	b510      	push	{r4, lr}
 80045ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045d6:	4291      	cmp	r1, r2
 80045d8:	d1f9      	bne.n	80045ce <memcpy+0xe>
 80045da:	bd10      	pop	{r4, pc}

080045dc <memset>:
 80045dc:	4402      	add	r2, r0
 80045de:	4603      	mov	r3, r0
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d100      	bne.n	80045e6 <memset+0xa>
 80045e4:	4770      	bx	lr
 80045e6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ea:	e7f9      	b.n	80045e0 <memset+0x4>

080045ec <iprintf>:
 80045ec:	b40f      	push	{r0, r1, r2, r3}
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <iprintf+0x2c>)
 80045f0:	b513      	push	{r0, r1, r4, lr}
 80045f2:	681c      	ldr	r4, [r3, #0]
 80045f4:	b124      	cbz	r4, 8004600 <iprintf+0x14>
 80045f6:	69a3      	ldr	r3, [r4, #24]
 80045f8:	b913      	cbnz	r3, 8004600 <iprintf+0x14>
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 fa5e 	bl	8004abc <__sinit>
 8004600:	ab05      	add	r3, sp, #20
 8004602:	9a04      	ldr	r2, [sp, #16]
 8004604:	68a1      	ldr	r1, [r4, #8]
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	4620      	mov	r0, r4
 800460a:	f000 fc2f 	bl	8004e6c <_vfiprintf_r>
 800460e:	b002      	add	sp, #8
 8004610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004614:	b004      	add	sp, #16
 8004616:	4770      	bx	lr
 8004618:	20000010 	.word	0x20000010

0800461c <_puts_r>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	460e      	mov	r6, r1
 8004620:	4605      	mov	r5, r0
 8004622:	b118      	cbz	r0, 800462c <_puts_r+0x10>
 8004624:	6983      	ldr	r3, [r0, #24]
 8004626:	b90b      	cbnz	r3, 800462c <_puts_r+0x10>
 8004628:	f000 fa48 	bl	8004abc <__sinit>
 800462c:	69ab      	ldr	r3, [r5, #24]
 800462e:	68ac      	ldr	r4, [r5, #8]
 8004630:	b913      	cbnz	r3, 8004638 <_puts_r+0x1c>
 8004632:	4628      	mov	r0, r5
 8004634:	f000 fa42 	bl	8004abc <__sinit>
 8004638:	4b2c      	ldr	r3, [pc, #176]	; (80046ec <_puts_r+0xd0>)
 800463a:	429c      	cmp	r4, r3
 800463c:	d120      	bne.n	8004680 <_puts_r+0x64>
 800463e:	686c      	ldr	r4, [r5, #4]
 8004640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004642:	07db      	lsls	r3, r3, #31
 8004644:	d405      	bmi.n	8004652 <_puts_r+0x36>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	0598      	lsls	r0, r3, #22
 800464a:	d402      	bmi.n	8004652 <_puts_r+0x36>
 800464c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800464e:	f000 fad3 	bl	8004bf8 <__retarget_lock_acquire_recursive>
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	0719      	lsls	r1, r3, #28
 8004656:	d51d      	bpl.n	8004694 <_puts_r+0x78>
 8004658:	6923      	ldr	r3, [r4, #16]
 800465a:	b1db      	cbz	r3, 8004694 <_puts_r+0x78>
 800465c:	3e01      	subs	r6, #1
 800465e:	68a3      	ldr	r3, [r4, #8]
 8004660:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004664:	3b01      	subs	r3, #1
 8004666:	60a3      	str	r3, [r4, #8]
 8004668:	bb39      	cbnz	r1, 80046ba <_puts_r+0x9e>
 800466a:	2b00      	cmp	r3, #0
 800466c:	da38      	bge.n	80046e0 <_puts_r+0xc4>
 800466e:	4622      	mov	r2, r4
 8004670:	210a      	movs	r1, #10
 8004672:	4628      	mov	r0, r5
 8004674:	f000 f848 	bl	8004708 <__swbuf_r>
 8004678:	3001      	adds	r0, #1
 800467a:	d011      	beq.n	80046a0 <_puts_r+0x84>
 800467c:	250a      	movs	r5, #10
 800467e:	e011      	b.n	80046a4 <_puts_r+0x88>
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <_puts_r+0xd4>)
 8004682:	429c      	cmp	r4, r3
 8004684:	d101      	bne.n	800468a <_puts_r+0x6e>
 8004686:	68ac      	ldr	r4, [r5, #8]
 8004688:	e7da      	b.n	8004640 <_puts_r+0x24>
 800468a:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <_puts_r+0xd8>)
 800468c:	429c      	cmp	r4, r3
 800468e:	bf08      	it	eq
 8004690:	68ec      	ldreq	r4, [r5, #12]
 8004692:	e7d5      	b.n	8004640 <_puts_r+0x24>
 8004694:	4621      	mov	r1, r4
 8004696:	4628      	mov	r0, r5
 8004698:	f000 f888 	bl	80047ac <__swsetup_r>
 800469c:	2800      	cmp	r0, #0
 800469e:	d0dd      	beq.n	800465c <_puts_r+0x40>
 80046a0:	f04f 35ff 	mov.w	r5, #4294967295
 80046a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046a6:	07da      	lsls	r2, r3, #31
 80046a8:	d405      	bmi.n	80046b6 <_puts_r+0x9a>
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	059b      	lsls	r3, r3, #22
 80046ae:	d402      	bmi.n	80046b6 <_puts_r+0x9a>
 80046b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046b2:	f000 faa2 	bl	8004bfa <__retarget_lock_release_recursive>
 80046b6:	4628      	mov	r0, r5
 80046b8:	bd70      	pop	{r4, r5, r6, pc}
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	da04      	bge.n	80046c8 <_puts_r+0xac>
 80046be:	69a2      	ldr	r2, [r4, #24]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	dc06      	bgt.n	80046d2 <_puts_r+0xb6>
 80046c4:	290a      	cmp	r1, #10
 80046c6:	d004      	beq.n	80046d2 <_puts_r+0xb6>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	6022      	str	r2, [r4, #0]
 80046ce:	7019      	strb	r1, [r3, #0]
 80046d0:	e7c5      	b.n	800465e <_puts_r+0x42>
 80046d2:	4622      	mov	r2, r4
 80046d4:	4628      	mov	r0, r5
 80046d6:	f000 f817 	bl	8004708 <__swbuf_r>
 80046da:	3001      	adds	r0, #1
 80046dc:	d1bf      	bne.n	800465e <_puts_r+0x42>
 80046de:	e7df      	b.n	80046a0 <_puts_r+0x84>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	250a      	movs	r5, #10
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	6022      	str	r2, [r4, #0]
 80046e8:	701d      	strb	r5, [r3, #0]
 80046ea:	e7db      	b.n	80046a4 <_puts_r+0x88>
 80046ec:	08005710 	.word	0x08005710
 80046f0:	08005730 	.word	0x08005730
 80046f4:	080056f0 	.word	0x080056f0

080046f8 <puts>:
 80046f8:	4b02      	ldr	r3, [pc, #8]	; (8004704 <puts+0xc>)
 80046fa:	4601      	mov	r1, r0
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	f7ff bf8d 	b.w	800461c <_puts_r>
 8004702:	bf00      	nop
 8004704:	20000010 	.word	0x20000010

08004708 <__swbuf_r>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	460e      	mov	r6, r1
 800470c:	4614      	mov	r4, r2
 800470e:	4605      	mov	r5, r0
 8004710:	b118      	cbz	r0, 800471a <__swbuf_r+0x12>
 8004712:	6983      	ldr	r3, [r0, #24]
 8004714:	b90b      	cbnz	r3, 800471a <__swbuf_r+0x12>
 8004716:	f000 f9d1 	bl	8004abc <__sinit>
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <__swbuf_r+0x98>)
 800471c:	429c      	cmp	r4, r3
 800471e:	d12b      	bne.n	8004778 <__swbuf_r+0x70>
 8004720:	686c      	ldr	r4, [r5, #4]
 8004722:	69a3      	ldr	r3, [r4, #24]
 8004724:	60a3      	str	r3, [r4, #8]
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	071a      	lsls	r2, r3, #28
 800472a:	d52f      	bpl.n	800478c <__swbuf_r+0x84>
 800472c:	6923      	ldr	r3, [r4, #16]
 800472e:	b36b      	cbz	r3, 800478c <__swbuf_r+0x84>
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	6820      	ldr	r0, [r4, #0]
 8004734:	1ac0      	subs	r0, r0, r3
 8004736:	6963      	ldr	r3, [r4, #20]
 8004738:	b2f6      	uxtb	r6, r6
 800473a:	4283      	cmp	r3, r0
 800473c:	4637      	mov	r7, r6
 800473e:	dc04      	bgt.n	800474a <__swbuf_r+0x42>
 8004740:	4621      	mov	r1, r4
 8004742:	4628      	mov	r0, r5
 8004744:	f000 f926 	bl	8004994 <_fflush_r>
 8004748:	bb30      	cbnz	r0, 8004798 <__swbuf_r+0x90>
 800474a:	68a3      	ldr	r3, [r4, #8]
 800474c:	3b01      	subs	r3, #1
 800474e:	60a3      	str	r3, [r4, #8]
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	6022      	str	r2, [r4, #0]
 8004756:	701e      	strb	r6, [r3, #0]
 8004758:	6963      	ldr	r3, [r4, #20]
 800475a:	3001      	adds	r0, #1
 800475c:	4283      	cmp	r3, r0
 800475e:	d004      	beq.n	800476a <__swbuf_r+0x62>
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	07db      	lsls	r3, r3, #31
 8004764:	d506      	bpl.n	8004774 <__swbuf_r+0x6c>
 8004766:	2e0a      	cmp	r6, #10
 8004768:	d104      	bne.n	8004774 <__swbuf_r+0x6c>
 800476a:	4621      	mov	r1, r4
 800476c:	4628      	mov	r0, r5
 800476e:	f000 f911 	bl	8004994 <_fflush_r>
 8004772:	b988      	cbnz	r0, 8004798 <__swbuf_r+0x90>
 8004774:	4638      	mov	r0, r7
 8004776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <__swbuf_r+0x9c>)
 800477a:	429c      	cmp	r4, r3
 800477c:	d101      	bne.n	8004782 <__swbuf_r+0x7a>
 800477e:	68ac      	ldr	r4, [r5, #8]
 8004780:	e7cf      	b.n	8004722 <__swbuf_r+0x1a>
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <__swbuf_r+0xa0>)
 8004784:	429c      	cmp	r4, r3
 8004786:	bf08      	it	eq
 8004788:	68ec      	ldreq	r4, [r5, #12]
 800478a:	e7ca      	b.n	8004722 <__swbuf_r+0x1a>
 800478c:	4621      	mov	r1, r4
 800478e:	4628      	mov	r0, r5
 8004790:	f000 f80c 	bl	80047ac <__swsetup_r>
 8004794:	2800      	cmp	r0, #0
 8004796:	d0cb      	beq.n	8004730 <__swbuf_r+0x28>
 8004798:	f04f 37ff 	mov.w	r7, #4294967295
 800479c:	e7ea      	b.n	8004774 <__swbuf_r+0x6c>
 800479e:	bf00      	nop
 80047a0:	08005710 	.word	0x08005710
 80047a4:	08005730 	.word	0x08005730
 80047a8:	080056f0 	.word	0x080056f0

080047ac <__swsetup_r>:
 80047ac:	4b32      	ldr	r3, [pc, #200]	; (8004878 <__swsetup_r+0xcc>)
 80047ae:	b570      	push	{r4, r5, r6, lr}
 80047b0:	681d      	ldr	r5, [r3, #0]
 80047b2:	4606      	mov	r6, r0
 80047b4:	460c      	mov	r4, r1
 80047b6:	b125      	cbz	r5, 80047c2 <__swsetup_r+0x16>
 80047b8:	69ab      	ldr	r3, [r5, #24]
 80047ba:	b913      	cbnz	r3, 80047c2 <__swsetup_r+0x16>
 80047bc:	4628      	mov	r0, r5
 80047be:	f000 f97d 	bl	8004abc <__sinit>
 80047c2:	4b2e      	ldr	r3, [pc, #184]	; (800487c <__swsetup_r+0xd0>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	d10f      	bne.n	80047e8 <__swsetup_r+0x3c>
 80047c8:	686c      	ldr	r4, [r5, #4]
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047d0:	0719      	lsls	r1, r3, #28
 80047d2:	d42c      	bmi.n	800482e <__swsetup_r+0x82>
 80047d4:	06dd      	lsls	r5, r3, #27
 80047d6:	d411      	bmi.n	80047fc <__swsetup_r+0x50>
 80047d8:	2309      	movs	r3, #9
 80047da:	6033      	str	r3, [r6, #0]
 80047dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	f04f 30ff 	mov.w	r0, #4294967295
 80047e6:	e03e      	b.n	8004866 <__swsetup_r+0xba>
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <__swsetup_r+0xd4>)
 80047ea:	429c      	cmp	r4, r3
 80047ec:	d101      	bne.n	80047f2 <__swsetup_r+0x46>
 80047ee:	68ac      	ldr	r4, [r5, #8]
 80047f0:	e7eb      	b.n	80047ca <__swsetup_r+0x1e>
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <__swsetup_r+0xd8>)
 80047f4:	429c      	cmp	r4, r3
 80047f6:	bf08      	it	eq
 80047f8:	68ec      	ldreq	r4, [r5, #12]
 80047fa:	e7e6      	b.n	80047ca <__swsetup_r+0x1e>
 80047fc:	0758      	lsls	r0, r3, #29
 80047fe:	d512      	bpl.n	8004826 <__swsetup_r+0x7a>
 8004800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004802:	b141      	cbz	r1, 8004816 <__swsetup_r+0x6a>
 8004804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004808:	4299      	cmp	r1, r3
 800480a:	d002      	beq.n	8004812 <__swsetup_r+0x66>
 800480c:	4630      	mov	r0, r6
 800480e:	f000 fa59 	bl	8004cc4 <_free_r>
 8004812:	2300      	movs	r3, #0
 8004814:	6363      	str	r3, [r4, #52]	; 0x34
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	2300      	movs	r3, #0
 8004820:	6063      	str	r3, [r4, #4]
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f043 0308 	orr.w	r3, r3, #8
 800482c:	81a3      	strh	r3, [r4, #12]
 800482e:	6923      	ldr	r3, [r4, #16]
 8004830:	b94b      	cbnz	r3, 8004846 <__swsetup_r+0x9a>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483c:	d003      	beq.n	8004846 <__swsetup_r+0x9a>
 800483e:	4621      	mov	r1, r4
 8004840:	4630      	mov	r0, r6
 8004842:	f000 f9ff 	bl	8004c44 <__smakebuf_r>
 8004846:	89a0      	ldrh	r0, [r4, #12]
 8004848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800484c:	f010 0301 	ands.w	r3, r0, #1
 8004850:	d00a      	beq.n	8004868 <__swsetup_r+0xbc>
 8004852:	2300      	movs	r3, #0
 8004854:	60a3      	str	r3, [r4, #8]
 8004856:	6963      	ldr	r3, [r4, #20]
 8004858:	425b      	negs	r3, r3
 800485a:	61a3      	str	r3, [r4, #24]
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	b943      	cbnz	r3, 8004872 <__swsetup_r+0xc6>
 8004860:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004864:	d1ba      	bne.n	80047dc <__swsetup_r+0x30>
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	0781      	lsls	r1, r0, #30
 800486a:	bf58      	it	pl
 800486c:	6963      	ldrpl	r3, [r4, #20]
 800486e:	60a3      	str	r3, [r4, #8]
 8004870:	e7f4      	b.n	800485c <__swsetup_r+0xb0>
 8004872:	2000      	movs	r0, #0
 8004874:	e7f7      	b.n	8004866 <__swsetup_r+0xba>
 8004876:	bf00      	nop
 8004878:	20000010 	.word	0x20000010
 800487c:	08005710 	.word	0x08005710
 8004880:	08005730 	.word	0x08005730
 8004884:	080056f0 	.word	0x080056f0

08004888 <__sflush_r>:
 8004888:	898a      	ldrh	r2, [r1, #12]
 800488a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488e:	4605      	mov	r5, r0
 8004890:	0710      	lsls	r0, r2, #28
 8004892:	460c      	mov	r4, r1
 8004894:	d458      	bmi.n	8004948 <__sflush_r+0xc0>
 8004896:	684b      	ldr	r3, [r1, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	dc05      	bgt.n	80048a8 <__sflush_r+0x20>
 800489c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	dc02      	bgt.n	80048a8 <__sflush_r+0x20>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048aa:	2e00      	cmp	r6, #0
 80048ac:	d0f9      	beq.n	80048a2 <__sflush_r+0x1a>
 80048ae:	2300      	movs	r3, #0
 80048b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048b4:	682f      	ldr	r7, [r5, #0]
 80048b6:	602b      	str	r3, [r5, #0]
 80048b8:	d032      	beq.n	8004920 <__sflush_r+0x98>
 80048ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	075a      	lsls	r2, r3, #29
 80048c0:	d505      	bpl.n	80048ce <__sflush_r+0x46>
 80048c2:	6863      	ldr	r3, [r4, #4]
 80048c4:	1ac0      	subs	r0, r0, r3
 80048c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048c8:	b10b      	cbz	r3, 80048ce <__sflush_r+0x46>
 80048ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048cc:	1ac0      	subs	r0, r0, r3
 80048ce:	2300      	movs	r3, #0
 80048d0:	4602      	mov	r2, r0
 80048d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048d4:	6a21      	ldr	r1, [r4, #32]
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b0      	blx	r6
 80048da:	1c43      	adds	r3, r0, #1
 80048dc:	89a3      	ldrh	r3, [r4, #12]
 80048de:	d106      	bne.n	80048ee <__sflush_r+0x66>
 80048e0:	6829      	ldr	r1, [r5, #0]
 80048e2:	291d      	cmp	r1, #29
 80048e4:	d82c      	bhi.n	8004940 <__sflush_r+0xb8>
 80048e6:	4a2a      	ldr	r2, [pc, #168]	; (8004990 <__sflush_r+0x108>)
 80048e8:	40ca      	lsrs	r2, r1
 80048ea:	07d6      	lsls	r6, r2, #31
 80048ec:	d528      	bpl.n	8004940 <__sflush_r+0xb8>
 80048ee:	2200      	movs	r2, #0
 80048f0:	6062      	str	r2, [r4, #4]
 80048f2:	04d9      	lsls	r1, r3, #19
 80048f4:	6922      	ldr	r2, [r4, #16]
 80048f6:	6022      	str	r2, [r4, #0]
 80048f8:	d504      	bpl.n	8004904 <__sflush_r+0x7c>
 80048fa:	1c42      	adds	r2, r0, #1
 80048fc:	d101      	bne.n	8004902 <__sflush_r+0x7a>
 80048fe:	682b      	ldr	r3, [r5, #0]
 8004900:	b903      	cbnz	r3, 8004904 <__sflush_r+0x7c>
 8004902:	6560      	str	r0, [r4, #84]	; 0x54
 8004904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004906:	602f      	str	r7, [r5, #0]
 8004908:	2900      	cmp	r1, #0
 800490a:	d0ca      	beq.n	80048a2 <__sflush_r+0x1a>
 800490c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004910:	4299      	cmp	r1, r3
 8004912:	d002      	beq.n	800491a <__sflush_r+0x92>
 8004914:	4628      	mov	r0, r5
 8004916:	f000 f9d5 	bl	8004cc4 <_free_r>
 800491a:	2000      	movs	r0, #0
 800491c:	6360      	str	r0, [r4, #52]	; 0x34
 800491e:	e7c1      	b.n	80048a4 <__sflush_r+0x1c>
 8004920:	6a21      	ldr	r1, [r4, #32]
 8004922:	2301      	movs	r3, #1
 8004924:	4628      	mov	r0, r5
 8004926:	47b0      	blx	r6
 8004928:	1c41      	adds	r1, r0, #1
 800492a:	d1c7      	bne.n	80048bc <__sflush_r+0x34>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0c4      	beq.n	80048bc <__sflush_r+0x34>
 8004932:	2b1d      	cmp	r3, #29
 8004934:	d001      	beq.n	800493a <__sflush_r+0xb2>
 8004936:	2b16      	cmp	r3, #22
 8004938:	d101      	bne.n	800493e <__sflush_r+0xb6>
 800493a:	602f      	str	r7, [r5, #0]
 800493c:	e7b1      	b.n	80048a2 <__sflush_r+0x1a>
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004944:	81a3      	strh	r3, [r4, #12]
 8004946:	e7ad      	b.n	80048a4 <__sflush_r+0x1c>
 8004948:	690f      	ldr	r7, [r1, #16]
 800494a:	2f00      	cmp	r7, #0
 800494c:	d0a9      	beq.n	80048a2 <__sflush_r+0x1a>
 800494e:	0793      	lsls	r3, r2, #30
 8004950:	680e      	ldr	r6, [r1, #0]
 8004952:	bf08      	it	eq
 8004954:	694b      	ldreq	r3, [r1, #20]
 8004956:	600f      	str	r7, [r1, #0]
 8004958:	bf18      	it	ne
 800495a:	2300      	movne	r3, #0
 800495c:	eba6 0807 	sub.w	r8, r6, r7
 8004960:	608b      	str	r3, [r1, #8]
 8004962:	f1b8 0f00 	cmp.w	r8, #0
 8004966:	dd9c      	ble.n	80048a2 <__sflush_r+0x1a>
 8004968:	6a21      	ldr	r1, [r4, #32]
 800496a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800496c:	4643      	mov	r3, r8
 800496e:	463a      	mov	r2, r7
 8004970:	4628      	mov	r0, r5
 8004972:	47b0      	blx	r6
 8004974:	2800      	cmp	r0, #0
 8004976:	dc06      	bgt.n	8004986 <__sflush_r+0xfe>
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800497e:	81a3      	strh	r3, [r4, #12]
 8004980:	f04f 30ff 	mov.w	r0, #4294967295
 8004984:	e78e      	b.n	80048a4 <__sflush_r+0x1c>
 8004986:	4407      	add	r7, r0
 8004988:	eba8 0800 	sub.w	r8, r8, r0
 800498c:	e7e9      	b.n	8004962 <__sflush_r+0xda>
 800498e:	bf00      	nop
 8004990:	20400001 	.word	0x20400001

08004994 <_fflush_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	690b      	ldr	r3, [r1, #16]
 8004998:	4605      	mov	r5, r0
 800499a:	460c      	mov	r4, r1
 800499c:	b913      	cbnz	r3, 80049a4 <_fflush_r+0x10>
 800499e:	2500      	movs	r5, #0
 80049a0:	4628      	mov	r0, r5
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	b118      	cbz	r0, 80049ae <_fflush_r+0x1a>
 80049a6:	6983      	ldr	r3, [r0, #24]
 80049a8:	b90b      	cbnz	r3, 80049ae <_fflush_r+0x1a>
 80049aa:	f000 f887 	bl	8004abc <__sinit>
 80049ae:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <_fflush_r+0x6c>)
 80049b0:	429c      	cmp	r4, r3
 80049b2:	d11b      	bne.n	80049ec <_fflush_r+0x58>
 80049b4:	686c      	ldr	r4, [r5, #4]
 80049b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0ef      	beq.n	800499e <_fflush_r+0xa>
 80049be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049c0:	07d0      	lsls	r0, r2, #31
 80049c2:	d404      	bmi.n	80049ce <_fflush_r+0x3a>
 80049c4:	0599      	lsls	r1, r3, #22
 80049c6:	d402      	bmi.n	80049ce <_fflush_r+0x3a>
 80049c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ca:	f000 f915 	bl	8004bf8 <__retarget_lock_acquire_recursive>
 80049ce:	4628      	mov	r0, r5
 80049d0:	4621      	mov	r1, r4
 80049d2:	f7ff ff59 	bl	8004888 <__sflush_r>
 80049d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049d8:	07da      	lsls	r2, r3, #31
 80049da:	4605      	mov	r5, r0
 80049dc:	d4e0      	bmi.n	80049a0 <_fflush_r+0xc>
 80049de:	89a3      	ldrh	r3, [r4, #12]
 80049e0:	059b      	lsls	r3, r3, #22
 80049e2:	d4dd      	bmi.n	80049a0 <_fflush_r+0xc>
 80049e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049e6:	f000 f908 	bl	8004bfa <__retarget_lock_release_recursive>
 80049ea:	e7d9      	b.n	80049a0 <_fflush_r+0xc>
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <_fflush_r+0x70>)
 80049ee:	429c      	cmp	r4, r3
 80049f0:	d101      	bne.n	80049f6 <_fflush_r+0x62>
 80049f2:	68ac      	ldr	r4, [r5, #8]
 80049f4:	e7df      	b.n	80049b6 <_fflush_r+0x22>
 80049f6:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <_fflush_r+0x74>)
 80049f8:	429c      	cmp	r4, r3
 80049fa:	bf08      	it	eq
 80049fc:	68ec      	ldreq	r4, [r5, #12]
 80049fe:	e7da      	b.n	80049b6 <_fflush_r+0x22>
 8004a00:	08005710 	.word	0x08005710
 8004a04:	08005730 	.word	0x08005730
 8004a08:	080056f0 	.word	0x080056f0

08004a0c <std>:
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	b510      	push	{r4, lr}
 8004a10:	4604      	mov	r4, r0
 8004a12:	e9c0 3300 	strd	r3, r3, [r0]
 8004a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a1a:	6083      	str	r3, [r0, #8]
 8004a1c:	8181      	strh	r1, [r0, #12]
 8004a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a20:	81c2      	strh	r2, [r0, #14]
 8004a22:	6183      	str	r3, [r0, #24]
 8004a24:	4619      	mov	r1, r3
 8004a26:	2208      	movs	r2, #8
 8004a28:	305c      	adds	r0, #92	; 0x5c
 8004a2a:	f7ff fdd7 	bl	80045dc <memset>
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <std+0x38>)
 8004a30:	6263      	str	r3, [r4, #36]	; 0x24
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <std+0x3c>)
 8004a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <std+0x40>)
 8004a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <std+0x44>)
 8004a3c:	6224      	str	r4, [r4, #32]
 8004a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	bf00      	nop
 8004a44:	08005415 	.word	0x08005415
 8004a48:	08005437 	.word	0x08005437
 8004a4c:	0800546f 	.word	0x0800546f
 8004a50:	08005493 	.word	0x08005493

08004a54 <_cleanup_r>:
 8004a54:	4901      	ldr	r1, [pc, #4]	; (8004a5c <_cleanup_r+0x8>)
 8004a56:	f000 b8af 	b.w	8004bb8 <_fwalk_reent>
 8004a5a:	bf00      	nop
 8004a5c:	08004995 	.word	0x08004995

08004a60 <__sfmoreglue>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	1e4a      	subs	r2, r1, #1
 8004a64:	2568      	movs	r5, #104	; 0x68
 8004a66:	4355      	muls	r5, r2
 8004a68:	460e      	mov	r6, r1
 8004a6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a6e:	f000 f979 	bl	8004d64 <_malloc_r>
 8004a72:	4604      	mov	r4, r0
 8004a74:	b140      	cbz	r0, 8004a88 <__sfmoreglue+0x28>
 8004a76:	2100      	movs	r1, #0
 8004a78:	e9c0 1600 	strd	r1, r6, [r0]
 8004a7c:	300c      	adds	r0, #12
 8004a7e:	60a0      	str	r0, [r4, #8]
 8004a80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a84:	f7ff fdaa 	bl	80045dc <memset>
 8004a88:	4620      	mov	r0, r4
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}

08004a8c <__sfp_lock_acquire>:
 8004a8c:	4801      	ldr	r0, [pc, #4]	; (8004a94 <__sfp_lock_acquire+0x8>)
 8004a8e:	f000 b8b3 	b.w	8004bf8 <__retarget_lock_acquire_recursive>
 8004a92:	bf00      	nop
 8004a94:	20004a00 	.word	0x20004a00

08004a98 <__sfp_lock_release>:
 8004a98:	4801      	ldr	r0, [pc, #4]	; (8004aa0 <__sfp_lock_release+0x8>)
 8004a9a:	f000 b8ae 	b.w	8004bfa <__retarget_lock_release_recursive>
 8004a9e:	bf00      	nop
 8004aa0:	20004a00 	.word	0x20004a00

08004aa4 <__sinit_lock_acquire>:
 8004aa4:	4801      	ldr	r0, [pc, #4]	; (8004aac <__sinit_lock_acquire+0x8>)
 8004aa6:	f000 b8a7 	b.w	8004bf8 <__retarget_lock_acquire_recursive>
 8004aaa:	bf00      	nop
 8004aac:	200049fb 	.word	0x200049fb

08004ab0 <__sinit_lock_release>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	; (8004ab8 <__sinit_lock_release+0x8>)
 8004ab2:	f000 b8a2 	b.w	8004bfa <__retarget_lock_release_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	200049fb 	.word	0x200049fb

08004abc <__sinit>:
 8004abc:	b510      	push	{r4, lr}
 8004abe:	4604      	mov	r4, r0
 8004ac0:	f7ff fff0 	bl	8004aa4 <__sinit_lock_acquire>
 8004ac4:	69a3      	ldr	r3, [r4, #24]
 8004ac6:	b11b      	cbz	r3, 8004ad0 <__sinit+0x14>
 8004ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004acc:	f7ff bff0 	b.w	8004ab0 <__sinit_lock_release>
 8004ad0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ad4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <__sinit+0x68>)
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <__sinit+0x6c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ade:	42a3      	cmp	r3, r4
 8004ae0:	bf04      	itt	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	61a3      	streq	r3, [r4, #24]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f000 f820 	bl	8004b2c <__sfp>
 8004aec:	6060      	str	r0, [r4, #4]
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 f81c 	bl	8004b2c <__sfp>
 8004af4:	60a0      	str	r0, [r4, #8]
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 f818 	bl	8004b2c <__sfp>
 8004afc:	2200      	movs	r2, #0
 8004afe:	60e0      	str	r0, [r4, #12]
 8004b00:	2104      	movs	r1, #4
 8004b02:	6860      	ldr	r0, [r4, #4]
 8004b04:	f7ff ff82 	bl	8004a0c <std>
 8004b08:	68a0      	ldr	r0, [r4, #8]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	2109      	movs	r1, #9
 8004b0e:	f7ff ff7d 	bl	8004a0c <std>
 8004b12:	68e0      	ldr	r0, [r4, #12]
 8004b14:	2202      	movs	r2, #2
 8004b16:	2112      	movs	r1, #18
 8004b18:	f7ff ff78 	bl	8004a0c <std>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	61a3      	str	r3, [r4, #24]
 8004b20:	e7d2      	b.n	8004ac8 <__sinit+0xc>
 8004b22:	bf00      	nop
 8004b24:	080056ec 	.word	0x080056ec
 8004b28:	08004a55 	.word	0x08004a55

08004b2c <__sfp>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	4607      	mov	r7, r0
 8004b30:	f7ff ffac 	bl	8004a8c <__sfp_lock_acquire>
 8004b34:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <__sfp+0x84>)
 8004b36:	681e      	ldr	r6, [r3, #0]
 8004b38:	69b3      	ldr	r3, [r6, #24]
 8004b3a:	b913      	cbnz	r3, 8004b42 <__sfp+0x16>
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	f7ff ffbd 	bl	8004abc <__sinit>
 8004b42:	3648      	adds	r6, #72	; 0x48
 8004b44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	d503      	bpl.n	8004b54 <__sfp+0x28>
 8004b4c:	6833      	ldr	r3, [r6, #0]
 8004b4e:	b30b      	cbz	r3, 8004b94 <__sfp+0x68>
 8004b50:	6836      	ldr	r6, [r6, #0]
 8004b52:	e7f7      	b.n	8004b44 <__sfp+0x18>
 8004b54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b58:	b9d5      	cbnz	r5, 8004b90 <__sfp+0x64>
 8004b5a:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <__sfp+0x88>)
 8004b5c:	60e3      	str	r3, [r4, #12]
 8004b5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b62:	6665      	str	r5, [r4, #100]	; 0x64
 8004b64:	f000 f847 	bl	8004bf6 <__retarget_lock_init_recursive>
 8004b68:	f7ff ff96 	bl	8004a98 <__sfp_lock_release>
 8004b6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b74:	6025      	str	r5, [r4, #0]
 8004b76:	61a5      	str	r5, [r4, #24]
 8004b78:	2208      	movs	r2, #8
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b80:	f7ff fd2c 	bl	80045dc <memset>
 8004b84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b90:	3468      	adds	r4, #104	; 0x68
 8004b92:	e7d9      	b.n	8004b48 <__sfp+0x1c>
 8004b94:	2104      	movs	r1, #4
 8004b96:	4638      	mov	r0, r7
 8004b98:	f7ff ff62 	bl	8004a60 <__sfmoreglue>
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	6030      	str	r0, [r6, #0]
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d1d5      	bne.n	8004b50 <__sfp+0x24>
 8004ba4:	f7ff ff78 	bl	8004a98 <__sfp_lock_release>
 8004ba8:	230c      	movs	r3, #12
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	e7ee      	b.n	8004b8c <__sfp+0x60>
 8004bae:	bf00      	nop
 8004bb0:	080056ec 	.word	0x080056ec
 8004bb4:	ffff0001 	.word	0xffff0001

08004bb8 <_fwalk_reent>:
 8004bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bbc:	4606      	mov	r6, r0
 8004bbe:	4688      	mov	r8, r1
 8004bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bc4:	2700      	movs	r7, #0
 8004bc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bca:	f1b9 0901 	subs.w	r9, r9, #1
 8004bce:	d505      	bpl.n	8004bdc <_fwalk_reent+0x24>
 8004bd0:	6824      	ldr	r4, [r4, #0]
 8004bd2:	2c00      	cmp	r4, #0
 8004bd4:	d1f7      	bne.n	8004bc6 <_fwalk_reent+0xe>
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bdc:	89ab      	ldrh	r3, [r5, #12]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d907      	bls.n	8004bf2 <_fwalk_reent+0x3a>
 8004be2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004be6:	3301      	adds	r3, #1
 8004be8:	d003      	beq.n	8004bf2 <_fwalk_reent+0x3a>
 8004bea:	4629      	mov	r1, r5
 8004bec:	4630      	mov	r0, r6
 8004bee:	47c0      	blx	r8
 8004bf0:	4307      	orrs	r7, r0
 8004bf2:	3568      	adds	r5, #104	; 0x68
 8004bf4:	e7e9      	b.n	8004bca <_fwalk_reent+0x12>

08004bf6 <__retarget_lock_init_recursive>:
 8004bf6:	4770      	bx	lr

08004bf8 <__retarget_lock_acquire_recursive>:
 8004bf8:	4770      	bx	lr

08004bfa <__retarget_lock_release_recursive>:
 8004bfa:	4770      	bx	lr

08004bfc <__swhatbuf_r>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	460e      	mov	r6, r1
 8004c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c04:	2900      	cmp	r1, #0
 8004c06:	b096      	sub	sp, #88	; 0x58
 8004c08:	4614      	mov	r4, r2
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	da07      	bge.n	8004c1e <__swhatbuf_r+0x22>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	89b3      	ldrh	r3, [r6, #12]
 8004c14:	061a      	lsls	r2, r3, #24
 8004c16:	d410      	bmi.n	8004c3a <__swhatbuf_r+0x3e>
 8004c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c1c:	e00e      	b.n	8004c3c <__swhatbuf_r+0x40>
 8004c1e:	466a      	mov	r2, sp
 8004c20:	f000 fc5e 	bl	80054e0 <_fstat_r>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	dbf2      	blt.n	8004c0e <__swhatbuf_r+0x12>
 8004c28:	9a01      	ldr	r2, [sp, #4]
 8004c2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c32:	425a      	negs	r2, r3
 8004c34:	415a      	adcs	r2, r3
 8004c36:	602a      	str	r2, [r5, #0]
 8004c38:	e7ee      	b.n	8004c18 <__swhatbuf_r+0x1c>
 8004c3a:	2340      	movs	r3, #64	; 0x40
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	6023      	str	r3, [r4, #0]
 8004c40:	b016      	add	sp, #88	; 0x58
 8004c42:	bd70      	pop	{r4, r5, r6, pc}

08004c44 <__smakebuf_r>:
 8004c44:	898b      	ldrh	r3, [r1, #12]
 8004c46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c48:	079d      	lsls	r5, r3, #30
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	d507      	bpl.n	8004c60 <__smakebuf_r+0x1c>
 8004c50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	6123      	str	r3, [r4, #16]
 8004c58:	2301      	movs	r3, #1
 8004c5a:	6163      	str	r3, [r4, #20]
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	ab01      	add	r3, sp, #4
 8004c62:	466a      	mov	r2, sp
 8004c64:	f7ff ffca 	bl	8004bfc <__swhatbuf_r>
 8004c68:	9900      	ldr	r1, [sp, #0]
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f000 f879 	bl	8004d64 <_malloc_r>
 8004c72:	b948      	cbnz	r0, 8004c88 <__smakebuf_r+0x44>
 8004c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c78:	059a      	lsls	r2, r3, #22
 8004c7a:	d4ef      	bmi.n	8004c5c <__smakebuf_r+0x18>
 8004c7c:	f023 0303 	bic.w	r3, r3, #3
 8004c80:	f043 0302 	orr.w	r3, r3, #2
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	e7e3      	b.n	8004c50 <__smakebuf_r+0xc>
 8004c88:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <__smakebuf_r+0x7c>)
 8004c8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	6020      	str	r0, [r4, #0]
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	81a3      	strh	r3, [r4, #12]
 8004c96:	9b00      	ldr	r3, [sp, #0]
 8004c98:	6163      	str	r3, [r4, #20]
 8004c9a:	9b01      	ldr	r3, [sp, #4]
 8004c9c:	6120      	str	r0, [r4, #16]
 8004c9e:	b15b      	cbz	r3, 8004cb8 <__smakebuf_r+0x74>
 8004ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	f000 fc2d 	bl	8005504 <_isatty_r>
 8004caa:	b128      	cbz	r0, 8004cb8 <__smakebuf_r+0x74>
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	81a3      	strh	r3, [r4, #12]
 8004cb8:	89a0      	ldrh	r0, [r4, #12]
 8004cba:	4305      	orrs	r5, r0
 8004cbc:	81a5      	strh	r5, [r4, #12]
 8004cbe:	e7cd      	b.n	8004c5c <__smakebuf_r+0x18>
 8004cc0:	08004a55 	.word	0x08004a55

08004cc4 <_free_r>:
 8004cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cc6:	2900      	cmp	r1, #0
 8004cc8:	d048      	beq.n	8004d5c <_free_r+0x98>
 8004cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cce:	9001      	str	r0, [sp, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8004cd6:	bfb8      	it	lt
 8004cd8:	18e4      	addlt	r4, r4, r3
 8004cda:	f000 fc35 	bl	8005548 <__malloc_lock>
 8004cde:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <_free_r+0x9c>)
 8004ce0:	9801      	ldr	r0, [sp, #4]
 8004ce2:	6813      	ldr	r3, [r2, #0]
 8004ce4:	4615      	mov	r5, r2
 8004ce6:	b933      	cbnz	r3, 8004cf6 <_free_r+0x32>
 8004ce8:	6063      	str	r3, [r4, #4]
 8004cea:	6014      	str	r4, [r2, #0]
 8004cec:	b003      	add	sp, #12
 8004cee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cf2:	f000 bc2f 	b.w	8005554 <__malloc_unlock>
 8004cf6:	42a3      	cmp	r3, r4
 8004cf8:	d90b      	bls.n	8004d12 <_free_r+0x4e>
 8004cfa:	6821      	ldr	r1, [r4, #0]
 8004cfc:	1862      	adds	r2, r4, r1
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	bf04      	itt	eq
 8004d02:	681a      	ldreq	r2, [r3, #0]
 8004d04:	685b      	ldreq	r3, [r3, #4]
 8004d06:	6063      	str	r3, [r4, #4]
 8004d08:	bf04      	itt	eq
 8004d0a:	1852      	addeq	r2, r2, r1
 8004d0c:	6022      	streq	r2, [r4, #0]
 8004d0e:	602c      	str	r4, [r5, #0]
 8004d10:	e7ec      	b.n	8004cec <_free_r+0x28>
 8004d12:	461a      	mov	r2, r3
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	b10b      	cbz	r3, 8004d1c <_free_r+0x58>
 8004d18:	42a3      	cmp	r3, r4
 8004d1a:	d9fa      	bls.n	8004d12 <_free_r+0x4e>
 8004d1c:	6811      	ldr	r1, [r2, #0]
 8004d1e:	1855      	adds	r5, r2, r1
 8004d20:	42a5      	cmp	r5, r4
 8004d22:	d10b      	bne.n	8004d3c <_free_r+0x78>
 8004d24:	6824      	ldr	r4, [r4, #0]
 8004d26:	4421      	add	r1, r4
 8004d28:	1854      	adds	r4, r2, r1
 8004d2a:	42a3      	cmp	r3, r4
 8004d2c:	6011      	str	r1, [r2, #0]
 8004d2e:	d1dd      	bne.n	8004cec <_free_r+0x28>
 8004d30:	681c      	ldr	r4, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	6053      	str	r3, [r2, #4]
 8004d36:	4421      	add	r1, r4
 8004d38:	6011      	str	r1, [r2, #0]
 8004d3a:	e7d7      	b.n	8004cec <_free_r+0x28>
 8004d3c:	d902      	bls.n	8004d44 <_free_r+0x80>
 8004d3e:	230c      	movs	r3, #12
 8004d40:	6003      	str	r3, [r0, #0]
 8004d42:	e7d3      	b.n	8004cec <_free_r+0x28>
 8004d44:	6825      	ldr	r5, [r4, #0]
 8004d46:	1961      	adds	r1, r4, r5
 8004d48:	428b      	cmp	r3, r1
 8004d4a:	bf04      	itt	eq
 8004d4c:	6819      	ldreq	r1, [r3, #0]
 8004d4e:	685b      	ldreq	r3, [r3, #4]
 8004d50:	6063      	str	r3, [r4, #4]
 8004d52:	bf04      	itt	eq
 8004d54:	1949      	addeq	r1, r1, r5
 8004d56:	6021      	streq	r1, [r4, #0]
 8004d58:	6054      	str	r4, [r2, #4]
 8004d5a:	e7c7      	b.n	8004cec <_free_r+0x28>
 8004d5c:	b003      	add	sp, #12
 8004d5e:	bd30      	pop	{r4, r5, pc}
 8004d60:	2000499c 	.word	0x2000499c

08004d64 <_malloc_r>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	1ccd      	adds	r5, r1, #3
 8004d68:	f025 0503 	bic.w	r5, r5, #3
 8004d6c:	3508      	adds	r5, #8
 8004d6e:	2d0c      	cmp	r5, #12
 8004d70:	bf38      	it	cc
 8004d72:	250c      	movcc	r5, #12
 8004d74:	2d00      	cmp	r5, #0
 8004d76:	4606      	mov	r6, r0
 8004d78:	db01      	blt.n	8004d7e <_malloc_r+0x1a>
 8004d7a:	42a9      	cmp	r1, r5
 8004d7c:	d903      	bls.n	8004d86 <_malloc_r+0x22>
 8004d7e:	230c      	movs	r3, #12
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	2000      	movs	r0, #0
 8004d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d86:	f000 fbdf 	bl	8005548 <__malloc_lock>
 8004d8a:	4921      	ldr	r1, [pc, #132]	; (8004e10 <_malloc_r+0xac>)
 8004d8c:	680a      	ldr	r2, [r1, #0]
 8004d8e:	4614      	mov	r4, r2
 8004d90:	b99c      	cbnz	r4, 8004dba <_malloc_r+0x56>
 8004d92:	4f20      	ldr	r7, [pc, #128]	; (8004e14 <_malloc_r+0xb0>)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	b923      	cbnz	r3, 8004da2 <_malloc_r+0x3e>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f000 fb2a 	bl	80053f4 <_sbrk_r>
 8004da0:	6038      	str	r0, [r7, #0]
 8004da2:	4629      	mov	r1, r5
 8004da4:	4630      	mov	r0, r6
 8004da6:	f000 fb25 	bl	80053f4 <_sbrk_r>
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	d123      	bne.n	8004df6 <_malloc_r+0x92>
 8004dae:	230c      	movs	r3, #12
 8004db0:	6033      	str	r3, [r6, #0]
 8004db2:	4630      	mov	r0, r6
 8004db4:	f000 fbce 	bl	8005554 <__malloc_unlock>
 8004db8:	e7e3      	b.n	8004d82 <_malloc_r+0x1e>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	1b5b      	subs	r3, r3, r5
 8004dbe:	d417      	bmi.n	8004df0 <_malloc_r+0x8c>
 8004dc0:	2b0b      	cmp	r3, #11
 8004dc2:	d903      	bls.n	8004dcc <_malloc_r+0x68>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	441c      	add	r4, r3
 8004dc8:	6025      	str	r5, [r4, #0]
 8004dca:	e004      	b.n	8004dd6 <_malloc_r+0x72>
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	42a2      	cmp	r2, r4
 8004dd0:	bf0c      	ite	eq
 8004dd2:	600b      	streq	r3, [r1, #0]
 8004dd4:	6053      	strne	r3, [r2, #4]
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f000 fbbc 	bl	8005554 <__malloc_unlock>
 8004ddc:	f104 000b 	add.w	r0, r4, #11
 8004de0:	1d23      	adds	r3, r4, #4
 8004de2:	f020 0007 	bic.w	r0, r0, #7
 8004de6:	1ac2      	subs	r2, r0, r3
 8004de8:	d0cc      	beq.n	8004d84 <_malloc_r+0x20>
 8004dea:	1a1b      	subs	r3, r3, r0
 8004dec:	50a3      	str	r3, [r4, r2]
 8004dee:	e7c9      	b.n	8004d84 <_malloc_r+0x20>
 8004df0:	4622      	mov	r2, r4
 8004df2:	6864      	ldr	r4, [r4, #4]
 8004df4:	e7cc      	b.n	8004d90 <_malloc_r+0x2c>
 8004df6:	1cc4      	adds	r4, r0, #3
 8004df8:	f024 0403 	bic.w	r4, r4, #3
 8004dfc:	42a0      	cmp	r0, r4
 8004dfe:	d0e3      	beq.n	8004dc8 <_malloc_r+0x64>
 8004e00:	1a21      	subs	r1, r4, r0
 8004e02:	4630      	mov	r0, r6
 8004e04:	f000 faf6 	bl	80053f4 <_sbrk_r>
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d1dd      	bne.n	8004dc8 <_malloc_r+0x64>
 8004e0c:	e7cf      	b.n	8004dae <_malloc_r+0x4a>
 8004e0e:	bf00      	nop
 8004e10:	2000499c 	.word	0x2000499c
 8004e14:	200049a0 	.word	0x200049a0

08004e18 <__sfputc_r>:
 8004e18:	6893      	ldr	r3, [r2, #8]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	b410      	push	{r4}
 8004e20:	6093      	str	r3, [r2, #8]
 8004e22:	da08      	bge.n	8004e36 <__sfputc_r+0x1e>
 8004e24:	6994      	ldr	r4, [r2, #24]
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	db01      	blt.n	8004e2e <__sfputc_r+0x16>
 8004e2a:	290a      	cmp	r1, #10
 8004e2c:	d103      	bne.n	8004e36 <__sfputc_r+0x1e>
 8004e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e32:	f7ff bc69 	b.w	8004708 <__swbuf_r>
 8004e36:	6813      	ldr	r3, [r2, #0]
 8004e38:	1c58      	adds	r0, r3, #1
 8004e3a:	6010      	str	r0, [r2, #0]
 8004e3c:	7019      	strb	r1, [r3, #0]
 8004e3e:	4608      	mov	r0, r1
 8004e40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <__sfputs_r>:
 8004e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e48:	4606      	mov	r6, r0
 8004e4a:	460f      	mov	r7, r1
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	18d5      	adds	r5, r2, r3
 8004e50:	42ac      	cmp	r4, r5
 8004e52:	d101      	bne.n	8004e58 <__sfputs_r+0x12>
 8004e54:	2000      	movs	r0, #0
 8004e56:	e007      	b.n	8004e68 <__sfputs_r+0x22>
 8004e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e5c:	463a      	mov	r2, r7
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f7ff ffda 	bl	8004e18 <__sfputc_r>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d1f3      	bne.n	8004e50 <__sfputs_r+0xa>
 8004e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e6c <_vfiprintf_r>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	460d      	mov	r5, r1
 8004e72:	b09d      	sub	sp, #116	; 0x74
 8004e74:	4614      	mov	r4, r2
 8004e76:	4698      	mov	r8, r3
 8004e78:	4606      	mov	r6, r0
 8004e7a:	b118      	cbz	r0, 8004e84 <_vfiprintf_r+0x18>
 8004e7c:	6983      	ldr	r3, [r0, #24]
 8004e7e:	b90b      	cbnz	r3, 8004e84 <_vfiprintf_r+0x18>
 8004e80:	f7ff fe1c 	bl	8004abc <__sinit>
 8004e84:	4b89      	ldr	r3, [pc, #548]	; (80050ac <_vfiprintf_r+0x240>)
 8004e86:	429d      	cmp	r5, r3
 8004e88:	d11b      	bne.n	8004ec2 <_vfiprintf_r+0x56>
 8004e8a:	6875      	ldr	r5, [r6, #4]
 8004e8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e8e:	07d9      	lsls	r1, r3, #31
 8004e90:	d405      	bmi.n	8004e9e <_vfiprintf_r+0x32>
 8004e92:	89ab      	ldrh	r3, [r5, #12]
 8004e94:	059a      	lsls	r2, r3, #22
 8004e96:	d402      	bmi.n	8004e9e <_vfiprintf_r+0x32>
 8004e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e9a:	f7ff fead 	bl	8004bf8 <__retarget_lock_acquire_recursive>
 8004e9e:	89ab      	ldrh	r3, [r5, #12]
 8004ea0:	071b      	lsls	r3, r3, #28
 8004ea2:	d501      	bpl.n	8004ea8 <_vfiprintf_r+0x3c>
 8004ea4:	692b      	ldr	r3, [r5, #16]
 8004ea6:	b9eb      	cbnz	r3, 8004ee4 <_vfiprintf_r+0x78>
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f7ff fc7e 	bl	80047ac <__swsetup_r>
 8004eb0:	b1c0      	cbz	r0, 8004ee4 <_vfiprintf_r+0x78>
 8004eb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eb4:	07dc      	lsls	r4, r3, #31
 8004eb6:	d50e      	bpl.n	8004ed6 <_vfiprintf_r+0x6a>
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	b01d      	add	sp, #116	; 0x74
 8004ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec2:	4b7b      	ldr	r3, [pc, #492]	; (80050b0 <_vfiprintf_r+0x244>)
 8004ec4:	429d      	cmp	r5, r3
 8004ec6:	d101      	bne.n	8004ecc <_vfiprintf_r+0x60>
 8004ec8:	68b5      	ldr	r5, [r6, #8]
 8004eca:	e7df      	b.n	8004e8c <_vfiprintf_r+0x20>
 8004ecc:	4b79      	ldr	r3, [pc, #484]	; (80050b4 <_vfiprintf_r+0x248>)
 8004ece:	429d      	cmp	r5, r3
 8004ed0:	bf08      	it	eq
 8004ed2:	68f5      	ldreq	r5, [r6, #12]
 8004ed4:	e7da      	b.n	8004e8c <_vfiprintf_r+0x20>
 8004ed6:	89ab      	ldrh	r3, [r5, #12]
 8004ed8:	0598      	lsls	r0, r3, #22
 8004eda:	d4ed      	bmi.n	8004eb8 <_vfiprintf_r+0x4c>
 8004edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ede:	f7ff fe8c 	bl	8004bfa <__retarget_lock_release_recursive>
 8004ee2:	e7e9      	b.n	8004eb8 <_vfiprintf_r+0x4c>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee8:	2320      	movs	r3, #32
 8004eea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eee:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ef2:	2330      	movs	r3, #48	; 0x30
 8004ef4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050b8 <_vfiprintf_r+0x24c>
 8004ef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004efc:	f04f 0901 	mov.w	r9, #1
 8004f00:	4623      	mov	r3, r4
 8004f02:	469a      	mov	sl, r3
 8004f04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f08:	b10a      	cbz	r2, 8004f0e <_vfiprintf_r+0xa2>
 8004f0a:	2a25      	cmp	r2, #37	; 0x25
 8004f0c:	d1f9      	bne.n	8004f02 <_vfiprintf_r+0x96>
 8004f0e:	ebba 0b04 	subs.w	fp, sl, r4
 8004f12:	d00b      	beq.n	8004f2c <_vfiprintf_r+0xc0>
 8004f14:	465b      	mov	r3, fp
 8004f16:	4622      	mov	r2, r4
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7ff ff93 	bl	8004e46 <__sfputs_r>
 8004f20:	3001      	adds	r0, #1
 8004f22:	f000 80aa 	beq.w	800507a <_vfiprintf_r+0x20e>
 8004f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f28:	445a      	add	r2, fp
 8004f2a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80a2 	beq.w	800507a <_vfiprintf_r+0x20e>
 8004f36:	2300      	movs	r3, #0
 8004f38:	f04f 32ff 	mov.w	r2, #4294967295
 8004f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f40:	f10a 0a01 	add.w	sl, sl, #1
 8004f44:	9304      	str	r3, [sp, #16]
 8004f46:	9307      	str	r3, [sp, #28]
 8004f48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f4c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f4e:	4654      	mov	r4, sl
 8004f50:	2205      	movs	r2, #5
 8004f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f56:	4858      	ldr	r0, [pc, #352]	; (80050b8 <_vfiprintf_r+0x24c>)
 8004f58:	f7fb f972 	bl	8000240 <memchr>
 8004f5c:	9a04      	ldr	r2, [sp, #16]
 8004f5e:	b9d8      	cbnz	r0, 8004f98 <_vfiprintf_r+0x12c>
 8004f60:	06d1      	lsls	r1, r2, #27
 8004f62:	bf44      	itt	mi
 8004f64:	2320      	movmi	r3, #32
 8004f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f6a:	0713      	lsls	r3, r2, #28
 8004f6c:	bf44      	itt	mi
 8004f6e:	232b      	movmi	r3, #43	; 0x2b
 8004f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f74:	f89a 3000 	ldrb.w	r3, [sl]
 8004f78:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7a:	d015      	beq.n	8004fa8 <_vfiprintf_r+0x13c>
 8004f7c:	9a07      	ldr	r2, [sp, #28]
 8004f7e:	4654      	mov	r4, sl
 8004f80:	2000      	movs	r0, #0
 8004f82:	f04f 0c0a 	mov.w	ip, #10
 8004f86:	4621      	mov	r1, r4
 8004f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f8c:	3b30      	subs	r3, #48	; 0x30
 8004f8e:	2b09      	cmp	r3, #9
 8004f90:	d94e      	bls.n	8005030 <_vfiprintf_r+0x1c4>
 8004f92:	b1b0      	cbz	r0, 8004fc2 <_vfiprintf_r+0x156>
 8004f94:	9207      	str	r2, [sp, #28]
 8004f96:	e014      	b.n	8004fc2 <_vfiprintf_r+0x156>
 8004f98:	eba0 0308 	sub.w	r3, r0, r8
 8004f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	9304      	str	r3, [sp, #16]
 8004fa4:	46a2      	mov	sl, r4
 8004fa6:	e7d2      	b.n	8004f4e <_vfiprintf_r+0xe2>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	1d19      	adds	r1, r3, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	9103      	str	r1, [sp, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bfbb      	ittet	lt
 8004fb4:	425b      	neglt	r3, r3
 8004fb6:	f042 0202 	orrlt.w	r2, r2, #2
 8004fba:	9307      	strge	r3, [sp, #28]
 8004fbc:	9307      	strlt	r3, [sp, #28]
 8004fbe:	bfb8      	it	lt
 8004fc0:	9204      	strlt	r2, [sp, #16]
 8004fc2:	7823      	ldrb	r3, [r4, #0]
 8004fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fc6:	d10c      	bne.n	8004fe2 <_vfiprintf_r+0x176>
 8004fc8:	7863      	ldrb	r3, [r4, #1]
 8004fca:	2b2a      	cmp	r3, #42	; 0x2a
 8004fcc:	d135      	bne.n	800503a <_vfiprintf_r+0x1ce>
 8004fce:	9b03      	ldr	r3, [sp, #12]
 8004fd0:	1d1a      	adds	r2, r3, #4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	9203      	str	r2, [sp, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bfb8      	it	lt
 8004fda:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fde:	3402      	adds	r4, #2
 8004fe0:	9305      	str	r3, [sp, #20]
 8004fe2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050c8 <_vfiprintf_r+0x25c>
 8004fe6:	7821      	ldrb	r1, [r4, #0]
 8004fe8:	2203      	movs	r2, #3
 8004fea:	4650      	mov	r0, sl
 8004fec:	f7fb f928 	bl	8000240 <memchr>
 8004ff0:	b140      	cbz	r0, 8005004 <_vfiprintf_r+0x198>
 8004ff2:	2340      	movs	r3, #64	; 0x40
 8004ff4:	eba0 000a 	sub.w	r0, r0, sl
 8004ff8:	fa03 f000 	lsl.w	r0, r3, r0
 8004ffc:	9b04      	ldr	r3, [sp, #16]
 8004ffe:	4303      	orrs	r3, r0
 8005000:	3401      	adds	r4, #1
 8005002:	9304      	str	r3, [sp, #16]
 8005004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005008:	482c      	ldr	r0, [pc, #176]	; (80050bc <_vfiprintf_r+0x250>)
 800500a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800500e:	2206      	movs	r2, #6
 8005010:	f7fb f916 	bl	8000240 <memchr>
 8005014:	2800      	cmp	r0, #0
 8005016:	d03f      	beq.n	8005098 <_vfiprintf_r+0x22c>
 8005018:	4b29      	ldr	r3, [pc, #164]	; (80050c0 <_vfiprintf_r+0x254>)
 800501a:	bb1b      	cbnz	r3, 8005064 <_vfiprintf_r+0x1f8>
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	3307      	adds	r3, #7
 8005020:	f023 0307 	bic.w	r3, r3, #7
 8005024:	3308      	adds	r3, #8
 8005026:	9303      	str	r3, [sp, #12]
 8005028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502a:	443b      	add	r3, r7
 800502c:	9309      	str	r3, [sp, #36]	; 0x24
 800502e:	e767      	b.n	8004f00 <_vfiprintf_r+0x94>
 8005030:	fb0c 3202 	mla	r2, ip, r2, r3
 8005034:	460c      	mov	r4, r1
 8005036:	2001      	movs	r0, #1
 8005038:	e7a5      	b.n	8004f86 <_vfiprintf_r+0x11a>
 800503a:	2300      	movs	r3, #0
 800503c:	3401      	adds	r4, #1
 800503e:	9305      	str	r3, [sp, #20]
 8005040:	4619      	mov	r1, r3
 8005042:	f04f 0c0a 	mov.w	ip, #10
 8005046:	4620      	mov	r0, r4
 8005048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800504c:	3a30      	subs	r2, #48	; 0x30
 800504e:	2a09      	cmp	r2, #9
 8005050:	d903      	bls.n	800505a <_vfiprintf_r+0x1ee>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0c5      	beq.n	8004fe2 <_vfiprintf_r+0x176>
 8005056:	9105      	str	r1, [sp, #20]
 8005058:	e7c3      	b.n	8004fe2 <_vfiprintf_r+0x176>
 800505a:	fb0c 2101 	mla	r1, ip, r1, r2
 800505e:	4604      	mov	r4, r0
 8005060:	2301      	movs	r3, #1
 8005062:	e7f0      	b.n	8005046 <_vfiprintf_r+0x1da>
 8005064:	ab03      	add	r3, sp, #12
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	462a      	mov	r2, r5
 800506a:	4b16      	ldr	r3, [pc, #88]	; (80050c4 <_vfiprintf_r+0x258>)
 800506c:	a904      	add	r1, sp, #16
 800506e:	4630      	mov	r0, r6
 8005070:	f3af 8000 	nop.w
 8005074:	4607      	mov	r7, r0
 8005076:	1c78      	adds	r0, r7, #1
 8005078:	d1d6      	bne.n	8005028 <_vfiprintf_r+0x1bc>
 800507a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800507c:	07d9      	lsls	r1, r3, #31
 800507e:	d405      	bmi.n	800508c <_vfiprintf_r+0x220>
 8005080:	89ab      	ldrh	r3, [r5, #12]
 8005082:	059a      	lsls	r2, r3, #22
 8005084:	d402      	bmi.n	800508c <_vfiprintf_r+0x220>
 8005086:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005088:	f7ff fdb7 	bl	8004bfa <__retarget_lock_release_recursive>
 800508c:	89ab      	ldrh	r3, [r5, #12]
 800508e:	065b      	lsls	r3, r3, #25
 8005090:	f53f af12 	bmi.w	8004eb8 <_vfiprintf_r+0x4c>
 8005094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005096:	e711      	b.n	8004ebc <_vfiprintf_r+0x50>
 8005098:	ab03      	add	r3, sp, #12
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	462a      	mov	r2, r5
 800509e:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <_vfiprintf_r+0x258>)
 80050a0:	a904      	add	r1, sp, #16
 80050a2:	4630      	mov	r0, r6
 80050a4:	f000 f880 	bl	80051a8 <_printf_i>
 80050a8:	e7e4      	b.n	8005074 <_vfiprintf_r+0x208>
 80050aa:	bf00      	nop
 80050ac:	08005710 	.word	0x08005710
 80050b0:	08005730 	.word	0x08005730
 80050b4:	080056f0 	.word	0x080056f0
 80050b8:	08005750 	.word	0x08005750
 80050bc:	0800575a 	.word	0x0800575a
 80050c0:	00000000 	.word	0x00000000
 80050c4:	08004e47 	.word	0x08004e47
 80050c8:	08005756 	.word	0x08005756

080050cc <_printf_common>:
 80050cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d0:	4616      	mov	r6, r2
 80050d2:	4699      	mov	r9, r3
 80050d4:	688a      	ldr	r2, [r1, #8]
 80050d6:	690b      	ldr	r3, [r1, #16]
 80050d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050dc:	4293      	cmp	r3, r2
 80050de:	bfb8      	it	lt
 80050e0:	4613      	movlt	r3, r2
 80050e2:	6033      	str	r3, [r6, #0]
 80050e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050e8:	4607      	mov	r7, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	b10a      	cbz	r2, 80050f2 <_printf_common+0x26>
 80050ee:	3301      	adds	r3, #1
 80050f0:	6033      	str	r3, [r6, #0]
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	0699      	lsls	r1, r3, #26
 80050f6:	bf42      	ittt	mi
 80050f8:	6833      	ldrmi	r3, [r6, #0]
 80050fa:	3302      	addmi	r3, #2
 80050fc:	6033      	strmi	r3, [r6, #0]
 80050fe:	6825      	ldr	r5, [r4, #0]
 8005100:	f015 0506 	ands.w	r5, r5, #6
 8005104:	d106      	bne.n	8005114 <_printf_common+0x48>
 8005106:	f104 0a19 	add.w	sl, r4, #25
 800510a:	68e3      	ldr	r3, [r4, #12]
 800510c:	6832      	ldr	r2, [r6, #0]
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	42ab      	cmp	r3, r5
 8005112:	dc26      	bgt.n	8005162 <_printf_common+0x96>
 8005114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005118:	1e13      	subs	r3, r2, #0
 800511a:	6822      	ldr	r2, [r4, #0]
 800511c:	bf18      	it	ne
 800511e:	2301      	movne	r3, #1
 8005120:	0692      	lsls	r2, r2, #26
 8005122:	d42b      	bmi.n	800517c <_printf_common+0xb0>
 8005124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005128:	4649      	mov	r1, r9
 800512a:	4638      	mov	r0, r7
 800512c:	47c0      	blx	r8
 800512e:	3001      	adds	r0, #1
 8005130:	d01e      	beq.n	8005170 <_printf_common+0xa4>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	68e5      	ldr	r5, [r4, #12]
 8005136:	6832      	ldr	r2, [r6, #0]
 8005138:	f003 0306 	and.w	r3, r3, #6
 800513c:	2b04      	cmp	r3, #4
 800513e:	bf08      	it	eq
 8005140:	1aad      	subeq	r5, r5, r2
 8005142:	68a3      	ldr	r3, [r4, #8]
 8005144:	6922      	ldr	r2, [r4, #16]
 8005146:	bf0c      	ite	eq
 8005148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800514c:	2500      	movne	r5, #0
 800514e:	4293      	cmp	r3, r2
 8005150:	bfc4      	itt	gt
 8005152:	1a9b      	subgt	r3, r3, r2
 8005154:	18ed      	addgt	r5, r5, r3
 8005156:	2600      	movs	r6, #0
 8005158:	341a      	adds	r4, #26
 800515a:	42b5      	cmp	r5, r6
 800515c:	d11a      	bne.n	8005194 <_printf_common+0xc8>
 800515e:	2000      	movs	r0, #0
 8005160:	e008      	b.n	8005174 <_printf_common+0xa8>
 8005162:	2301      	movs	r3, #1
 8005164:	4652      	mov	r2, sl
 8005166:	4649      	mov	r1, r9
 8005168:	4638      	mov	r0, r7
 800516a:	47c0      	blx	r8
 800516c:	3001      	adds	r0, #1
 800516e:	d103      	bne.n	8005178 <_printf_common+0xac>
 8005170:	f04f 30ff 	mov.w	r0, #4294967295
 8005174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005178:	3501      	adds	r5, #1
 800517a:	e7c6      	b.n	800510a <_printf_common+0x3e>
 800517c:	18e1      	adds	r1, r4, r3
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	2030      	movs	r0, #48	; 0x30
 8005182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005186:	4422      	add	r2, r4
 8005188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800518c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005190:	3302      	adds	r3, #2
 8005192:	e7c7      	b.n	8005124 <_printf_common+0x58>
 8005194:	2301      	movs	r3, #1
 8005196:	4622      	mov	r2, r4
 8005198:	4649      	mov	r1, r9
 800519a:	4638      	mov	r0, r7
 800519c:	47c0      	blx	r8
 800519e:	3001      	adds	r0, #1
 80051a0:	d0e6      	beq.n	8005170 <_printf_common+0xa4>
 80051a2:	3601      	adds	r6, #1
 80051a4:	e7d9      	b.n	800515a <_printf_common+0x8e>
	...

080051a8 <_printf_i>:
 80051a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051ac:	460c      	mov	r4, r1
 80051ae:	4691      	mov	r9, r2
 80051b0:	7e27      	ldrb	r7, [r4, #24]
 80051b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051b4:	2f78      	cmp	r7, #120	; 0x78
 80051b6:	4680      	mov	r8, r0
 80051b8:	469a      	mov	sl, r3
 80051ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051be:	d807      	bhi.n	80051d0 <_printf_i+0x28>
 80051c0:	2f62      	cmp	r7, #98	; 0x62
 80051c2:	d80a      	bhi.n	80051da <_printf_i+0x32>
 80051c4:	2f00      	cmp	r7, #0
 80051c6:	f000 80d8 	beq.w	800537a <_printf_i+0x1d2>
 80051ca:	2f58      	cmp	r7, #88	; 0x58
 80051cc:	f000 80a3 	beq.w	8005316 <_printf_i+0x16e>
 80051d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051d8:	e03a      	b.n	8005250 <_printf_i+0xa8>
 80051da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051de:	2b15      	cmp	r3, #21
 80051e0:	d8f6      	bhi.n	80051d0 <_printf_i+0x28>
 80051e2:	a001      	add	r0, pc, #4	; (adr r0, 80051e8 <_printf_i+0x40>)
 80051e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051e8:	08005241 	.word	0x08005241
 80051ec:	08005255 	.word	0x08005255
 80051f0:	080051d1 	.word	0x080051d1
 80051f4:	080051d1 	.word	0x080051d1
 80051f8:	080051d1 	.word	0x080051d1
 80051fc:	080051d1 	.word	0x080051d1
 8005200:	08005255 	.word	0x08005255
 8005204:	080051d1 	.word	0x080051d1
 8005208:	080051d1 	.word	0x080051d1
 800520c:	080051d1 	.word	0x080051d1
 8005210:	080051d1 	.word	0x080051d1
 8005214:	08005361 	.word	0x08005361
 8005218:	08005285 	.word	0x08005285
 800521c:	08005343 	.word	0x08005343
 8005220:	080051d1 	.word	0x080051d1
 8005224:	080051d1 	.word	0x080051d1
 8005228:	08005383 	.word	0x08005383
 800522c:	080051d1 	.word	0x080051d1
 8005230:	08005285 	.word	0x08005285
 8005234:	080051d1 	.word	0x080051d1
 8005238:	080051d1 	.word	0x080051d1
 800523c:	0800534b 	.word	0x0800534b
 8005240:	680b      	ldr	r3, [r1, #0]
 8005242:	1d1a      	adds	r2, r3, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	600a      	str	r2, [r1, #0]
 8005248:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800524c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005250:	2301      	movs	r3, #1
 8005252:	e0a3      	b.n	800539c <_printf_i+0x1f4>
 8005254:	6825      	ldr	r5, [r4, #0]
 8005256:	6808      	ldr	r0, [r1, #0]
 8005258:	062e      	lsls	r6, r5, #24
 800525a:	f100 0304 	add.w	r3, r0, #4
 800525e:	d50a      	bpl.n	8005276 <_printf_i+0xce>
 8005260:	6805      	ldr	r5, [r0, #0]
 8005262:	600b      	str	r3, [r1, #0]
 8005264:	2d00      	cmp	r5, #0
 8005266:	da03      	bge.n	8005270 <_printf_i+0xc8>
 8005268:	232d      	movs	r3, #45	; 0x2d
 800526a:	426d      	negs	r5, r5
 800526c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005270:	485e      	ldr	r0, [pc, #376]	; (80053ec <_printf_i+0x244>)
 8005272:	230a      	movs	r3, #10
 8005274:	e019      	b.n	80052aa <_printf_i+0x102>
 8005276:	f015 0f40 	tst.w	r5, #64	; 0x40
 800527a:	6805      	ldr	r5, [r0, #0]
 800527c:	600b      	str	r3, [r1, #0]
 800527e:	bf18      	it	ne
 8005280:	b22d      	sxthne	r5, r5
 8005282:	e7ef      	b.n	8005264 <_printf_i+0xbc>
 8005284:	680b      	ldr	r3, [r1, #0]
 8005286:	6825      	ldr	r5, [r4, #0]
 8005288:	1d18      	adds	r0, r3, #4
 800528a:	6008      	str	r0, [r1, #0]
 800528c:	0628      	lsls	r0, r5, #24
 800528e:	d501      	bpl.n	8005294 <_printf_i+0xec>
 8005290:	681d      	ldr	r5, [r3, #0]
 8005292:	e002      	b.n	800529a <_printf_i+0xf2>
 8005294:	0669      	lsls	r1, r5, #25
 8005296:	d5fb      	bpl.n	8005290 <_printf_i+0xe8>
 8005298:	881d      	ldrh	r5, [r3, #0]
 800529a:	4854      	ldr	r0, [pc, #336]	; (80053ec <_printf_i+0x244>)
 800529c:	2f6f      	cmp	r7, #111	; 0x6f
 800529e:	bf0c      	ite	eq
 80052a0:	2308      	moveq	r3, #8
 80052a2:	230a      	movne	r3, #10
 80052a4:	2100      	movs	r1, #0
 80052a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052aa:	6866      	ldr	r6, [r4, #4]
 80052ac:	60a6      	str	r6, [r4, #8]
 80052ae:	2e00      	cmp	r6, #0
 80052b0:	bfa2      	ittt	ge
 80052b2:	6821      	ldrge	r1, [r4, #0]
 80052b4:	f021 0104 	bicge.w	r1, r1, #4
 80052b8:	6021      	strge	r1, [r4, #0]
 80052ba:	b90d      	cbnz	r5, 80052c0 <_printf_i+0x118>
 80052bc:	2e00      	cmp	r6, #0
 80052be:	d04d      	beq.n	800535c <_printf_i+0x1b4>
 80052c0:	4616      	mov	r6, r2
 80052c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80052c6:	fb03 5711 	mls	r7, r3, r1, r5
 80052ca:	5dc7      	ldrb	r7, [r0, r7]
 80052cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052d0:	462f      	mov	r7, r5
 80052d2:	42bb      	cmp	r3, r7
 80052d4:	460d      	mov	r5, r1
 80052d6:	d9f4      	bls.n	80052c2 <_printf_i+0x11a>
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d10b      	bne.n	80052f4 <_printf_i+0x14c>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	07df      	lsls	r7, r3, #31
 80052e0:	d508      	bpl.n	80052f4 <_printf_i+0x14c>
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	6861      	ldr	r1, [r4, #4]
 80052e6:	4299      	cmp	r1, r3
 80052e8:	bfde      	ittt	le
 80052ea:	2330      	movle	r3, #48	; 0x30
 80052ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052f4:	1b92      	subs	r2, r2, r6
 80052f6:	6122      	str	r2, [r4, #16]
 80052f8:	f8cd a000 	str.w	sl, [sp]
 80052fc:	464b      	mov	r3, r9
 80052fe:	aa03      	add	r2, sp, #12
 8005300:	4621      	mov	r1, r4
 8005302:	4640      	mov	r0, r8
 8005304:	f7ff fee2 	bl	80050cc <_printf_common>
 8005308:	3001      	adds	r0, #1
 800530a:	d14c      	bne.n	80053a6 <_printf_i+0x1fe>
 800530c:	f04f 30ff 	mov.w	r0, #4294967295
 8005310:	b004      	add	sp, #16
 8005312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005316:	4835      	ldr	r0, [pc, #212]	; (80053ec <_printf_i+0x244>)
 8005318:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	680e      	ldr	r6, [r1, #0]
 8005320:	061f      	lsls	r7, r3, #24
 8005322:	f856 5b04 	ldr.w	r5, [r6], #4
 8005326:	600e      	str	r6, [r1, #0]
 8005328:	d514      	bpl.n	8005354 <_printf_i+0x1ac>
 800532a:	07d9      	lsls	r1, r3, #31
 800532c:	bf44      	itt	mi
 800532e:	f043 0320 	orrmi.w	r3, r3, #32
 8005332:	6023      	strmi	r3, [r4, #0]
 8005334:	b91d      	cbnz	r5, 800533e <_printf_i+0x196>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	f023 0320 	bic.w	r3, r3, #32
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	2310      	movs	r3, #16
 8005340:	e7b0      	b.n	80052a4 <_printf_i+0xfc>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	f043 0320 	orr.w	r3, r3, #32
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	2378      	movs	r3, #120	; 0x78
 800534c:	4828      	ldr	r0, [pc, #160]	; (80053f0 <_printf_i+0x248>)
 800534e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005352:	e7e3      	b.n	800531c <_printf_i+0x174>
 8005354:	065e      	lsls	r6, r3, #25
 8005356:	bf48      	it	mi
 8005358:	b2ad      	uxthmi	r5, r5
 800535a:	e7e6      	b.n	800532a <_printf_i+0x182>
 800535c:	4616      	mov	r6, r2
 800535e:	e7bb      	b.n	80052d8 <_printf_i+0x130>
 8005360:	680b      	ldr	r3, [r1, #0]
 8005362:	6826      	ldr	r6, [r4, #0]
 8005364:	6960      	ldr	r0, [r4, #20]
 8005366:	1d1d      	adds	r5, r3, #4
 8005368:	600d      	str	r5, [r1, #0]
 800536a:	0635      	lsls	r5, r6, #24
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	d501      	bpl.n	8005374 <_printf_i+0x1cc>
 8005370:	6018      	str	r0, [r3, #0]
 8005372:	e002      	b.n	800537a <_printf_i+0x1d2>
 8005374:	0671      	lsls	r1, r6, #25
 8005376:	d5fb      	bpl.n	8005370 <_printf_i+0x1c8>
 8005378:	8018      	strh	r0, [r3, #0]
 800537a:	2300      	movs	r3, #0
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	4616      	mov	r6, r2
 8005380:	e7ba      	b.n	80052f8 <_printf_i+0x150>
 8005382:	680b      	ldr	r3, [r1, #0]
 8005384:	1d1a      	adds	r2, r3, #4
 8005386:	600a      	str	r2, [r1, #0]
 8005388:	681e      	ldr	r6, [r3, #0]
 800538a:	6862      	ldr	r2, [r4, #4]
 800538c:	2100      	movs	r1, #0
 800538e:	4630      	mov	r0, r6
 8005390:	f7fa ff56 	bl	8000240 <memchr>
 8005394:	b108      	cbz	r0, 800539a <_printf_i+0x1f2>
 8005396:	1b80      	subs	r0, r0, r6
 8005398:	6060      	str	r0, [r4, #4]
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	6123      	str	r3, [r4, #16]
 800539e:	2300      	movs	r3, #0
 80053a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053a4:	e7a8      	b.n	80052f8 <_printf_i+0x150>
 80053a6:	6923      	ldr	r3, [r4, #16]
 80053a8:	4632      	mov	r2, r6
 80053aa:	4649      	mov	r1, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	47d0      	blx	sl
 80053b0:	3001      	adds	r0, #1
 80053b2:	d0ab      	beq.n	800530c <_printf_i+0x164>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	079b      	lsls	r3, r3, #30
 80053b8:	d413      	bmi.n	80053e2 <_printf_i+0x23a>
 80053ba:	68e0      	ldr	r0, [r4, #12]
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	4298      	cmp	r0, r3
 80053c0:	bfb8      	it	lt
 80053c2:	4618      	movlt	r0, r3
 80053c4:	e7a4      	b.n	8005310 <_printf_i+0x168>
 80053c6:	2301      	movs	r3, #1
 80053c8:	4632      	mov	r2, r6
 80053ca:	4649      	mov	r1, r9
 80053cc:	4640      	mov	r0, r8
 80053ce:	47d0      	blx	sl
 80053d0:	3001      	adds	r0, #1
 80053d2:	d09b      	beq.n	800530c <_printf_i+0x164>
 80053d4:	3501      	adds	r5, #1
 80053d6:	68e3      	ldr	r3, [r4, #12]
 80053d8:	9903      	ldr	r1, [sp, #12]
 80053da:	1a5b      	subs	r3, r3, r1
 80053dc:	42ab      	cmp	r3, r5
 80053de:	dcf2      	bgt.n	80053c6 <_printf_i+0x21e>
 80053e0:	e7eb      	b.n	80053ba <_printf_i+0x212>
 80053e2:	2500      	movs	r5, #0
 80053e4:	f104 0619 	add.w	r6, r4, #25
 80053e8:	e7f5      	b.n	80053d6 <_printf_i+0x22e>
 80053ea:	bf00      	nop
 80053ec:	08005761 	.word	0x08005761
 80053f0:	08005772 	.word	0x08005772

080053f4 <_sbrk_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4d06      	ldr	r5, [pc, #24]	; (8005410 <_sbrk_r+0x1c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	4604      	mov	r4, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	602b      	str	r3, [r5, #0]
 8005400:	f7fb fb16 	bl	8000a30 <_sbrk>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_sbrk_r+0x1a>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_sbrk_r+0x1a>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	20004a04 	.word	0x20004a04

08005414 <__sread>:
 8005414:	b510      	push	{r4, lr}
 8005416:	460c      	mov	r4, r1
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 f8a0 	bl	8005560 <_read_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	bfab      	itete	ge
 8005424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005426:	89a3      	ldrhlt	r3, [r4, #12]
 8005428:	181b      	addge	r3, r3, r0
 800542a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800542e:	bfac      	ite	ge
 8005430:	6563      	strge	r3, [r4, #84]	; 0x54
 8005432:	81a3      	strhlt	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__swrite>:
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	461f      	mov	r7, r3
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	05db      	lsls	r3, r3, #23
 8005440:	4605      	mov	r5, r0
 8005442:	460c      	mov	r4, r1
 8005444:	4616      	mov	r6, r2
 8005446:	d505      	bpl.n	8005454 <__swrite+0x1e>
 8005448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544c:	2302      	movs	r3, #2
 800544e:	2200      	movs	r2, #0
 8005450:	f000 f868 	bl	8005524 <_lseek_r>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800545a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	4632      	mov	r2, r6
 8005462:	463b      	mov	r3, r7
 8005464:	4628      	mov	r0, r5
 8005466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	f000 b817 	b.w	800549c <_write_r>

0800546e <__sseek>:
 800546e:	b510      	push	{r4, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 f855 	bl	8005524 <_lseek_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	bf15      	itete	ne
 8005480:	6560      	strne	r0, [r4, #84]	; 0x54
 8005482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800548a:	81a3      	strheq	r3, [r4, #12]
 800548c:	bf18      	it	ne
 800548e:	81a3      	strhne	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__sclose>:
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 b813 	b.w	80054c0 <_close_r>
	...

0800549c <_write_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4d07      	ldr	r5, [pc, #28]	; (80054bc <_write_r+0x20>)
 80054a0:	4604      	mov	r4, r0
 80054a2:	4608      	mov	r0, r1
 80054a4:	4611      	mov	r1, r2
 80054a6:	2200      	movs	r2, #0
 80054a8:	602a      	str	r2, [r5, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f7fb fa6f 	bl	800098e <_write>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_write_r+0x1e>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_write_r+0x1e>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	20004a04 	.word	0x20004a04

080054c0 <_close_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4d06      	ldr	r5, [pc, #24]	; (80054dc <_close_r+0x1c>)
 80054c4:	2300      	movs	r3, #0
 80054c6:	4604      	mov	r4, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	602b      	str	r3, [r5, #0]
 80054cc:	f7fb fa7b 	bl	80009c6 <_close>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_close_r+0x1a>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b103      	cbz	r3, 80054da <_close_r+0x1a>
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	20004a04 	.word	0x20004a04

080054e0 <_fstat_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4d07      	ldr	r5, [pc, #28]	; (8005500 <_fstat_r+0x20>)
 80054e4:	2300      	movs	r3, #0
 80054e6:	4604      	mov	r4, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	4611      	mov	r1, r2
 80054ec:	602b      	str	r3, [r5, #0]
 80054ee:	f7fb fa76 	bl	80009de <_fstat>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	d102      	bne.n	80054fc <_fstat_r+0x1c>
 80054f6:	682b      	ldr	r3, [r5, #0]
 80054f8:	b103      	cbz	r3, 80054fc <_fstat_r+0x1c>
 80054fa:	6023      	str	r3, [r4, #0]
 80054fc:	bd38      	pop	{r3, r4, r5, pc}
 80054fe:	bf00      	nop
 8005500:	20004a04 	.word	0x20004a04

08005504 <_isatty_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d06      	ldr	r5, [pc, #24]	; (8005520 <_isatty_r+0x1c>)
 8005508:	2300      	movs	r3, #0
 800550a:	4604      	mov	r4, r0
 800550c:	4608      	mov	r0, r1
 800550e:	602b      	str	r3, [r5, #0]
 8005510:	f7fb fa75 	bl	80009fe <_isatty>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_isatty_r+0x1a>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_isatty_r+0x1a>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	20004a04 	.word	0x20004a04

08005524 <_lseek_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4d07      	ldr	r5, [pc, #28]	; (8005544 <_lseek_r+0x20>)
 8005528:	4604      	mov	r4, r0
 800552a:	4608      	mov	r0, r1
 800552c:	4611      	mov	r1, r2
 800552e:	2200      	movs	r2, #0
 8005530:	602a      	str	r2, [r5, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	f7fb fa6e 	bl	8000a14 <_lseek>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_lseek_r+0x1e>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_lseek_r+0x1e>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	20004a04 	.word	0x20004a04

08005548 <__malloc_lock>:
 8005548:	4801      	ldr	r0, [pc, #4]	; (8005550 <__malloc_lock+0x8>)
 800554a:	f7ff bb55 	b.w	8004bf8 <__retarget_lock_acquire_recursive>
 800554e:	bf00      	nop
 8005550:	200049fc 	.word	0x200049fc

08005554 <__malloc_unlock>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__malloc_unlock+0x8>)
 8005556:	f7ff bb50 	b.w	8004bfa <__retarget_lock_release_recursive>
 800555a:	bf00      	nop
 800555c:	200049fc 	.word	0x200049fc

08005560 <_read_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d07      	ldr	r5, [pc, #28]	; (8005580 <_read_r+0x20>)
 8005564:	4604      	mov	r4, r0
 8005566:	4608      	mov	r0, r1
 8005568:	4611      	mov	r1, r2
 800556a:	2200      	movs	r2, #0
 800556c:	602a      	str	r2, [r5, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	f7fb f9f0 	bl	8000954 <_read>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	d102      	bne.n	800557e <_read_r+0x1e>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	b103      	cbz	r3, 800557e <_read_r+0x1e>
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	20004a04 	.word	0x20004a04

08005584 <_init>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr

08005590 <_fini>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	bf00      	nop
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr
