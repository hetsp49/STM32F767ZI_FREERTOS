
Task02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c20  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f34  08004f34  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f3c  08004f3c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000498c  20000074  08004fb8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a00  08004fb8  00024a00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e69  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000299e  00000000  00000000  00032f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000358b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00036500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000407f  00000000  00000000  00037038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db32  00000000  00000000  0003b0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6cf6  00000000  00000000  00048be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f8df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ac  00000000  00000000  0013f934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08004e08 	.word	0x08004e08

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08004e08 	.word	0x08004e08

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96e 	b.w	8000534 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468c      	mov	ip, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	f040 8083 	bne.w	8000386 <__udivmoddi4+0x116>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d947      	bls.n	8000316 <__udivmoddi4+0xa6>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b142      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028c:	f1c2 0020 	rsb	r0, r2, #32
 8000290:	fa24 f000 	lsr.w	r0, r4, r0
 8000294:	4091      	lsls	r1, r2
 8000296:	4097      	lsls	r7, r2
 8000298:	ea40 0c01 	orr.w	ip, r0, r1
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbbc f6f8 	udiv	r6, ip, r8
 80002a8:	fa1f fe87 	uxth.w	lr, r7
 80002ac:	fb08 c116 	mls	r1, r8, r6, ip
 80002b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b4:	fb06 f10e 	mul.w	r1, r6, lr
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c2:	f080 8119 	bcs.w	80004f8 <__udivmoddi4+0x288>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8116 	bls.w	80004f8 <__udivmoddi4+0x288>
 80002cc:	3e02      	subs	r6, #2
 80002ce:	443b      	add	r3, r7
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	193c      	adds	r4, r7, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8105 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f240 8102 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002f8:	3802      	subs	r0, #2
 80002fa:	443c      	add	r4, r7
 80002fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000300:	eba4 040e 	sub.w	r4, r4, lr
 8000304:	2600      	movs	r6, #0
 8000306:	b11d      	cbz	r5, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c5 4300 	strd	r4, r3, [r5]
 8000310:	4631      	mov	r1, r6
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xaa>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	2a00      	cmp	r2, #0
 8000320:	d150      	bne.n	80003c4 <__udivmoddi4+0x154>
 8000322:	1bcb      	subs	r3, r1, r7
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	fa1f f887 	uxth.w	r8, r7
 800032c:	2601      	movs	r6, #1
 800032e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000332:	0c21      	lsrs	r1, r4, #16
 8000334:	fb0e 331c 	mls	r3, lr, ip, r3
 8000338:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800033c:	fb08 f30c 	mul.w	r3, r8, ip
 8000340:	428b      	cmp	r3, r1
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000344:	1879      	adds	r1, r7, r1
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0xe2>
 800034c:	428b      	cmp	r3, r1
 800034e:	f200 80e9 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 8000352:	4684      	mov	ip, r0
 8000354:	1ac9      	subs	r1, r1, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x10c>
 800036c:	193c      	adds	r4, r7, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x10a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80d9 	bhi.w	800052c <__udivmoddi4+0x2bc>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e7bf      	b.n	8000306 <__udivmoddi4+0x96>
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x12e>
 800038a:	2d00      	cmp	r5, #0
 800038c:	f000 80b1 	beq.w	80004f2 <__udivmoddi4+0x282>
 8000390:	2600      	movs	r6, #0
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	4630      	mov	r0, r6
 8000398:	4631      	mov	r1, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f683 	clz	r6, r3
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d14a      	bne.n	800043c <__udivmoddi4+0x1cc>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0x140>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80b8 	bhi.w	8000520 <__udivmoddi4+0x2b0>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0103 	sbc.w	r1, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	468c      	mov	ip, r1
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d0a8      	beq.n	8000310 <__udivmoddi4+0xa0>
 80003be:	e9c5 4c00 	strd	r4, ip, [r5]
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0xa0>
 80003c4:	f1c2 0320 	rsb	r3, r2, #32
 80003c8:	fa20 f603 	lsr.w	r6, r0, r3
 80003cc:	4097      	lsls	r7, r2
 80003ce:	fa01 f002 	lsl.w	r0, r1, r2
 80003d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d6:	40d9      	lsrs	r1, r3
 80003d8:	4330      	orrs	r0, r6
 80003da:	0c03      	lsrs	r3, r0, #16
 80003dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e0:	fa1f f887 	uxth.w	r8, r7
 80003e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb06 f108 	mul.w	r1, r6, r8
 80003f0:	4299      	cmp	r1, r3
 80003f2:	fa04 f402 	lsl.w	r4, r4, r2
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x19c>
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003fe:	f080 808d 	bcs.w	800051c <__udivmoddi4+0x2ac>
 8000402:	4299      	cmp	r1, r3
 8000404:	f240 808a 	bls.w	800051c <__udivmoddi4+0x2ac>
 8000408:	3e02      	subs	r6, #2
 800040a:	443b      	add	r3, r7
 800040c:	1a5b      	subs	r3, r3, r1
 800040e:	b281      	uxth	r1, r0
 8000410:	fbb3 f0fe 	udiv	r0, r3, lr
 8000414:	fb0e 3310 	mls	r3, lr, r0, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb00 f308 	mul.w	r3, r0, r8
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x1c4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f100 3cff 	add.w	ip, r0, #4294967295
 800042a:	d273      	bcs.n	8000514 <__udivmoddi4+0x2a4>
 800042c:	428b      	cmp	r3, r1
 800042e:	d971      	bls.n	8000514 <__udivmoddi4+0x2a4>
 8000430:	3802      	subs	r0, #2
 8000432:	4439      	add	r1, r7
 8000434:	1acb      	subs	r3, r1, r3
 8000436:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800043a:	e778      	b.n	800032e <__udivmoddi4+0xbe>
 800043c:	f1c6 0c20 	rsb	ip, r6, #32
 8000440:	fa03 f406 	lsl.w	r4, r3, r6
 8000444:	fa22 f30c 	lsr.w	r3, r2, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	fa20 f70c 	lsr.w	r7, r0, ip
 800044e:	fa01 f306 	lsl.w	r3, r1, r6
 8000452:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000456:	fa21 f10c 	lsr.w	r1, r1, ip
 800045a:	431f      	orrs	r7, r3
 800045c:	0c3b      	lsrs	r3, r7, #16
 800045e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000462:	fa1f f884 	uxth.w	r8, r4
 8000466:	fb0e 1119 	mls	r1, lr, r9, r1
 800046a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800046e:	fb09 fa08 	mul.w	sl, r9, r8
 8000472:	458a      	cmp	sl, r1
 8000474:	fa02 f206 	lsl.w	r2, r2, r6
 8000478:	fa00 f306 	lsl.w	r3, r0, r6
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x220>
 800047e:	1861      	adds	r1, r4, r1
 8000480:	f109 30ff 	add.w	r0, r9, #4294967295
 8000484:	d248      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 8000486:	458a      	cmp	sl, r1
 8000488:	d946      	bls.n	8000518 <__udivmoddi4+0x2a8>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4421      	add	r1, r4
 8000490:	eba1 010a 	sub.w	r1, r1, sl
 8000494:	b2bf      	uxth	r7, r7
 8000496:	fbb1 f0fe 	udiv	r0, r1, lr
 800049a:	fb0e 1110 	mls	r1, lr, r0, r1
 800049e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004a2:	fb00 f808 	mul.w	r8, r0, r8
 80004a6:	45b8      	cmp	r8, r7
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x24a>
 80004aa:	19e7      	adds	r7, r4, r7
 80004ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b0:	d22e      	bcs.n	8000510 <__udivmoddi4+0x2a0>
 80004b2:	45b8      	cmp	r8, r7
 80004b4:	d92c      	bls.n	8000510 <__udivmoddi4+0x2a0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4427      	add	r7, r4
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	eba7 0708 	sub.w	r7, r7, r8
 80004c2:	fba0 8902 	umull	r8, r9, r0, r2
 80004c6:	454f      	cmp	r7, r9
 80004c8:	46c6      	mov	lr, r8
 80004ca:	4649      	mov	r1, r9
 80004cc:	d31a      	bcc.n	8000504 <__udivmoddi4+0x294>
 80004ce:	d017      	beq.n	8000500 <__udivmoddi4+0x290>
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x27a>
 80004d2:	ebb3 020e 	subs.w	r2, r3, lr
 80004d6:	eb67 0701 	sbc.w	r7, r7, r1
 80004da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004de:	40f2      	lsrs	r2, r6
 80004e0:	ea4c 0202 	orr.w	r2, ip, r2
 80004e4:	40f7      	lsrs	r7, r6
 80004e6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ea:	2600      	movs	r6, #0
 80004ec:	4631      	mov	r1, r6
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e70b      	b.n	8000310 <__udivmoddi4+0xa0>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0x60>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fd      	b.n	80002fc <__udivmoddi4+0x8c>
 8000500:	4543      	cmp	r3, r8
 8000502:	d2e5      	bcs.n	80004d0 <__udivmoddi4+0x260>
 8000504:	ebb8 0e02 	subs.w	lr, r8, r2
 8000508:	eb69 0104 	sbc.w	r1, r9, r4
 800050c:	3801      	subs	r0, #1
 800050e:	e7df      	b.n	80004d0 <__udivmoddi4+0x260>
 8000510:	4608      	mov	r0, r1
 8000512:	e7d2      	b.n	80004ba <__udivmoddi4+0x24a>
 8000514:	4660      	mov	r0, ip
 8000516:	e78d      	b.n	8000434 <__udivmoddi4+0x1c4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7b9      	b.n	8000490 <__udivmoddi4+0x220>
 800051c:	4666      	mov	r6, ip
 800051e:	e775      	b.n	800040c <__udivmoddi4+0x19c>
 8000520:	4630      	mov	r0, r6
 8000522:	e74a      	b.n	80003ba <__udivmoddi4+0x14a>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	4439      	add	r1, r7
 800052a:	e713      	b.n	8000354 <__udivmoddi4+0xe4>
 800052c:	3802      	subs	r0, #2
 800052e:	443c      	add	r4, r7
 8000530:	e724      	b.n	800037c <__udivmoddi4+0x10c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fa35 	bl	80009aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f824 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f87e 	bl	8000644 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000548:	f001 f9ce 	bl	80018e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, /*(void *)&person1*/NULL, &defaultTask_attributes);
 800054c:	4a09      	ldr	r2, [pc, #36]	; (8000574 <main+0x3c>)
 800054e:	2100      	movs	r1, #0
 8000550:	4809      	ldr	r0, [pc, #36]	; (8000578 <main+0x40>)
 8000552:	f001 fa33 	bl	80019bc <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <main+0x44>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800055c:	4a08      	ldr	r2, [pc, #32]	; (8000580 <main+0x48>)
 800055e:	2100      	movs	r1, #0
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x4c>)
 8000562:	f001 fa2b 	bl	80019bc <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <main+0x50>)
 800056a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056c:	f001 f9f0 	bl	8001950 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x38>
 8000572:	bf00      	nop
 8000574:	08004e78 	.word	0x08004e78
 8000578:	080006a9 	.word	0x080006a9
 800057c:	200049a4 	.word	0x200049a4
 8000580:	08004e9c 	.word	0x08004e9c
 8000584:	080006d1 	.word	0x080006d1
 8000588:	200049a8 	.word	0x200049a8

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2234      	movs	r2, #52	; 0x34
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 ff66 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xb0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xb0>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xb0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <SystemClock_Config+0xb4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <SystemClock_Config+0xb4>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <SystemClock_Config+0xb4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fd1d 	bl	8001038 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000604:	f000 f878 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f000 ffb6 	bl	8001594 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800062e:	f000 f863 	bl	80006f8 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_GPIO_Init+0x5c>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <MX_GPIO_Init+0x5c>)
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	6313      	str	r3, [r2, #48]	; 0x30
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_GPIO_Init+0x5c>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	f003 0302 	and.w	r3, r3, #2
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, gled_Pin|rled_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f244 0101 	movw	r1, #16385	; 0x4001
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <MX_GPIO_Init+0x60>)
 8000678:	f000 fcaa 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : gled_Pin rled_Pin */
  GPIO_InitStruct.Pin = gled_Pin|rled_Pin;
 800067c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000680:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x60>)
 8000694:	f000 faf0 	bl	8000c78 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020400 	.word	0x40020400

080006a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *pvParameters)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  printf("Task1 is running  \r\n");
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <StartDefaultTask+0x20>)
 80006b2:	f003 ff51 	bl	8004558 <puts>
	  HAL_GPIO_TogglePin(gled_GPIO_Port, gled_Pin);
 80006b6:	2101      	movs	r1, #1
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <StartDefaultTask+0x24>)
 80006ba:	f000 fca2 	bl	8001002 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c2:	f000 f9cf 	bl	8000a64 <HAL_Delay>
	  printf("Task1 is running  \r\n");
 80006c6:	e7f3      	b.n	80006b0 <StartDefaultTask+0x8>
 80006c8:	08004e38 	.word	0x08004e38
 80006cc:	40020400 	.word	0x40020400

080006d0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  while(1)
  {
	  printf("Task2 is running  \r\n");
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <StartTask02+0x20>)
 80006da:	f003 ff3d 	bl	8004558 <puts>
	  HAL_GPIO_TogglePin(rled_GPIO_Port, rled_Pin);
 80006de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <StartTask02+0x24>)
 80006e4:	f000 fc8d 	bl	8001002 <HAL_GPIO_TogglePin>
	 vTaskDelay(100);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f002 f9a9 	bl	8002a40 <vTaskDelay>
	  printf("Task2 is running  \r\n");
 80006ee:	e7f3      	b.n	80006d8 <StartTask02+0x8>
 80006f0:	08004e4c 	.word	0x08004e4c
 80006f4:	40020400 	.word	0x40020400

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <HAL_MspInit+0x4c>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	4a10      	ldr	r2, [pc, #64]	; (8000750 <HAL_MspInit+0x4c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6413      	str	r3, [r2, #64]	; 0x40
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_MspInit+0x4c>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <HAL_MspInit+0x4c>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <HAL_MspInit+0x4c>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6453      	str	r3, [r2, #68]	; 0x44
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <HAL_MspInit+0x4c>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	210f      	movs	r1, #15
 800073e:	f06f 0001 	mvn.w	r0, #1
 8000742:	f000 fa70 	bl	8000c26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f000 f94e 	bl	8000a24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000788:	f002 fdde 	bl	8003348 <xTaskGetSchedulerState>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	d001      	beq.n	8000796 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000792:	f003 fbb9 	bl	8003f08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <ITM_SendChar+0x48>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <ITM_SendChar+0x48>)
 80007ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007b0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <ITM_SendChar+0x4c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a0c      	ldr	r2, [pc, #48]	; (80007e8 <ITM_SendChar+0x4c>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007be:	bf00      	nop
 80007c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f8      	beq.n	80007c0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	6013      	str	r3, [r2, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000edfc 	.word	0xe000edfc
 80007e8:	e0000e00 	.word	0xe0000e00

080007ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e00a      	b.n	8000814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007fe:	f3af 8000 	nop.w
 8000802:	4601      	mov	r1, r0
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	b2ca      	uxtb	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3301      	adds	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbf0      	blt.n	80007fe <_read+0x12>
	}

return len;
 800081c:	687b      	ldr	r3, [r7, #4]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <_write>:

 int _write(int file, char *ptr, int len)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e009      	b.n	800084c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffab 	bl	800079c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	dbf1      	blt.n	8000838 <_write+0x12>
	}
	return len;
 8000854:	687b      	ldr	r3, [r7, #4]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <_close>:

int _close(int file)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	return -1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000886:	605a      	str	r2, [r3, #4]
	return 0;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <_isatty>:

int _isatty(int file)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
	return 1;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
	return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f003 fd80 	bl	80043fc <__errno>
 80008fc:	4603      	mov	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <_sbrk+0x64>)
 8000918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20080000 	.word	0x20080000
 8000928:	00000400 	.word	0x00000400
 800092c:	20000090 	.word	0x20000090
 8000930:	20004a00 	.word	0x20004a00

08000934 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	; (8000998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000982:	f7ff ffd7 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f003 fd3f 	bl	8004408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fdd5 	bl	8000538 <main>
  bx  lr    
 800098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800099c:	08004f44 	.word	0x08004f44
  ldr r2, =_sbss
 80009a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009a4:	20004a00 	.word	0x20004a00

080009a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>

080009aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ae:	2003      	movs	r0, #3
 80009b0:	f000 f92e 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b4:	200f      	movs	r0, #15
 80009b6:	f000 f805 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ba:	f7ff fea3 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f93b 	bl	8000c5e <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 f911 	bl	8000c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	200049ac 	.word	0x200049ac

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200049ac 	.word	0x200049ac

08000a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a6c:	f7ff ffee 	bl	8000a4c <HAL_GetTick>
 8000a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d005      	beq.n	8000a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_Delay+0x44>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a8a:	bf00      	nop
 8000a8c:	f7ff ffde 	bl	8000a4c <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d8f7      	bhi.n	8000a8c <HAL_Delay+0x28>
  {
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <__NVIC_SetPriorityGrouping+0x40>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ada:	4a04      	ldr	r2, [pc, #16]	; (8000aec <__NVIC_SetPriorityGrouping+0x40>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00
 8000af0:	05fa0000 	.word	0x05fa0000

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff47 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff5c 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff8e 	bl	8000b64 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5d 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffb0 	bl	8000bcc <SysTick_Config>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
 8000c96:	e175      	b.n	8000f84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f040 8164 	bne.w	8000f7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d005      	beq.n	8000cce <HAL_GPIO_Init+0x56>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d130      	bne.n	8000d30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	091b      	lsrs	r3, r3, #4
 8000d1a:	f003 0201 	and.w	r2, r3, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d017      	beq.n	8000d6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d123      	bne.n	8000dc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	08da      	lsrs	r2, r3, #3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3208      	adds	r2, #8
 8000d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	220f      	movs	r2, #15
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	691a      	ldr	r2, [r3, #16]
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3208      	adds	r2, #8
 8000dba:	69b9      	ldr	r1, [r7, #24]
 8000dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0203 	and.w	r2, r3, #3
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f000 80be 	beq.w	8000f7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	4b66      	ldr	r3, [pc, #408]	; (8000f9c <HAL_GPIO_Init+0x324>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a65      	ldr	r2, [pc, #404]	; (8000f9c <HAL_GPIO_Init+0x324>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b63      	ldr	r3, [pc, #396]	; (8000f9c <HAL_GPIO_Init+0x324>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e1a:	4a61      	ldr	r2, [pc, #388]	; (8000fa0 <HAL_GPIO_Init+0x328>)
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3302      	adds	r3, #2
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a58      	ldr	r2, [pc, #352]	; (8000fa4 <HAL_GPIO_Init+0x32c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d037      	beq.n	8000eb6 <HAL_GPIO_Init+0x23e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a57      	ldr	r2, [pc, #348]	; (8000fa8 <HAL_GPIO_Init+0x330>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d031      	beq.n	8000eb2 <HAL_GPIO_Init+0x23a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a56      	ldr	r2, [pc, #344]	; (8000fac <HAL_GPIO_Init+0x334>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d02b      	beq.n	8000eae <HAL_GPIO_Init+0x236>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a55      	ldr	r2, [pc, #340]	; (8000fb0 <HAL_GPIO_Init+0x338>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d025      	beq.n	8000eaa <HAL_GPIO_Init+0x232>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a54      	ldr	r2, [pc, #336]	; (8000fb4 <HAL_GPIO_Init+0x33c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d01f      	beq.n	8000ea6 <HAL_GPIO_Init+0x22e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a53      	ldr	r2, [pc, #332]	; (8000fb8 <HAL_GPIO_Init+0x340>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d019      	beq.n	8000ea2 <HAL_GPIO_Init+0x22a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a52      	ldr	r2, [pc, #328]	; (8000fbc <HAL_GPIO_Init+0x344>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x226>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a51      	ldr	r2, [pc, #324]	; (8000fc0 <HAL_GPIO_Init+0x348>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x222>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a50      	ldr	r2, [pc, #320]	; (8000fc4 <HAL_GPIO_Init+0x34c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x21e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <HAL_GPIO_Init+0x350>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x21a>
 8000e8e:	2309      	movs	r3, #9
 8000e90:	e012      	b.n	8000eb8 <HAL_GPIO_Init+0x240>
 8000e92:	230a      	movs	r3, #10
 8000e94:	e010      	b.n	8000eb8 <HAL_GPIO_Init+0x240>
 8000e96:	2308      	movs	r3, #8
 8000e98:	e00e      	b.n	8000eb8 <HAL_GPIO_Init+0x240>
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	e00c      	b.n	8000eb8 <HAL_GPIO_Init+0x240>
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	e00a      	b.n	8000eb8 <HAL_GPIO_Init+0x240>
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	e008      	b.n	8000eb8 <HAL_GPIO_Init+0x240>
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_Init+0x240>
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e004      	b.n	8000eb8 <HAL_GPIO_Init+0x240>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e002      	b.n	8000eb8 <HAL_GPIO_Init+0x240>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <HAL_GPIO_Init+0x240>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	69fa      	ldr	r2, [r7, #28]
 8000eba:	f002 0203 	and.w	r2, r2, #3
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	4093      	lsls	r3, r2
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ec8:	4935      	ldr	r1, [pc, #212]	; (8000fa0 <HAL_GPIO_Init+0x328>)
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <HAL_GPIO_Init+0x354>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000efa:	4a34      	ldr	r2, [pc, #208]	; (8000fcc <HAL_GPIO_Init+0x354>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <HAL_GPIO_Init+0x354>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f24:	4a29      	ldr	r2, [pc, #164]	; (8000fcc <HAL_GPIO_Init+0x354>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HAL_GPIO_Init+0x354>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <HAL_GPIO_Init+0x354>)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_GPIO_Init+0x354>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <HAL_GPIO_Init+0x354>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3301      	adds	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	2b0f      	cmp	r3, #15
 8000f88:	f67f ae86 	bls.w	8000c98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40013800 	.word	0x40013800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40020c00 	.word	0x40020c00
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40021400 	.word	0x40021400
 8000fbc:	40021800 	.word	0x40021800
 8000fc0:	40021c00 	.word	0x40021c00
 8000fc4:	40022000 	.word	0x40022000
 8000fc8:	40022400 	.word	0x40022400
 8000fcc:	40013c00 	.word	0x40013c00

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000fec:	e003      	b.n	8000ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	041a      	lsls	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	619a      	str	r2, [r3, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4013      	ands	r3, r2
 800101a:	041a      	lsls	r2, r3, #16
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43d9      	mvns	r1, r3
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	400b      	ands	r3, r1
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	619a      	str	r2, [r3, #24]
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e29b      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8087 	beq.w	800116a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800105c:	4b96      	ldr	r3, [pc, #600]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b04      	cmp	r3, #4
 8001066:	d00c      	beq.n	8001082 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001068:	4b93      	ldr	r3, [pc, #588]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d112      	bne.n	800109a <HAL_RCC_OscConfig+0x62>
 8001074:	4b90      	ldr	r3, [pc, #576]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001080:	d10b      	bne.n	800109a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001082:	4b8d      	ldr	r3, [pc, #564]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d06c      	beq.n	8001168 <HAL_RCC_OscConfig+0x130>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d168      	bne.n	8001168 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e275      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x7a>
 80010a4:	4b84      	ldr	r3, [pc, #528]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a83      	ldr	r2, [pc, #524]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e02e      	b.n	8001110 <HAL_RCC_OscConfig+0xd8>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x9c>
 80010ba:	4b7f      	ldr	r3, [pc, #508]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a7e      	ldr	r2, [pc, #504]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b7c      	ldr	r3, [pc, #496]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a7b      	ldr	r2, [pc, #492]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e01d      	b.n	8001110 <HAL_RCC_OscConfig+0xd8>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0xc0>
 80010de:	4b76      	ldr	r3, [pc, #472]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a75      	ldr	r2, [pc, #468]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b73      	ldr	r3, [pc, #460]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a72      	ldr	r2, [pc, #456]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0xd8>
 80010f8:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a6e      	ldr	r2, [pc, #440]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80010fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b6c      	ldr	r3, [pc, #432]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a6b      	ldr	r2, [pc, #428]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001118:	f7ff fc98 	bl	8000a4c <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fc94 	bl	8000a4c <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e229      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b61      	ldr	r3, [pc, #388]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0xe8>
 800113e:	e014      	b.n	800116a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001140:	f7ff fc84 	bl	8000a4c <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fc80 	bl	8000a4c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e215      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	4b57      	ldr	r3, [pc, #348]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x110>
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d069      	beq.n	800124a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001176:	4b50      	ldr	r3, [pc, #320]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001182:	4b4d      	ldr	r3, [pc, #308]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b08      	cmp	r3, #8
 800118c:	d11c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x190>
 800118e:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d116      	bne.n	80011c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	4b47      	ldr	r3, [pc, #284]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <HAL_RCC_OscConfig+0x17a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e1e9      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b41      	ldr	r3, [pc, #260]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	493d      	ldr	r1, [pc, #244]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	e040      	b.n	800124a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d023      	beq.n	8001218 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d0:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a38      	ldr	r2, [pc, #224]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011dc:	f7ff fc36 	bl	8000a4c <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e4:	f7ff fc32 	bl	8000a4c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1c7      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f6:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4929      	ldr	r1, [pc, #164]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]
 8001216:	e018      	b.n	800124a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 800121e:	f023 0301 	bic.w	r3, r3, #1
 8001222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fc12 	bl	8000a4c <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fc0e 	bl	8000a4c <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e1a3      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d038      	beq.n	80012c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d019      	beq.n	8001292 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001262:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126a:	f7ff fbef 	bl	8000a4c <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff fbeb 	bl	8000a4c <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e180      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x23a>
 8001290:	e01a      	b.n	80012c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_RCC_OscConfig+0x280>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129e:	f7ff fbd5 	bl	8000a4c <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff fbd1 	bl	8000a4c <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d903      	bls.n	80012bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e166      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
 80012b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	4b92      	ldr	r3, [pc, #584]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80012be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ee      	bne.n	80012a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80a4 	beq.w	800141e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b8c      	ldr	r3, [pc, #560]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10d      	bne.n	80012fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b89      	ldr	r3, [pc, #548]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a88      	ldr	r2, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b86      	ldr	r3, [pc, #536]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fa:	2301      	movs	r3, #1
 80012fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fe:	4b83      	ldr	r3, [pc, #524]	; (800150c <HAL_RCC_OscConfig+0x4d4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001306:	2b00      	cmp	r3, #0
 8001308:	d118      	bne.n	800133c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800130a:	4b80      	ldr	r3, [pc, #512]	; (800150c <HAL_RCC_OscConfig+0x4d4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a7f      	ldr	r2, [pc, #508]	; (800150c <HAL_RCC_OscConfig+0x4d4>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001316:	f7ff fb99 	bl	8000a4c <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131e:	f7ff fb95 	bl	8000a4c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b64      	cmp	r3, #100	; 0x64
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e12a      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001330:	4b76      	ldr	r3, [pc, #472]	; (800150c <HAL_RCC_OscConfig+0x4d4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d106      	bne.n	8001352 <HAL_RCC_OscConfig+0x31a>
 8001344:	4b70      	ldr	r3, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001348:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6713      	str	r3, [r2, #112]	; 0x70
 8001350:	e02d      	b.n	80013ae <HAL_RCC_OscConfig+0x376>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x33c>
 800135a:	4b6b      	ldr	r3, [pc, #428]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	4a6a      	ldr	r2, [pc, #424]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	6713      	str	r3, [r2, #112]	; 0x70
 8001366:	4b68      	ldr	r3, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	4a67      	ldr	r2, [pc, #412]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 800136c:	f023 0304 	bic.w	r3, r3, #4
 8001370:	6713      	str	r3, [r2, #112]	; 0x70
 8001372:	e01c      	b.n	80013ae <HAL_RCC_OscConfig+0x376>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b05      	cmp	r3, #5
 800137a:	d10c      	bne.n	8001396 <HAL_RCC_OscConfig+0x35e>
 800137c:	4b62      	ldr	r3, [pc, #392]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a61      	ldr	r2, [pc, #388]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a5e      	ldr	r2, [pc, #376]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
 8001394:	e00b      	b.n	80013ae <HAL_RCC_OscConfig+0x376>
 8001396:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a5b      	ldr	r2, [pc, #364]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
 80013a2:	4b59      	ldr	r3, [pc, #356]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	4a58      	ldr	r2, [pc, #352]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d015      	beq.n	80013e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b6:	f7ff fb49 	bl	8000a4c <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fb45 	bl	8000a4c <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e0d8      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d4:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0ee      	beq.n	80013be <HAL_RCC_OscConfig+0x386>
 80013e0:	e014      	b.n	800140c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e2:	f7ff fb33 	bl	8000a4c <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e8:	e00a      	b.n	8001400 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ea:	f7ff fb2f 	bl	8000a4c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e0c2      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001400:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1ee      	bne.n	80013ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d105      	bne.n	800141e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001412:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 8001418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 80ae 	beq.w	8001584 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	d06d      	beq.n	8001510 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d14b      	bne.n	80014d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a31      	ldr	r2, [pc, #196]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 8001442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fb00 	bl	8000a4c <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff fafc 	bl	8000a4c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e091      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69da      	ldr	r2, [r3, #28]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	019b      	lsls	r3, r3, #6
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	3b01      	subs	r3, #1
 8001488:	041b      	lsls	r3, r3, #16
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	061b      	lsls	r3, r3, #24
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	071b      	lsls	r3, r3, #28
 800149a:	491b      	ldr	r1, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a18      	ldr	r2, [pc, #96]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80014a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff face 	bl	8000a4c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff faca 	bl	8000a4c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e05f      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x47c>
 80014d2:	e057      	b.n	8001584 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80014da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fab4 	bl	8000a4c <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fab0 	bl	8000a4c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e045      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fa:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_RCC_OscConfig+0x4d0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x4b0>
 8001506:	e03d      	b.n	8001584 <HAL_RCC_OscConfig+0x54c>
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_RCC_OscConfig+0x558>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d030      	beq.n	8001580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d129      	bne.n	8001580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d122      	bne.n	8001580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001540:	4013      	ands	r3, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001546:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001548:	4293      	cmp	r3, r2
 800154a:	d119      	bne.n	8001580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	085b      	lsrs	r3, r3, #1
 8001558:	3b01      	subs	r3, #1
 800155a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d10f      	bne.n	8001580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0d0      	b.n	800174e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b6a      	ldr	r3, [pc, #424]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d910      	bls.n	80015dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b67      	ldr	r3, [pc, #412]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 020f 	bic.w	r2, r3, #15
 80015c2:	4965      	ldr	r1, [pc, #404]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b63      	ldr	r3, [pc, #396]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0b8      	b.n	800174e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a58      	ldr	r2, [pc, #352]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 80015fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a52      	ldr	r2, [pc, #328]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001616:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	494d      	ldr	r1, [pc, #308]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d040      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d115      	bne.n	8001676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e07f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e073      	b.n	800174e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e06b      	b.n	800174e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4936      	ldr	r1, [pc, #216]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001688:	f7ff f9e0 	bl	8000a4c <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff f9dc 	bl	8000a4c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e053      	b.n	800174e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d210      	bcs.n	80016e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 020f 	bic.w	r2, r3, #15
 80016ce:	4922      	ldr	r1, [pc, #136]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e032      	b.n	800174e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4916      	ldr	r1, [pc, #88]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	490e      	ldr	r1, [pc, #56]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001726:	f000 f821 	bl	800176c <HAL_RCC_GetSysClockFreq>
 800172a:	4602      	mov	r2, r0
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	490a      	ldr	r1, [pc, #40]	; (8001760 <HAL_RCC_ClockConfig+0x1cc>)
 8001738:	5ccb      	ldrb	r3, [r1, r3]
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1d0>)
 8001740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1d4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f93c 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00
 800175c:	40023800 	.word	0x40023800
 8001760:	08004ec0 	.word	0x08004ec0
 8001764:	20000000 	.word	0x20000000
 8001768:	20000004 	.word	0x20000004

0800176c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	b5b0      	push	{r4, r5, r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001772:	2100      	movs	r1, #0
 8001774:	6079      	str	r1, [r7, #4]
 8001776:	2100      	movs	r1, #0
 8001778:	60f9      	str	r1, [r7, #12]
 800177a:	2100      	movs	r1, #0
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800177e:	2100      	movs	r1, #0
 8001780:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001782:	4952      	ldr	r1, [pc, #328]	; (80018cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001784:	6889      	ldr	r1, [r1, #8]
 8001786:	f001 010c 	and.w	r1, r1, #12
 800178a:	2908      	cmp	r1, #8
 800178c:	d00d      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x3e>
 800178e:	2908      	cmp	r1, #8
 8001790:	f200 8094 	bhi.w	80018bc <HAL_RCC_GetSysClockFreq+0x150>
 8001794:	2900      	cmp	r1, #0
 8001796:	d002      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x32>
 8001798:	2904      	cmp	r1, #4
 800179a:	d003      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x38>
 800179c:	e08e      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800179e:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80017a0:	60bb      	str	r3, [r7, #8]
      break;
 80017a2:	e08e      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017a4:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80017a6:	60bb      	str	r3, [r7, #8]
      break;
 80017a8:	e08b      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017aa:	4948      	ldr	r1, [pc, #288]	; (80018cc <HAL_RCC_GetSysClockFreq+0x160>)
 80017ac:	6849      	ldr	r1, [r1, #4]
 80017ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80017b2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80017b4:	4945      	ldr	r1, [pc, #276]	; (80018cc <HAL_RCC_GetSysClockFreq+0x160>)
 80017b6:	6849      	ldr	r1, [r1, #4]
 80017b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80017bc:	2900      	cmp	r1, #0
 80017be:	d024      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c0:	4942      	ldr	r1, [pc, #264]	; (80018cc <HAL_RCC_GetSysClockFreq+0x160>)
 80017c2:	6849      	ldr	r1, [r1, #4]
 80017c4:	0989      	lsrs	r1, r1, #6
 80017c6:	4608      	mov	r0, r1
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80017d0:	f04f 0500 	mov.w	r5, #0
 80017d4:	ea00 0204 	and.w	r2, r0, r4
 80017d8:	ea01 0305 	and.w	r3, r1, r5
 80017dc:	493d      	ldr	r1, [pc, #244]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80017de:	fb01 f003 	mul.w	r0, r1, r3
 80017e2:	2100      	movs	r1, #0
 80017e4:	fb01 f102 	mul.w	r1, r1, r2
 80017e8:	1844      	adds	r4, r0, r1
 80017ea:	493a      	ldr	r1, [pc, #232]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80017ec:	fba2 0101 	umull	r0, r1, r2, r1
 80017f0:	1863      	adds	r3, r4, r1
 80017f2:	4619      	mov	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	f7fe fd20 	bl	8000240 <__aeabi_uldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4613      	mov	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e04a      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <HAL_RCC_GetSysClockFreq+0x160>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	099b      	lsrs	r3, r3, #6
 8001810:	461a      	mov	r2, r3
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	f240 10ff 	movw	r0, #511	; 0x1ff
 800181a:	f04f 0100 	mov.w	r1, #0
 800181e:	ea02 0400 	and.w	r4, r2, r0
 8001822:	ea03 0501 	and.w	r5, r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	014b      	lsls	r3, r1, #5
 8001834:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001838:	0142      	lsls	r2, r0, #5
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	1b00      	subs	r0, r0, r4
 8001840:	eb61 0105 	sbc.w	r1, r1, r5
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	018b      	lsls	r3, r1, #6
 800184e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001852:	0182      	lsls	r2, r0, #6
 8001854:	1a12      	subs	r2, r2, r0
 8001856:	eb63 0301 	sbc.w	r3, r3, r1
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	00d9      	lsls	r1, r3, #3
 8001864:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001868:	00d0      	lsls	r0, r2, #3
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	1912      	adds	r2, r2, r4
 8001870:	eb45 0303 	adc.w	r3, r5, r3
 8001874:	f04f 0000 	mov.w	r0, #0
 8001878:	f04f 0100 	mov.w	r1, #0
 800187c:	0299      	lsls	r1, r3, #10
 800187e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001882:	0290      	lsls	r0, r2, #10
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	461a      	mov	r2, r3
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	f7fe fcd4 	bl	8000240 <__aeabi_uldivmod>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4613      	mov	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_RCC_GetSysClockFreq+0x160>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	3301      	adds	r3, #1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	60bb      	str	r3, [r7, #8]
      break;
 80018ba:	e002      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80018be:	60bb      	str	r3, [r7, #8]
      break;
 80018c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c2:	68bb      	ldr	r3, [r7, #8]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bdb0      	pop	{r4, r5, r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	00f42400 	.word	0x00f42400
 80018d4:	017d7840 	.word	0x017d7840

080018d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018ee:	f3ef 8305 	mrs	r3, IPSR
 80018f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80018f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10f      	bne.n	800191a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018fa:	f3ef 8310 	mrs	r3, PRIMASK
 80018fe:	607b      	str	r3, [r7, #4]
  return(result);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d105      	bne.n	8001912 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001906:	f3ef 8311 	mrs	r3, BASEPRI
 800190a:	603b      	str	r3, [r7, #0]
  return(result);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <osKernelInitialize+0x3a>
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <osKernelInitialize+0x64>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d103      	bne.n	8001922 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800191a:	f06f 0305 	mvn.w	r3, #5
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e00c      	b.n	800193c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <osKernelInitialize+0x64>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d105      	bne.n	8001936 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <osKernelInitialize+0x64>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e002      	b.n	800193c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800193c:	68fb      	ldr	r3, [r7, #12]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000094 	.word	0x20000094

08001950 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001956:	f3ef 8305 	mrs	r3, IPSR
 800195a:	60bb      	str	r3, [r7, #8]
  return(result);
 800195c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10f      	bne.n	8001982 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001962:	f3ef 8310 	mrs	r3, PRIMASK
 8001966:	607b      	str	r3, [r7, #4]
  return(result);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d105      	bne.n	800197a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800196e:	f3ef 8311 	mrs	r3, BASEPRI
 8001972:	603b      	str	r3, [r7, #0]
  return(result);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <osKernelStart+0x3a>
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <osKernelStart+0x68>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d103      	bne.n	800198a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001982:	f06f 0305 	mvn.w	r3, #5
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e010      	b.n	80019ac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <osKernelStart+0x68>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d109      	bne.n	80019a6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001992:	f7ff ffa1 	bl	80018d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <osKernelStart+0x68>)
 8001998:	2202      	movs	r2, #2
 800199a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800199c:	f001 f886 	bl	8002aac <vTaskStartScheduler>
      stat = osOK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e002      	b.n	80019ac <osKernelStart+0x5c>
    } else {
      stat = osError;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000094 	.word	0x20000094

080019bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b090      	sub	sp, #64	; 0x40
 80019c0:	af04      	add	r7, sp, #16
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019cc:	f3ef 8305 	mrs	r3, IPSR
 80019d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80019d2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f040 808f 	bne.w	8001af8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019da:	f3ef 8310 	mrs	r3, PRIMASK
 80019de:	61bb      	str	r3, [r7, #24]
  return(result);
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019e6:	f3ef 8311 	mrs	r3, BASEPRI
 80019ea:	617b      	str	r3, [r7, #20]
  return(result);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <osThreadNew+0x3e>
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <osThreadNew+0x148>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d07e      	beq.n	8001af8 <osThreadNew+0x13c>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d07b      	beq.n	8001af8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001a04:	2318      	movs	r3, #24
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d045      	beq.n	8001aa4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <osThreadNew+0x6a>
        name = attr->name;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d008      	beq.n	8001a4c <osThreadNew+0x90>
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	2b38      	cmp	r3, #56	; 0x38
 8001a3e:	d805      	bhi.n	8001a4c <osThreadNew+0x90>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <osThreadNew+0x94>
        return (NULL);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e054      	b.n	8001afa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00e      	beq.n	8001a86 <osThreadNew+0xca>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b5b      	cmp	r3, #91	; 0x5b
 8001a6e:	d90a      	bls.n	8001a86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <osThreadNew+0xca>
        mem = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	623b      	str	r3, [r7, #32]
 8001a84:	e010      	b.n	8001aa8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10c      	bne.n	8001aa8 <osThreadNew+0xec>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d108      	bne.n	8001aa8 <osThreadNew+0xec>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d104      	bne.n	8001aa8 <osThreadNew+0xec>
          mem = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
 8001aa2:	e001      	b.n	8001aa8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d110      	bne.n	8001ad0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ab6:	9202      	str	r2, [sp, #8]
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fe11 	bl	80026ec <xTaskCreateStatic>
 8001aca:	4603      	mov	r3, r0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	e013      	b.n	8001af8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d110      	bne.n	8001af8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fe62 	bl	80027b2 <xTaskCreate>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d001      	beq.n	8001af8 <osThreadNew+0x13c>
          hTask = NULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001af8:	693b      	ldr	r3, [r7, #16]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3730      	adds	r7, #48	; 0x30
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000094 	.word	0x20000094

08001b08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <vApplicationGetIdleTaskMemory+0x30>)
 8001b1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	601a      	str	r2, [r3, #0]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000098 	.word	0x20000098
 8001b38:	200000f4 	.word	0x200000f4

08001b3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <vApplicationGetTimerTaskMemory+0x2c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <vApplicationGetTimerTaskMemory+0x30>)
 8001b52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5a:	601a      	str	r2, [r3, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	200002f4 	.word	0x200002f4
 8001b6c:	20000350 	.word	0x20000350

08001b70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f103 0208 	add.w	r2, r3, #8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f103 0208 	add.w	r2, r3, #8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f103 0208 	add.w	r2, r3, #8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	601a      	str	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d103      	bne.n	8001c32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e00c      	b.n	8001c4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3308      	adds	r3, #8
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	e002      	b.n	8001c40 <vListInsert+0x2e>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d2f6      	bcs.n	8001c3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	601a      	str	r2, [r3, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6892      	ldr	r2, [r2, #8]
 8001c9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d103      	bne.n	8001cb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	1e5a      	subs	r2, r3, #1
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10c      	bne.n	8001d06 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf0:	b672      	cpsid	i
 8001cf2:	f383 8811 	msr	BASEPRI, r3
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	b662      	cpsie	i
 8001d00:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d02:	bf00      	nop
 8001d04:	e7fe      	b.n	8001d04 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8001d06:	f002 f869 	bl	8003ddc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d12:	68f9      	ldr	r1, [r7, #12]
 8001d14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	441a      	add	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d36:	3b01      	subs	r3, #1
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	441a      	add	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	22ff      	movs	r2, #255	; 0xff
 8001d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	22ff      	movs	r2, #255	; 0xff
 8001d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d114      	bne.n	8001d86 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01a      	beq.n	8001d9a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3310      	adds	r3, #16
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 f927 	bl	8002fbc <xTaskRemoveFromEventList>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d012      	beq.n	8001d9a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <xQueueGenericReset+0xd0>)
 8001d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	f3bf 8f6f 	isb	sy
 8001d84:	e009      	b.n	8001d9a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3310      	adds	r3, #16
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fef0 	bl	8001b70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3324      	adds	r3, #36	; 0x24
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff feeb 	bl	8001b70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001d9a:	f002 f853 	bl	8003e44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	e000ed04 	.word	0xe000ed04

08001dac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10c      	bne.n	8001dda <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8001dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc4:	b672      	cpsid	i
 8001dc6:	f383 8811 	msr	BASEPRI, r3
 8001dca:	f3bf 8f6f 	isb	sy
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	b662      	cpsie	i
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001dd6:	bf00      	nop
 8001dd8:	e7fe      	b.n	8001dd8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10c      	bne.n	8001dfa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8001de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de4:	b672      	cpsid	i
 8001de6:	f383 8811 	msr	BASEPRI, r3
 8001dea:	f3bf 8f6f 	isb	sy
 8001dee:	f3bf 8f4f 	dsb	sy
 8001df2:	b662      	cpsie	i
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001df6:	bf00      	nop
 8001df8:	e7fe      	b.n	8001df8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <xQueueGenericCreateStatic+0x5a>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <xQueueGenericCreateStatic+0x5e>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <xQueueGenericCreateStatic+0x60>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10c      	bne.n	8001e2a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8001e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e14:	b672      	cpsid	i
 8001e16:	f383 8811 	msr	BASEPRI, r3
 8001e1a:	f3bf 8f6f 	isb	sy
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	b662      	cpsie	i
 8001e24:	623b      	str	r3, [r7, #32]
}
 8001e26:	bf00      	nop
 8001e28:	e7fe      	b.n	8001e28 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <xQueueGenericCreateStatic+0x8a>
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <xQueueGenericCreateStatic+0x8e>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <xQueueGenericCreateStatic+0x90>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10c      	bne.n	8001e5a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8001e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e44:	b672      	cpsid	i
 8001e46:	f383 8811 	msr	BASEPRI, r3
 8001e4a:	f3bf 8f6f 	isb	sy
 8001e4e:	f3bf 8f4f 	dsb	sy
 8001e52:	b662      	cpsie	i
 8001e54:	61fb      	str	r3, [r7, #28]
}
 8001e56:	bf00      	nop
 8001e58:	e7fe      	b.n	8001e58 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e5a:	2350      	movs	r3, #80	; 0x50
 8001e5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b50      	cmp	r3, #80	; 0x50
 8001e62:	d00c      	beq.n	8001e7e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8001e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e68:	b672      	cpsid	i
 8001e6a:	f383 8811 	msr	BASEPRI, r3
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	b662      	cpsie	i
 8001e78:	61bb      	str	r3, [r7, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	e7fe      	b.n	8001e7c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001e7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00d      	beq.n	8001ea6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f805 	bl	8001eb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3730      	adds	r7, #48	; 0x30
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d103      	bne.n	8001ecc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e002      	b.n	8001ed2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001ede:	2101      	movs	r1, #1
 8001ee0:	69b8      	ldr	r0, [r7, #24]
 8001ee2:	f7ff fef9 	bl	8001cd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08e      	sub	sp, #56	; 0x38
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10c      	bne.n	8001f2e <xQueueGenericSend+0x36>
	__asm volatile
 8001f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f18:	b672      	cpsid	i
 8001f1a:	f383 8811 	msr	BASEPRI, r3
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	b662      	cpsie	i
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f2a:	bf00      	nop
 8001f2c:	e7fe      	b.n	8001f2c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d103      	bne.n	8001f3c <xQueueGenericSend+0x44>
 8001f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <xQueueGenericSend+0x48>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <xQueueGenericSend+0x4a>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <xQueueGenericSend+0x68>
	__asm volatile
 8001f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4a:	b672      	cpsid	i
 8001f4c:	f383 8811 	msr	BASEPRI, r3
 8001f50:	f3bf 8f6f 	isb	sy
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	b662      	cpsie	i
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f5c:	bf00      	nop
 8001f5e:	e7fe      	b.n	8001f5e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d103      	bne.n	8001f6e <xQueueGenericSend+0x76>
 8001f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <xQueueGenericSend+0x7a>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <xQueueGenericSend+0x7c>
 8001f72:	2300      	movs	r3, #0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10c      	bne.n	8001f92 <xQueueGenericSend+0x9a>
	__asm volatile
 8001f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7c:	b672      	cpsid	i
 8001f7e:	f383 8811 	msr	BASEPRI, r3
 8001f82:	f3bf 8f6f 	isb	sy
 8001f86:	f3bf 8f4f 	dsb	sy
 8001f8a:	b662      	cpsie	i
 8001f8c:	623b      	str	r3, [r7, #32]
}
 8001f8e:	bf00      	nop
 8001f90:	e7fe      	b.n	8001f90 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f92:	f001 f9d9 	bl	8003348 <xTaskGetSchedulerState>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <xQueueGenericSend+0xaa>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <xQueueGenericSend+0xae>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <xQueueGenericSend+0xb0>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10c      	bne.n	8001fc6 <xQueueGenericSend+0xce>
	__asm volatile
 8001fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb0:	b672      	cpsid	i
 8001fb2:	f383 8811 	msr	BASEPRI, r3
 8001fb6:	f3bf 8f6f 	isb	sy
 8001fba:	f3bf 8f4f 	dsb	sy
 8001fbe:	b662      	cpsie	i
 8001fc0:	61fb      	str	r3, [r7, #28]
}
 8001fc2:	bf00      	nop
 8001fc4:	e7fe      	b.n	8001fc4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fc6:	f001 ff09 	bl	8003ddc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <xQueueGenericSend+0xe4>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d129      	bne.n	8002030 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fe2:	f000 fa15 	bl	8002410 <prvCopyDataToQueue>
 8001fe6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff2:	3324      	adds	r3, #36	; 0x24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 ffe1 	bl	8002fbc <xTaskRemoveFromEventList>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002000:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <xQueueGenericSend+0x208>)
 8002002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	e00a      	b.n	8002028 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <xQueueGenericSend+0x208>)
 800201a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002028:	f001 ff0c 	bl	8003e44 <vPortExitCritical>
				return pdPASS;
 800202c:	2301      	movs	r3, #1
 800202e:	e063      	b.n	80020f8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002036:	f001 ff05 	bl	8003e44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800203a:	2300      	movs	r3, #0
 800203c:	e05c      	b.n	80020f8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4618      	mov	r0, r3
 800204a:	f001 f81d 	bl	8003088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800204e:	2301      	movs	r3, #1
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002052:	f001 fef7 	bl	8003e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002056:	f000 fd93 	bl	8002b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800205a:	f001 febf 	bl	8003ddc <vPortEnterCritical>
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002064:	b25b      	sxtb	r3, r3
 8002066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206a:	d103      	bne.n	8002074 <xQueueGenericSend+0x17c>
 800206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800207a:	b25b      	sxtb	r3, r3
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d103      	bne.n	800208a <xQueueGenericSend+0x192>
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800208a:	f001 fedb 	bl	8003e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800208e:	1d3a      	adds	r2, r7, #4
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f001 f80c 	bl	80030b4 <xTaskCheckForTimeOut>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d124      	bne.n	80020ec <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80020a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020a4:	f000 faac 	bl	8002600 <prvIsQueueFull>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d018      	beq.n	80020e0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	3310      	adds	r3, #16
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 ff2c 	bl	8002f14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020be:	f000 fa37 	bl	8002530 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020c2:	f000 fd6b 	bl	8002b9c <xTaskResumeAll>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f47f af7c 	bne.w	8001fc6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <xQueueGenericSend+0x208>)
 80020d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f3bf 8f4f 	dsb	sy
 80020da:	f3bf 8f6f 	isb	sy
 80020de:	e772      	b.n	8001fc6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020e2:	f000 fa25 	bl	8002530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020e6:	f000 fd59 	bl	8002b9c <xTaskResumeAll>
 80020ea:	e76c      	b.n	8001fc6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80020ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020ee:	f000 fa1f 	bl	8002530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020f2:	f000 fd53 	bl	8002b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80020f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3738      	adds	r7, #56	; 0x38
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	e000ed04 	.word	0xe000ed04

08002104 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08e      	sub	sp, #56	; 0x38
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10c      	bne.n	8002136 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002120:	b672      	cpsid	i
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	b662      	cpsie	i
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002132:	bf00      	nop
 8002134:	e7fe      	b.n	8002134 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d103      	bne.n	8002144 <xQueueGenericSendFromISR+0x40>
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <xQueueGenericSendFromISR+0x44>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <xQueueGenericSendFromISR+0x46>
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002152:	b672      	cpsid	i
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	b662      	cpsie	i
 8002162:	623b      	str	r3, [r7, #32]
}
 8002164:	bf00      	nop
 8002166:	e7fe      	b.n	8002166 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d103      	bne.n	8002176 <xQueueGenericSendFromISR+0x72>
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <xQueueGenericSendFromISR+0x76>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <xQueueGenericSendFromISR+0x78>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10c      	bne.n	800219a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8002180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002184:	b672      	cpsid	i
 8002186:	f383 8811 	msr	BASEPRI, r3
 800218a:	f3bf 8f6f 	isb	sy
 800218e:	f3bf 8f4f 	dsb	sy
 8002192:	b662      	cpsie	i
 8002194:	61fb      	str	r3, [r7, #28]
}
 8002196:	bf00      	nop
 8002198:	e7fe      	b.n	8002198 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800219a:	f001 ff07 	bl	8003fac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800219e:	f3ef 8211 	mrs	r2, BASEPRI
 80021a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a6:	b672      	cpsid	i
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	b662      	cpsie	i
 80021b6:	61ba      	str	r2, [r7, #24]
 80021b8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021ba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d302      	bcc.n	80021d0 <xQueueGenericSendFromISR+0xcc>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d12c      	bne.n	800222a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021e0:	f000 f916 	bl	8002410 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80021e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d112      	bne.n	8002214 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d016      	beq.n	8002224 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	3324      	adds	r3, #36	; 0x24
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fede 	bl	8002fbc <xTaskRemoveFromEventList>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00e      	beq.n	8002224 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00b      	beq.n	8002224 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e007      	b.n	8002224 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002214:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002218:	3301      	adds	r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	b25a      	sxtb	r2, r3
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002224:	2301      	movs	r3, #1
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002228:	e001      	b.n	800222e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800222a:	2300      	movs	r3, #0
 800222c:	637b      	str	r3, [r7, #52]	; 0x34
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002238:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800223a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800223c:	4618      	mov	r0, r3
 800223e:	3738      	adds	r7, #56	; 0x38
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08c      	sub	sp, #48	; 0x30
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <xQueueReceive+0x34>
	__asm volatile
 800225e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002262:	b672      	cpsid	i
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	b662      	cpsie	i
 8002272:	623b      	str	r3, [r7, #32]
}
 8002274:	bf00      	nop
 8002276:	e7fe      	b.n	8002276 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d103      	bne.n	8002286 <xQueueReceive+0x42>
 800227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <xQueueReceive+0x46>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <xQueueReceive+0x48>
 800228a:	2300      	movs	r3, #0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10c      	bne.n	80022aa <xQueueReceive+0x66>
	__asm volatile
 8002290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002294:	b672      	cpsid	i
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	b662      	cpsie	i
 80022a4:	61fb      	str	r3, [r7, #28]
}
 80022a6:	bf00      	nop
 80022a8:	e7fe      	b.n	80022a8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022aa:	f001 f84d 	bl	8003348 <xTaskGetSchedulerState>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <xQueueReceive+0x76>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <xQueueReceive+0x7a>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <xQueueReceive+0x7c>
 80022be:	2300      	movs	r3, #0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10c      	bne.n	80022de <xQueueReceive+0x9a>
	__asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c8:	b672      	cpsid	i
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	b662      	cpsie	i
 80022d8:	61bb      	str	r3, [r7, #24]
}
 80022da:	bf00      	nop
 80022dc:	e7fe      	b.n	80022dc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022de:	f001 fd7d 	bl	8003ddc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d01f      	beq.n	800232e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022f2:	f000 f8f7 	bl	80024e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	1e5a      	subs	r2, r3, #1
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00f      	beq.n	8002326 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	3310      	adds	r3, #16
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fe56 	bl	8002fbc <xTaskRemoveFromEventList>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <xQueueReceive+0x1c8>)
 8002318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002326:	f001 fd8d 	bl	8003e44 <vPortExitCritical>
				return pdPASS;
 800232a:	2301      	movs	r3, #1
 800232c:	e069      	b.n	8002402 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d103      	bne.n	800233c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002334:	f001 fd86 	bl	8003e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002338:	2300      	movs	r3, #0
 800233a:	e062      	b.n	8002402 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fe9e 	bl	8003088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800234c:	2301      	movs	r3, #1
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002350:	f001 fd78 	bl	8003e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002354:	f000 fc14 	bl	8002b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002358:	f001 fd40 	bl	8003ddc <vPortEnterCritical>
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002362:	b25b      	sxtb	r3, r3
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d103      	bne.n	8002372 <xQueueReceive+0x12e>
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002378:	b25b      	sxtb	r3, r3
 800237a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237e:	d103      	bne.n	8002388 <xQueueReceive+0x144>
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002388:	f001 fd5c 	bl	8003e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800238c:	1d3a      	adds	r2, r7, #4
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fe8d 	bl	80030b4 <xTaskCheckForTimeOut>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d123      	bne.n	80023e8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023a2:	f000 f917 	bl	80025d4 <prvIsQueueEmpty>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d017      	beq.n	80023dc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	3324      	adds	r3, #36	; 0x24
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fdad 	bl	8002f14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023bc:	f000 f8b8 	bl	8002530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023c0:	f000 fbec 	bl	8002b9c <xTaskResumeAll>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d189      	bne.n	80022de <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <xQueueReceive+0x1c8>)
 80023cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	e780      	b.n	80022de <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023de:	f000 f8a7 	bl	8002530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023e2:	f000 fbdb 	bl	8002b9c <xTaskResumeAll>
 80023e6:	e77a      	b.n	80022de <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80023e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023ea:	f000 f8a1 	bl	8002530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023ee:	f000 fbd5 	bl	8002b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023f4:	f000 f8ee 	bl	80025d4 <prvIsQueueEmpty>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f43f af6f 	beq.w	80022de <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002400:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002402:	4618      	mov	r0, r3
 8002404:	3730      	adds	r7, #48	; 0x30
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	e000ed04 	.word	0xe000ed04

08002410 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d14d      	bne.n	80024d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 ffa2 	bl	8003384 <xTaskPriorityDisinherit>
 8002440:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	e043      	b.n	80024d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d119      	bne.n	8002484 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6858      	ldr	r0, [r3, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	461a      	mov	r2, r3
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	f001 fff8 	bl	8004450 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	441a      	add	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d32b      	bcc.n	80024d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	e026      	b.n	80024d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68d8      	ldr	r0, [r3, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	461a      	mov	r2, r3
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	f001 ffde 	bl	8004450 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	425b      	negs	r3, r3
 800249e:	441a      	add	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d207      	bcs.n	80024c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	425b      	negs	r3, r3
 80024ba:	441a      	add	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d105      	bne.n	80024d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80024da:	697b      	ldr	r3, [r7, #20]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d018      	beq.n	8002528 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	441a      	add	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	429a      	cmp	r2, r3
 800250e:	d303      	bcc.n	8002518 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68d9      	ldr	r1, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	461a      	mov	r2, r3
 8002522:	6838      	ldr	r0, [r7, #0]
 8002524:	f001 ff94 	bl	8004450 <memcpy>
	}
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002538:	f001 fc50 	bl	8003ddc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002542:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002544:	e011      	b.n	800256a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2b00      	cmp	r3, #0
 800254c:	d012      	beq.n	8002574 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3324      	adds	r3, #36	; 0x24
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fd32 	bl	8002fbc <xTaskRemoveFromEventList>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800255e:	f000 fe0f 	bl	8003180 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	3b01      	subs	r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	2b00      	cmp	r3, #0
 8002570:	dce9      	bgt.n	8002546 <prvUnlockQueue+0x16>
 8002572:	e000      	b.n	8002576 <prvUnlockQueue+0x46>
					break;
 8002574:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800257e:	f001 fc61 	bl	8003e44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002582:	f001 fc2b 	bl	8003ddc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800258c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800258e:	e011      	b.n	80025b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d012      	beq.n	80025be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3310      	adds	r3, #16
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fd0d 	bl	8002fbc <xTaskRemoveFromEventList>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80025a8:	f000 fdea 	bl	8003180 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80025ac:	7bbb      	ldrb	r3, [r7, #14]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	dce9      	bgt.n	8002590 <prvUnlockQueue+0x60>
 80025bc:	e000      	b.n	80025c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80025be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	22ff      	movs	r2, #255	; 0xff
 80025c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80025c8:	f001 fc3c 	bl	8003e44 <vPortExitCritical>
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025dc:	f001 fbfe 	bl	8003ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80025e8:	2301      	movs	r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e001      	b.n	80025f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025f2:	f001 fc27 	bl	8003e44 <vPortExitCritical>

	return xReturn;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002608:	f001 fbe8 	bl	8003ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	429a      	cmp	r2, r3
 8002616:	d102      	bne.n	800261e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002618:	2301      	movs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	e001      	b.n	8002622 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002622:	f001 fc0f 	bl	8003e44 <vPortExitCritical>

	return xReturn;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e014      	b.n	800266a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <vQueueAddToRegistry+0x50>)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800264c:	490c      	ldr	r1, [pc, #48]	; (8002680 <vQueueAddToRegistry+0x50>)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <vQueueAddToRegistry+0x50>)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002662:	e006      	b.n	8002672 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3301      	adds	r3, #1
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b07      	cmp	r3, #7
 800266e:	d9e7      	bls.n	8002640 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	200049b0 	.word	0x200049b0

08002684 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002694:	f001 fba2 	bl	8003ddc <vPortEnterCritical>
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d103      	bne.n	80026ae <vQueueWaitForMessageRestricted+0x2a>
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026b4:	b25b      	sxtb	r3, r3
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ba:	d103      	bne.n	80026c4 <vQueueWaitForMessageRestricted+0x40>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026c4:	f001 fbbe 	bl	8003e44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d106      	bne.n	80026de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3324      	adds	r3, #36	; 0x24
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fc41 	bl	8002f60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff ff26 	bl	8002530 <prvUnlockQueue>
	}
 80026e4:	bf00      	nop
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08e      	sub	sp, #56	; 0x38
 80026f0:	af04      	add	r7, sp, #16
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10c      	bne.n	800271a <xTaskCreateStatic+0x2e>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	b672      	cpsid	i
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	b662      	cpsie	i
 8002714:	623b      	str	r3, [r7, #32]
}
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10c      	bne.n	800273a <xTaskCreateStatic+0x4e>
	__asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	b672      	cpsid	i
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	b662      	cpsie	i
 8002734:	61fb      	str	r3, [r7, #28]
}
 8002736:	bf00      	nop
 8002738:	e7fe      	b.n	8002738 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800273a:	235c      	movs	r3, #92	; 0x5c
 800273c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b5c      	cmp	r3, #92	; 0x5c
 8002742:	d00c      	beq.n	800275e <xTaskCreateStatic+0x72>
	__asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	b672      	cpsid	i
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	b662      	cpsie	i
 8002758:	61bb      	str	r3, [r7, #24]
}
 800275a:	bf00      	nop
 800275c:	e7fe      	b.n	800275c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800275e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	2b00      	cmp	r3, #0
 8002764:	d01e      	beq.n	80027a4 <xTaskCreateStatic+0xb8>
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01b      	beq.n	80027a4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002774:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	2202      	movs	r2, #2
 800277a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800277e:	2300      	movs	r3, #0
 8002780:	9303      	str	r3, [sp, #12]
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	9302      	str	r3, [sp, #8]
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f850 	bl	800283c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800279c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800279e:	f000 f8df 	bl	8002960 <prvAddNewTaskToReadyList>
 80027a2:	e001      	b.n	80027a8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027a8:	697b      	ldr	r3, [r7, #20]
	}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3728      	adds	r7, #40	; 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b08c      	sub	sp, #48	; 0x30
 80027b6:	af04      	add	r7, sp, #16
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 fc34 	bl	8004034 <pvPortMalloc>
 80027cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00e      	beq.n	80027f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027d4:	205c      	movs	r0, #92	; 0x5c
 80027d6:	f001 fc2d 	bl	8004034 <pvPortMalloc>
 80027da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
 80027e8:	e005      	b.n	80027f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f001 fcec 	bl	80041c8 <vPortFree>
 80027f0:	e001      	b.n	80027f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d017      	beq.n	800282c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002804:	88fa      	ldrh	r2, [r7, #6]
 8002806:	2300      	movs	r3, #0
 8002808:	9303      	str	r3, [sp, #12]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f80e 	bl	800283c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002820:	69f8      	ldr	r0, [r7, #28]
 8002822:	f000 f89d 	bl	8002960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002826:	2301      	movs	r3, #1
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e002      	b.n	8002832 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002832:	69bb      	ldr	r3, [r7, #24]
	}
 8002834:	4618      	mov	r0, r3
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	461a      	mov	r2, r3
 8002854:	21a5      	movs	r1, #165	; 0xa5
 8002856:	f001 fe09 	bl	800446c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002864:	440b      	add	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f023 0307 	bic.w	r3, r3, #7
 8002872:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00c      	beq.n	8002898 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002882:	b672      	cpsid	i
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	b662      	cpsie	i
 8002892:	617b      	str	r3, [r7, #20]
}
 8002894:	bf00      	nop
 8002896:	e7fe      	b.n	8002896 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01f      	beq.n	80028de <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	e012      	b.n	80028ca <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	4413      	add	r3, r2
 80028aa:	7819      	ldrb	r1, [r3, #0]
 80028ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	4413      	add	r3, r2
 80028b2:	3334      	adds	r3, #52	; 0x34
 80028b4:	460a      	mov	r2, r1
 80028b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	3301      	adds	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d9e9      	bls.n	80028a4 <prvInitialiseNewTask+0x68>
 80028d0:	e000      	b.n	80028d4 <prvInitialiseNewTask+0x98>
			{
				break;
 80028d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028dc:	e003      	b.n	80028e6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	2b37      	cmp	r3, #55	; 0x37
 80028ea:	d901      	bls.n	80028f0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028ec:	2337      	movs	r3, #55	; 0x37
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	2200      	movs	r2, #0
 8002900:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	3304      	adds	r3, #4
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff f952 	bl	8001bb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	3318      	adds	r3, #24
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff f94d 	bl	8001bb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	2200      	movs	r2, #0
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	68f9      	ldr	r1, [r7, #12]
 800293e:	69b8      	ldr	r0, [r7, #24]
 8002940:	f001 f942 	bl	8003bc8 <pxPortInitialiseStack>
 8002944:	4602      	mov	r2, r0
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002956:	bf00      	nop
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002968:	f001 fa38 	bl	8003ddc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800296c:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <prvAddNewTaskToReadyList+0xc4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3301      	adds	r3, #1
 8002972:	4a2c      	ldr	r2, [pc, #176]	; (8002a24 <prvAddNewTaskToReadyList+0xc4>)
 8002974:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002976:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <prvAddNewTaskToReadyList+0xc8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800297e:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <prvAddNewTaskToReadyList+0xc8>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <prvAddNewTaskToReadyList+0xc4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d110      	bne.n	80029ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800298c:	f000 fc1c 	bl	80031c8 <prvInitialiseTaskLists>
 8002990:	e00d      	b.n	80029ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <prvAddNewTaskToReadyList+0xcc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800299a:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <prvAddNewTaskToReadyList+0xc8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d802      	bhi.n	80029ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029a8:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <prvAddNewTaskToReadyList+0xc8>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <prvAddNewTaskToReadyList+0xd0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <prvAddNewTaskToReadyList+0xd0>)
 80029b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <prvAddNewTaskToReadyList+0xd0>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <prvAddNewTaskToReadyList+0xd4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d903      	bls.n	80029d4 <prvAddNewTaskToReadyList+0x74>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <prvAddNewTaskToReadyList+0xd4>)
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <prvAddNewTaskToReadyList+0xd8>)
 80029e2:	441a      	add	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4610      	mov	r0, r2
 80029ec:	f7ff f8ed 	bl	8001bca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029f0:	f001 fa28 	bl	8003e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <prvAddNewTaskToReadyList+0xcc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00e      	beq.n	8002a1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <prvAddNewTaskToReadyList+0xc8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d207      	bcs.n	8002a1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <prvAddNewTaskToReadyList+0xdc>)
 8002a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000c24 	.word	0x20000c24
 8002a28:	20000750 	.word	0x20000750
 8002a2c:	20000c30 	.word	0x20000c30
 8002a30:	20000c40 	.word	0x20000c40
 8002a34:	20000c2c 	.word	0x20000c2c
 8002a38:	20000754 	.word	0x20000754
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d019      	beq.n	8002a86 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <vTaskDelay+0x64>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00c      	beq.n	8002a74 <vTaskDelay+0x34>
	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	b672      	cpsid	i
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	b662      	cpsie	i
 8002a6e:	60bb      	str	r3, [r7, #8]
}
 8002a70:	bf00      	nop
 8002a72:	e7fe      	b.n	8002a72 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8002a74:	f000 f884 	bl	8002b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a78:	2100      	movs	r1, #0
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fcf4 	bl	8003468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a80:	f000 f88c 	bl	8002b9c <xTaskResumeAll>
 8002a84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <vTaskDelay+0x68>)
 8002a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000c4c 	.word	0x20000c4c
 8002aa8:	e000ed04 	.word	0xe000ed04

08002aac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002aba:	463a      	mov	r2, r7
 8002abc:	1d39      	adds	r1, r7, #4
 8002abe:	f107 0308 	add.w	r3, r7, #8
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f820 	bl	8001b08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	9202      	str	r2, [sp, #8]
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	460a      	mov	r2, r1
 8002ada:	4923      	ldr	r1, [pc, #140]	; (8002b68 <vTaskStartScheduler+0xbc>)
 8002adc:	4823      	ldr	r0, [pc, #140]	; (8002b6c <vTaskStartScheduler+0xc0>)
 8002ade:	f7ff fe05 	bl	80026ec <xTaskCreateStatic>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <vTaskStartScheduler+0xc4>)
 8002ae6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ae8:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <vTaskStartScheduler+0xc4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002af0:	2301      	movs	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e001      	b.n	8002afa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d102      	bne.n	8002b06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002b00:	f000 fd06 	bl	8003510 <xTimerCreateTimerTask>
 8002b04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d118      	bne.n	8002b3e <vTaskStartScheduler+0x92>
	__asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	b672      	cpsid	i
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	b662      	cpsie	i
 8002b20:	613b      	str	r3, [r7, #16]
}
 8002b22:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <vTaskStartScheduler+0xc8>)
 8002b26:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <vTaskStartScheduler+0xcc>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <vTaskStartScheduler+0xd0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b38:	f001 f8d2 	bl	8003ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b3c:	e010      	b.n	8002b60 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d10c      	bne.n	8002b60 <vTaskStartScheduler+0xb4>
	__asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	b672      	cpsid	i
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	b662      	cpsie	i
 8002b5a:	60fb      	str	r3, [r7, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	e7fe      	b.n	8002b5e <vTaskStartScheduler+0xb2>
}
 8002b60:	bf00      	nop
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	08004e60 	.word	0x08004e60
 8002b6c:	08003199 	.word	0x08003199
 8002b70:	20000c48 	.word	0x20000c48
 8002b74:	20000c44 	.word	0x20000c44
 8002b78:	20000c30 	.word	0x20000c30
 8002b7c:	20000c28 	.word	0x20000c28

08002b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <vTaskSuspendAll+0x18>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <vTaskSuspendAll+0x18>)
 8002b8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	20000c4c 	.word	0x20000c4c

08002b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002baa:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <xTaskResumeAll+0x11c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10c      	bne.n	8002bcc <xTaskResumeAll+0x30>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb6:	b672      	cpsid	i
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	b662      	cpsie	i
 8002bc6:	603b      	str	r3, [r7, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	e7fe      	b.n	8002bca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bcc:	f001 f906 	bl	8003ddc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <xTaskResumeAll+0x11c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	4a38      	ldr	r2, [pc, #224]	; (8002cb8 <xTaskResumeAll+0x11c>)
 8002bd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <xTaskResumeAll+0x11c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d162      	bne.n	8002ca8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002be2:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <xTaskResumeAll+0x120>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d05e      	beq.n	8002ca8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bea:	e02f      	b.n	8002c4c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bec:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <xTaskResumeAll+0x124>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3318      	adds	r3, #24
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f843 	bl	8001c84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3304      	adds	r3, #4
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff f83e 	bl	8001c84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <xTaskResumeAll+0x128>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d903      	bls.n	8002c1c <xTaskResumeAll+0x80>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <xTaskResumeAll+0x128>)
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4a27      	ldr	r2, [pc, #156]	; (8002cc8 <xTaskResumeAll+0x12c>)
 8002c2a:	441a      	add	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f7fe ffc9 	bl	8001bca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3c:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <xTaskResumeAll+0x130>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d302      	bcc.n	8002c4c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <xTaskResumeAll+0x134>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <xTaskResumeAll+0x124>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1cb      	bne.n	8002bec <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c5a:	f000 fb55 	bl	8003308 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <xTaskResumeAll+0x138>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d010      	beq.n	8002c8c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c6a:	f000 f847 	bl	8002cfc <xTaskIncrementTick>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002c74:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <xTaskResumeAll+0x134>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f1      	bne.n	8002c6a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <xTaskResumeAll+0x138>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <xTaskResumeAll+0x134>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d009      	beq.n	8002ca8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c94:	2301      	movs	r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <xTaskResumeAll+0x13c>)
 8002c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ca8:	f001 f8cc 	bl	8003e44 <vPortExitCritical>

	return xAlreadyYielded;
 8002cac:	68bb      	ldr	r3, [r7, #8]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000c4c 	.word	0x20000c4c
 8002cbc:	20000c24 	.word	0x20000c24
 8002cc0:	20000be4 	.word	0x20000be4
 8002cc4:	20000c2c 	.word	0x20000c2c
 8002cc8:	20000754 	.word	0x20000754
 8002ccc:	20000750 	.word	0x20000750
 8002cd0:	20000c38 	.word	0x20000c38
 8002cd4:	20000c34 	.word	0x20000c34
 8002cd8:	e000ed04 	.word	0xe000ed04

08002cdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <xTaskGetTickCount+0x1c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ce8:	687b      	ldr	r3, [r7, #4]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000c28 	.word	0x20000c28

08002cfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d06:	4b48      	ldr	r3, [pc, #288]	; (8002e28 <xTaskIncrementTick+0x12c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d17b      	bne.n	8002e06 <xTaskIncrementTick+0x10a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <xTaskIncrementTick+0x130>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3301      	adds	r3, #1
 8002d14:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d16:	4a45      	ldr	r2, [pc, #276]	; (8002e2c <xTaskIncrementTick+0x130>)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d122      	bne.n	8002d68 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d22:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <xTaskIncrementTick+0x134>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00c      	beq.n	8002d46 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	b672      	cpsid	i
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	b662      	cpsie	i
 8002d40:	603b      	str	r3, [r7, #0]
}
 8002d42:	bf00      	nop
 8002d44:	e7fe      	b.n	8002d44 <xTaskIncrementTick+0x48>
 8002d46:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <xTaskIncrementTick+0x134>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <xTaskIncrementTick+0x138>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a37      	ldr	r2, [pc, #220]	; (8002e30 <xTaskIncrementTick+0x134>)
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4a37      	ldr	r2, [pc, #220]	; (8002e34 <xTaskIncrementTick+0x138>)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <xTaskIncrementTick+0x13c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	4a35      	ldr	r2, [pc, #212]	; (8002e38 <xTaskIncrementTick+0x13c>)
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	f000 fad0 	bl	8003308 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d68:	4b34      	ldr	r3, [pc, #208]	; (8002e3c <xTaskIncrementTick+0x140>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d34e      	bcc.n	8002e10 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d72:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <xTaskIncrementTick+0x134>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d104      	bne.n	8002d86 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d7c:	4b2f      	ldr	r3, [pc, #188]	; (8002e3c <xTaskIncrementTick+0x140>)
 8002d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d82:	601a      	str	r2, [r3, #0]
					break;
 8002d84:	e044      	b.n	8002e10 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d86:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <xTaskIncrementTick+0x134>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d203      	bcs.n	8002da6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d9e:	4a27      	ldr	r2, [pc, #156]	; (8002e3c <xTaskIncrementTick+0x140>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002da4:	e034      	b.n	8002e10 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3304      	adds	r3, #4
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe ff6a 	bl	8001c84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	3318      	adds	r3, #24
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe ff61 	bl	8001c84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <xTaskIncrementTick+0x144>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d903      	bls.n	8002dd6 <xTaskIncrementTick+0xda>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <xTaskIncrementTick+0x144>)
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <xTaskIncrementTick+0x148>)
 8002de4:	441a      	add	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f7fe feec 	bl	8001bca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df6:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <xTaskIncrementTick+0x14c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d3b8      	bcc.n	8002d72 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002e00:	2301      	movs	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e04:	e7b5      	b.n	8002d72 <xTaskIncrementTick+0x76>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <xTaskIncrementTick+0x150>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <xTaskIncrementTick+0x150>)
 8002e0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <xTaskIncrementTick+0x154>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <xTaskIncrementTick+0x120>
		{
			xSwitchRequired = pdTRUE;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e1c:	697b      	ldr	r3, [r7, #20]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000c4c 	.word	0x20000c4c
 8002e2c:	20000c28 	.word	0x20000c28
 8002e30:	20000bdc 	.word	0x20000bdc
 8002e34:	20000be0 	.word	0x20000be0
 8002e38:	20000c3c 	.word	0x20000c3c
 8002e3c:	20000c44 	.word	0x20000c44
 8002e40:	20000c2c 	.word	0x20000c2c
 8002e44:	20000754 	.word	0x20000754
 8002e48:	20000750 	.word	0x20000750
 8002e4c:	20000c34 	.word	0x20000c34
 8002e50:	20000c38 	.word	0x20000c38

08002e54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <vTaskSwitchContext+0xac>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e62:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <vTaskSwitchContext+0xb0>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e68:	e043      	b.n	8002ef2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8002e6a:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <vTaskSwitchContext+0xb0>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <vTaskSwitchContext+0xb4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e012      	b.n	8002e9e <vTaskSwitchContext+0x4a>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <vTaskSwitchContext+0x44>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	b672      	cpsid	i
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	b662      	cpsie	i
 8002e92:	607b      	str	r3, [r7, #4]
}
 8002e94:	bf00      	nop
 8002e96:	e7fe      	b.n	8002e96 <vTaskSwitchContext+0x42>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	491b      	ldr	r1, [pc, #108]	; (8002f0c <vTaskSwitchContext+0xb8>)
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0e2      	beq.n	8002e78 <vTaskSwitchContext+0x24>
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <vTaskSwitchContext+0xb8>)
 8002ebe:	4413      	add	r3, r2
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d104      	bne.n	8002ee2 <vTaskSwitchContext+0x8e>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <vTaskSwitchContext+0xbc>)
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <vTaskSwitchContext+0xb4>)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6013      	str	r3, [r2, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000c4c 	.word	0x20000c4c
 8002f04:	20000c38 	.word	0x20000c38
 8002f08:	20000c2c 	.word	0x20000c2c
 8002f0c:	20000754 	.word	0x20000754
 8002f10:	20000750 	.word	0x20000750

08002f14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10c      	bne.n	8002f3e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f28:	b672      	cpsid	i
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	b662      	cpsie	i
 8002f38:	60fb      	str	r3, [r7, #12]
}
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <vTaskPlaceOnEventList+0x48>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3318      	adds	r3, #24
 8002f44:	4619      	mov	r1, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe fe63 	bl	8001c12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	6838      	ldr	r0, [r7, #0]
 8002f50:	f000 fa8a 	bl	8003468 <prvAddCurrentTaskToDelayedList>
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000750 	.word	0x20000750

08002f60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10c      	bne.n	8002f8c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	b672      	cpsid	i
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	b662      	cpsie	i
 8002f86:	617b      	str	r3, [r7, #20]
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <vTaskPlaceOnEventListRestricted+0x58>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3318      	adds	r3, #24
 8002f92:	4619      	mov	r1, r3
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7fe fe18 	bl	8001bca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	68b8      	ldr	r0, [r7, #8]
 8002faa:	f000 fa5d 	bl	8003468 <prvAddCurrentTaskToDelayedList>
	}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000750 	.word	0x20000750

08002fbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10c      	bne.n	8002fec <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	b672      	cpsid	i
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	b662      	cpsie	i
 8002fe6:	60fb      	str	r3, [r7, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	3318      	adds	r3, #24
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fe47 	bl	8001c84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <xTaskRemoveFromEventList+0xb4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11d      	bne.n	800303a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	3304      	adds	r3, #4
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fe3e 	bl	8001c84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <xTaskRemoveFromEventList+0xb8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d903      	bls.n	800301c <xTaskRemoveFromEventList+0x60>
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	4a16      	ldr	r2, [pc, #88]	; (8003074 <xTaskRemoveFromEventList+0xb8>)
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4a13      	ldr	r2, [pc, #76]	; (8003078 <xTaskRemoveFromEventList+0xbc>)
 800302a:	441a      	add	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	3304      	adds	r3, #4
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f7fe fdc9 	bl	8001bca <vListInsertEnd>
 8003038:	e005      	b.n	8003046 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	3318      	adds	r3, #24
 800303e:	4619      	mov	r1, r3
 8003040:	480e      	ldr	r0, [pc, #56]	; (800307c <xTaskRemoveFromEventList+0xc0>)
 8003042:	f7fe fdc2 	bl	8001bca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <xTaskRemoveFromEventList+0xc4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	429a      	cmp	r2, r3
 8003052:	d905      	bls.n	8003060 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003054:	2301      	movs	r3, #1
 8003056:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <xTaskRemoveFromEventList+0xc8>)
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e001      	b.n	8003064 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003064:	697b      	ldr	r3, [r7, #20]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000c4c 	.word	0x20000c4c
 8003074:	20000c2c 	.word	0x20000c2c
 8003078:	20000754 	.word	0x20000754
 800307c:	20000be4 	.word	0x20000be4
 8003080:	20000750 	.word	0x20000750
 8003084:	20000c38 	.word	0x20000c38

08003088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <vTaskInternalSetTimeOutState+0x24>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <vTaskInternalSetTimeOutState+0x28>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	605a      	str	r2, [r3, #4]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	20000c3c 	.word	0x20000c3c
 80030b0:	20000c28 	.word	0x20000c28

080030b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10c      	bne.n	80030de <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	b672      	cpsid	i
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	b662      	cpsie	i
 80030d8:	613b      	str	r3, [r7, #16]
}
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10c      	bne.n	80030fe <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	b672      	cpsid	i
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	b662      	cpsie	i
 80030f8:	60fb      	str	r3, [r7, #12]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80030fe:	f000 fe6d 	bl	8003ddc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <xTaskCheckForTimeOut+0xc4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d102      	bne.n	8003122 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	e023      	b.n	800316a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <xTaskCheckForTimeOut+0xc8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d007      	beq.n	800313e <xTaskCheckForTimeOut+0x8a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	429a      	cmp	r2, r3
 8003136:	d302      	bcc.n	800313e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003138:	2301      	movs	r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	e015      	b.n	800316a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	429a      	cmp	r2, r3
 8003146:	d20b      	bcs.n	8003160 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff97 	bl	8003088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	e004      	b.n	800316a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003166:	2301      	movs	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800316a:	f000 fe6b 	bl	8003e44 <vPortExitCritical>

	return xReturn;
 800316e:	69fb      	ldr	r3, [r7, #28]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20000c28 	.word	0x20000c28
 800317c:	20000c3c 	.word	0x20000c3c

08003180 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <vTaskMissedYield+0x14>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]
}
 800318a:	bf00      	nop
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	20000c38 	.word	0x20000c38

08003198 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031a0:	f000 f852 	bl	8003248 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <prvIdleTask+0x28>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d9f9      	bls.n	80031a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <prvIdleTask+0x2c>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031bc:	e7f0      	b.n	80031a0 <prvIdleTask+0x8>
 80031be:	bf00      	nop
 80031c0:	20000754 	.word	0x20000754
 80031c4:	e000ed04 	.word	0xe000ed04

080031c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	e00c      	b.n	80031ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4a12      	ldr	r2, [pc, #72]	; (8003228 <prvInitialiseTaskLists+0x60>)
 80031e0:	4413      	add	r3, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fcc4 	bl	8001b70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3301      	adds	r3, #1
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b37      	cmp	r3, #55	; 0x37
 80031f2:	d9ef      	bls.n	80031d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031f4:	480d      	ldr	r0, [pc, #52]	; (800322c <prvInitialiseTaskLists+0x64>)
 80031f6:	f7fe fcbb 	bl	8001b70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031fa:	480d      	ldr	r0, [pc, #52]	; (8003230 <prvInitialiseTaskLists+0x68>)
 80031fc:	f7fe fcb8 	bl	8001b70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003200:	480c      	ldr	r0, [pc, #48]	; (8003234 <prvInitialiseTaskLists+0x6c>)
 8003202:	f7fe fcb5 	bl	8001b70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003206:	480c      	ldr	r0, [pc, #48]	; (8003238 <prvInitialiseTaskLists+0x70>)
 8003208:	f7fe fcb2 	bl	8001b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800320c:	480b      	ldr	r0, [pc, #44]	; (800323c <prvInitialiseTaskLists+0x74>)
 800320e:	f7fe fcaf 	bl	8001b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <prvInitialiseTaskLists+0x78>)
 8003214:	4a05      	ldr	r2, [pc, #20]	; (800322c <prvInitialiseTaskLists+0x64>)
 8003216:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <prvInitialiseTaskLists+0x7c>)
 800321a:	4a05      	ldr	r2, [pc, #20]	; (8003230 <prvInitialiseTaskLists+0x68>)
 800321c:	601a      	str	r2, [r3, #0]
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000754 	.word	0x20000754
 800322c:	20000bb4 	.word	0x20000bb4
 8003230:	20000bc8 	.word	0x20000bc8
 8003234:	20000be4 	.word	0x20000be4
 8003238:	20000bf8 	.word	0x20000bf8
 800323c:	20000c10 	.word	0x20000c10
 8003240:	20000bdc 	.word	0x20000bdc
 8003244:	20000be0 	.word	0x20000be0

08003248 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800324e:	e019      	b.n	8003284 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003250:	f000 fdc4 	bl	8003ddc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <prvCheckTasksWaitingTermination+0x50>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3304      	adds	r3, #4
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fd0f 	bl	8001c84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <prvCheckTasksWaitingTermination+0x54>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3b01      	subs	r3, #1
 800326c:	4a0b      	ldr	r2, [pc, #44]	; (800329c <prvCheckTasksWaitingTermination+0x54>)
 800326e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <prvCheckTasksWaitingTermination+0x58>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3b01      	subs	r3, #1
 8003276:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <prvCheckTasksWaitingTermination+0x58>)
 8003278:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800327a:	f000 fde3 	bl	8003e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f810 	bl	80032a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <prvCheckTasksWaitingTermination+0x58>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e1      	bne.n	8003250 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000bf8 	.word	0x20000bf8
 800329c:	20000c24 	.word	0x20000c24
 80032a0:	20000c0c 	.word	0x20000c0c

080032a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d108      	bne.n	80032c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 ff84 	bl	80041c8 <vPortFree>
				vPortFree( pxTCB );
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 ff81 	bl	80041c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032c6:	e01a      	b.n	80032fe <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d103      	bne.n	80032da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 ff78 	bl	80041c8 <vPortFree>
	}
 80032d8:	e011      	b.n	80032fe <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d00c      	beq.n	80032fe <prvDeleteTCB+0x5a>
	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	b672      	cpsid	i
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	b662      	cpsie	i
 80032f8:	60fb      	str	r3, [r7, #12]
}
 80032fa:	bf00      	nop
 80032fc:	e7fe      	b.n	80032fc <prvDeleteTCB+0x58>
	}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <prvResetNextTaskUnblockTime+0x38>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d104      	bne.n	8003322 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003318:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <prvResetNextTaskUnblockTime+0x3c>)
 800331a:	f04f 32ff 	mov.w	r2, #4294967295
 800331e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003320:	e008      	b.n	8003334 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003322:	4b07      	ldr	r3, [pc, #28]	; (8003340 <prvResetNextTaskUnblockTime+0x38>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a04      	ldr	r2, [pc, #16]	; (8003344 <prvResetNextTaskUnblockTime+0x3c>)
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	20000bdc 	.word	0x20000bdc
 8003344:	20000c44 	.word	0x20000c44

08003348 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <xTaskGetSchedulerState+0x34>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d102      	bne.n	800335c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003356:	2301      	movs	r3, #1
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	e008      	b.n	800336e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <xTaskGetSchedulerState+0x38>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003364:	2302      	movs	r3, #2
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	e001      	b.n	800336e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800336a:	2300      	movs	r3, #0
 800336c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800336e:	687b      	ldr	r3, [r7, #4]
	}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	20000c30 	.word	0x20000c30
 8003380:	20000c4c 	.word	0x20000c4c

08003384 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d05a      	beq.n	8003450 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800339a:	4b30      	ldr	r3, [pc, #192]	; (800345c <xTaskPriorityDisinherit+0xd8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d00c      	beq.n	80033be <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	b672      	cpsid	i
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	b662      	cpsie	i
 80033b8:	60fb      	str	r3, [r7, #12]
}
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	b672      	cpsid	i
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	b662      	cpsie	i
 80033da:	60bb      	str	r3, [r7, #8]
}
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e4:	1e5a      	subs	r2, r3, #1
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d02c      	beq.n	8003450 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d128      	bne.n	8003450 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	3304      	adds	r3, #4
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fc3e 	bl	8001c84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <xTaskPriorityDisinherit+0xdc>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d903      	bls.n	8003430 <xTaskPriorityDisinherit+0xac>
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <xTaskPriorityDisinherit+0xdc>)
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4a09      	ldr	r2, [pc, #36]	; (8003464 <xTaskPriorityDisinherit+0xe0>)
 800343e:	441a      	add	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3304      	adds	r3, #4
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f7fe fbbf 	bl	8001bca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800344c:	2301      	movs	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003450:	697b      	ldr	r3, [r7, #20]
	}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000750 	.word	0x20000750
 8003460:	20000c2c 	.word	0x20000c2c
 8003464:	20000754 	.word	0x20000754

08003468 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003472:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003478:	4b20      	ldr	r3, [pc, #128]	; (80034fc <prvAddCurrentTaskToDelayedList+0x94>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3304      	adds	r3, #4
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe fc00 	bl	8001c84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d10a      	bne.n	80034a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <prvAddCurrentTaskToDelayedList+0x94>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3304      	adds	r3, #4
 8003498:	4619      	mov	r1, r3
 800349a:	4819      	ldr	r0, [pc, #100]	; (8003500 <prvAddCurrentTaskToDelayedList+0x98>)
 800349c:	f7fe fb95 	bl	8001bca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034a0:	e026      	b.n	80034f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034aa:	4b14      	ldr	r3, [pc, #80]	; (80034fc <prvAddCurrentTaskToDelayedList+0x94>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d209      	bcs.n	80034ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <prvAddCurrentTaskToDelayedList+0x9c>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <prvAddCurrentTaskToDelayedList+0x94>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3304      	adds	r3, #4
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f7fe fba3 	bl	8001c12 <vListInsert>
}
 80034cc:	e010      	b.n	80034f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <prvAddCurrentTaskToDelayedList+0xa0>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <prvAddCurrentTaskToDelayedList+0x94>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f7fe fb99 	bl	8001c12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <prvAddCurrentTaskToDelayedList+0xa4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d202      	bcs.n	80034f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80034ea:	4a08      	ldr	r2, [pc, #32]	; (800350c <prvAddCurrentTaskToDelayedList+0xa4>)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000c28 	.word	0x20000c28
 80034fc:	20000750 	.word	0x20000750
 8003500:	20000c10 	.word	0x20000c10
 8003504:	20000be0 	.word	0x20000be0
 8003508:	20000bdc 	.word	0x20000bdc
 800350c:	20000c44 	.word	0x20000c44

08003510 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800351a:	f000 fb15 	bl	8003b48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <xTimerCreateTimerTask+0x84>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d021      	beq.n	800356a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800352e:	1d3a      	adds	r2, r7, #4
 8003530:	f107 0108 	add.w	r1, r7, #8
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe faff 	bl	8001b3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	9202      	str	r2, [sp, #8]
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	2302      	movs	r3, #2
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2300      	movs	r3, #0
 800354e:	460a      	mov	r2, r1
 8003550:	4911      	ldr	r1, [pc, #68]	; (8003598 <xTimerCreateTimerTask+0x88>)
 8003552:	4812      	ldr	r0, [pc, #72]	; (800359c <xTimerCreateTimerTask+0x8c>)
 8003554:	f7ff f8ca 	bl	80026ec <xTaskCreateStatic>
 8003558:	4603      	mov	r3, r0
 800355a:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <xTimerCreateTimerTask+0x90>)
 800355c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <xTimerCreateTimerTask+0x90>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003566:	2301      	movs	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10c      	bne.n	800358a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	b672      	cpsid	i
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	b662      	cpsie	i
 8003584:	613b      	str	r3, [r7, #16]
}
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800358a:	697b      	ldr	r3, [r7, #20]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000c80 	.word	0x20000c80
 8003598:	08004e68 	.word	0x08004e68
 800359c:	080036e1 	.word	0x080036e1
 80035a0:	20000c84 	.word	0x20000c84

080035a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10c      	bne.n	80035d6 <xTimerGenericCommand+0x32>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	b672      	cpsid	i
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	b662      	cpsie	i
 80035d0:	623b      	str	r3, [r7, #32]
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80035d6:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <xTimerGenericCommand+0x9c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d02a      	beq.n	8003634 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	dc18      	bgt.n	8003622 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80035f0:	f7ff feaa 	bl	8003348 <xTaskGetSchedulerState>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d109      	bne.n	800360e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80035fa:	4b11      	ldr	r3, [pc, #68]	; (8003640 <xTimerGenericCommand+0x9c>)
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	f107 0110 	add.w	r1, r7, #16
 8003602:	2300      	movs	r3, #0
 8003604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003606:	f7fe fc77 	bl	8001ef8 <xQueueGenericSend>
 800360a:	6278      	str	r0, [r7, #36]	; 0x24
 800360c:	e012      	b.n	8003634 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <xTimerGenericCommand+0x9c>)
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	f107 0110 	add.w	r1, r7, #16
 8003616:	2300      	movs	r3, #0
 8003618:	2200      	movs	r2, #0
 800361a:	f7fe fc6d 	bl	8001ef8 <xQueueGenericSend>
 800361e:	6278      	str	r0, [r7, #36]	; 0x24
 8003620:	e008      	b.n	8003634 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <xTimerGenericCommand+0x9c>)
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	f107 0110 	add.w	r1, r7, #16
 800362a:	2300      	movs	r3, #0
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	f7fe fd69 	bl	8002104 <xQueueGenericSendFromISR>
 8003632:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003636:	4618      	mov	r0, r3
 8003638:	3728      	adds	r7, #40	; 0x28
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000c80 	.word	0x20000c80

08003644 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800364e:	4b23      	ldr	r3, [pc, #140]	; (80036dc <prvProcessExpiredTimer+0x98>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	3304      	adds	r3, #4
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe fb11 	bl	8001c84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d024      	beq.n	80036ba <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	699a      	ldr	r2, [r3, #24]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	18d1      	adds	r1, r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	6978      	ldr	r0, [r7, #20]
 800367e:	f000 f8d3 	bl	8003828 <prvInsertTimerInActiveList>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d021      	beq.n	80036cc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003688:	2300      	movs	r3, #0
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2300      	movs	r3, #0
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	2100      	movs	r1, #0
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f7ff ff86 	bl	80035a4 <xTimerGenericCommand>
 8003698:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d115      	bne.n	80036cc <prvProcessExpiredTimer+0x88>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	b672      	cpsid	i
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	b662      	cpsie	i
 80036b4:	60fb      	str	r3, [r7, #12]
}
 80036b6:	bf00      	nop
 80036b8:	e7fe      	b.n	80036b8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	6978      	ldr	r0, [r7, #20]
 80036d2:	4798      	blx	r3
}
 80036d4:	bf00      	nop
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20000c78 	.word	0x20000c78

080036e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036e8:	f107 0308 	add.w	r3, r7, #8
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f857 	bl	80037a0 <prvGetNextExpireTime>
 80036f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4619      	mov	r1, r3
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f803 	bl	8003704 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80036fe:	f000 f8d5 	bl	80038ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003702:	e7f1      	b.n	80036e8 <prvTimerTask+0x8>

08003704 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800370e:	f7ff fa37 	bl	8002b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003712:	f107 0308 	add.w	r3, r7, #8
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f866 	bl	80037e8 <prvSampleTimeNow>
 800371c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d130      	bne.n	8003786 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <prvProcessTimerOrBlockTask+0x3c>
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	429a      	cmp	r2, r3
 8003730:	d806      	bhi.n	8003740 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003732:	f7ff fa33 	bl	8002b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ff83 	bl	8003644 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800373e:	e024      	b.n	800378a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <prvProcessTimerOrBlockTask+0x90>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <prvProcessTimerOrBlockTask+0x50>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <prvProcessTimerOrBlockTask+0x52>
 8003754:	2300      	movs	r3, #0
 8003756:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <prvProcessTimerOrBlockTask+0x94>)
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	4619      	mov	r1, r3
 8003766:	f7fe ff8d 	bl	8002684 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800376a:	f7ff fa17 	bl	8002b9c <xTaskResumeAll>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <prvProcessTimerOrBlockTask+0x98>)
 8003776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	f3bf 8f6f 	isb	sy
}
 8003784:	e001      	b.n	800378a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003786:	f7ff fa09 	bl	8002b9c <xTaskResumeAll>
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000c7c 	.word	0x20000c7c
 8003798:	20000c80 	.word	0x20000c80
 800379c:	e000ed04 	.word	0xe000ed04

080037a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <prvGetNextExpireTime+0x44>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <prvGetNextExpireTime+0x16>
 80037b2:	2201      	movs	r2, #1
 80037b4:	e000      	b.n	80037b8 <prvGetNextExpireTime+0x18>
 80037b6:	2200      	movs	r2, #0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <prvGetNextExpireTime+0x44>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e001      	b.n	80037d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80037d4:	68fb      	ldr	r3, [r7, #12]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000c78 	.word	0x20000c78

080037e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80037f0:	f7ff fa74 	bl	8002cdc <xTaskGetTickCount>
 80037f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <prvSampleTimeNow+0x3c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d205      	bcs.n	800380c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003800:	f000 f93c 	bl	8003a7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e002      	b.n	8003812 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003812:	4a04      	ldr	r2, [pc, #16]	; (8003824 <prvSampleTimeNow+0x3c>)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003818:	68fb      	ldr	r3, [r7, #12]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000c88 	.word	0x20000c88

08003828 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	429a      	cmp	r2, r3
 800384c:	d812      	bhi.n	8003874 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	1ad2      	subs	r2, r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	429a      	cmp	r2, r3
 800385a:	d302      	bcc.n	8003862 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800385c:	2301      	movs	r3, #1
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e01b      	b.n	800389a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <prvInsertTimerInActiveList+0x7c>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3304      	adds	r3, #4
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f7fe f9d0 	bl	8001c12 <vListInsert>
 8003872:	e012      	b.n	800389a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d206      	bcs.n	800388a <prvInsertTimerInActiveList+0x62>
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d302      	bcc.n	800388a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003884:	2301      	movs	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	e007      	b.n	800389a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <prvInsertTimerInActiveList+0x80>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3304      	adds	r3, #4
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f7fe f9bc 	bl	8001c12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800389a:	697b      	ldr	r3, [r7, #20]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000c7c 	.word	0x20000c7c
 80038a8:	20000c78 	.word	0x20000c78

080038ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08e      	sub	sp, #56	; 0x38
 80038b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038b2:	e0d0      	b.n	8003a56 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	da1a      	bge.n	80038f0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	3304      	adds	r3, #4
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10c      	bne.n	80038e0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	b672      	cpsid	i
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	b662      	cpsie	i
 80038da:	61fb      	str	r3, [r7, #28]
}
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e6:	6850      	ldr	r0, [r2, #4]
 80038e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ea:	6892      	ldr	r2, [r2, #8]
 80038ec:	4611      	mov	r1, r2
 80038ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f2c0 80ae 	blt.w	8003a54 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	3304      	adds	r3, #4
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe f9bb 	bl	8001c84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800390e:	463b      	mov	r3, r7
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff69 	bl	80037e8 <prvSampleTimeNow>
 8003916:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b09      	cmp	r3, #9
 800391c:	f200 809b 	bhi.w	8003a56 <prvProcessReceivedCommands+0x1aa>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <prvProcessReceivedCommands+0x7c>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	08003951 	.word	0x08003951
 800392c:	08003951 	.word	0x08003951
 8003930:	08003951 	.word	0x08003951
 8003934:	080039c9 	.word	0x080039c9
 8003938:	080039dd 	.word	0x080039dd
 800393c:	08003a2b 	.word	0x08003a2b
 8003940:	08003951 	.word	0x08003951
 8003944:	08003951 	.word	0x08003951
 8003948:	080039c9 	.word	0x080039c9
 800394c:	080039dd 	.word	0x080039dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	b2da      	uxtb	r2, r3
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	18d1      	adds	r1, r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003970:	f7ff ff5a 	bl	8003828 <prvInsertTimerInActiveList>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d06d      	beq.n	8003a56 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003980:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d062      	beq.n	8003a56 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	441a      	add	r2, r3
 8003998:	2300      	movs	r3, #0
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2300      	movs	r3, #0
 800399e:	2100      	movs	r1, #0
 80039a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039a2:	f7ff fdff 	bl	80035a4 <xTimerGenericCommand>
 80039a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d153      	bne.n	8003a56 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	b672      	cpsid	i
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	b662      	cpsie	i
 80039c2:	61bb      	str	r3, [r7, #24]
}
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80039da:	e03c      	b.n	8003a56 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10c      	bne.n	8003a16 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	b672      	cpsid	i
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	b662      	cpsie	i
 8003a10:	617b      	str	r3, [r7, #20]
}
 8003a12:	bf00      	nop
 8003a14:	e7fe      	b.n	8003a14 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	18d1      	adds	r1, r2, r3
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a24:	f7ff ff00 	bl	8003828 <prvInsertTimerInActiveList>
					break;
 8003a28:	e015      	b.n	8003a56 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d103      	bne.n	8003a40 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8003a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a3a:	f000 fbc5 	bl	80041c8 <vPortFree>
 8003a3e:	e00a      	b.n	8003a56 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a52:	e000      	b.n	8003a56 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003a54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <prvProcessReceivedCommands+0x1cc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	1d39      	adds	r1, r7, #4
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fbf0 	bl	8002244 <xQueueReceive>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f47f af24 	bne.w	80038b4 <prvProcessReceivedCommands+0x8>
	}
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	3730      	adds	r7, #48	; 0x30
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000c80 	.word	0x20000c80

08003a7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a82:	e04a      	b.n	8003b1a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a84:	4b2e      	ldr	r3, [pc, #184]	; (8003b40 <prvSwitchTimerLists+0xc4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a8e:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <prvSwitchTimerLists+0xc4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe f8f1 	bl	8001c84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d030      	beq.n	8003b1a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4413      	add	r3, r2
 8003ac0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d90e      	bls.n	8003ae8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <prvSwitchTimerLists+0xc4>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f7fe f896 	bl	8001c12 <vListInsert>
 8003ae6:	e018      	b.n	8003b1a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2300      	movs	r3, #0
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	2100      	movs	r1, #0
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff fd56 	bl	80035a4 <xTimerGenericCommand>
 8003af8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10c      	bne.n	8003b1a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	b672      	cpsid	i
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	b662      	cpsie	i
 8003b14:	603b      	str	r3, [r7, #0]
}
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <prvSwitchTimerLists+0xc4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1af      	bne.n	8003a84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <prvSwitchTimerLists+0xc4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <prvSwitchTimerLists+0xc8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <prvSwitchTimerLists+0xc4>)
 8003b30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003b32:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <prvSwitchTimerLists+0xc8>)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	6013      	str	r3, [r2, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000c78 	.word	0x20000c78
 8003b44:	20000c7c 	.word	0x20000c7c

08003b48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b4e:	f000 f945 	bl	8003ddc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <prvCheckForValidListAndQueue+0x60>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d120      	bne.n	8003b9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b5a:	4814      	ldr	r0, [pc, #80]	; (8003bac <prvCheckForValidListAndQueue+0x64>)
 8003b5c:	f7fe f808 	bl	8001b70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b60:	4813      	ldr	r0, [pc, #76]	; (8003bb0 <prvCheckForValidListAndQueue+0x68>)
 8003b62:	f7fe f805 	bl	8001b70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <prvCheckForValidListAndQueue+0x6c>)
 8003b68:	4a10      	ldr	r2, [pc, #64]	; (8003bac <prvCheckForValidListAndQueue+0x64>)
 8003b6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <prvCheckForValidListAndQueue+0x70>)
 8003b6e:	4a10      	ldr	r2, [pc, #64]	; (8003bb0 <prvCheckForValidListAndQueue+0x68>)
 8003b70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b72:	2300      	movs	r3, #0
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <prvCheckForValidListAndQueue+0x74>)
 8003b78:	4a11      	ldr	r2, [pc, #68]	; (8003bc0 <prvCheckForValidListAndQueue+0x78>)
 8003b7a:	2110      	movs	r1, #16
 8003b7c:	200a      	movs	r0, #10
 8003b7e:	f7fe f915 	bl	8001dac <xQueueGenericCreateStatic>
 8003b82:	4603      	mov	r3, r0
 8003b84:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <prvCheckForValidListAndQueue+0x60>)
 8003b86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b88:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <prvCheckForValidListAndQueue+0x60>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <prvCheckForValidListAndQueue+0x60>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	490b      	ldr	r1, [pc, #44]	; (8003bc4 <prvCheckForValidListAndQueue+0x7c>)
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe fd4a 	bl	8002630 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b9c:	f000 f952 	bl	8003e44 <vPortExitCritical>
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000c80 	.word	0x20000c80
 8003bac:	20000c50 	.word	0x20000c50
 8003bb0:	20000c64 	.word	0x20000c64
 8003bb4:	20000c78 	.word	0x20000c78
 8003bb8:	20000c7c 	.word	0x20000c7c
 8003bbc:	20000d2c 	.word	0x20000d2c
 8003bc0:	20000c8c 	.word	0x20000c8c
 8003bc4:	08004e70 	.word	0x08004e70

08003bc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3b04      	subs	r3, #4
 8003bd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3b04      	subs	r3, #4
 8003be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f023 0201 	bic.w	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3b04      	subs	r3, #4
 8003bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bf8:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <pxPortInitialiseStack+0x64>)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3b14      	subs	r3, #20
 8003c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3b04      	subs	r3, #4
 8003c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f06f 0202 	mvn.w	r2, #2
 8003c16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3b20      	subs	r3, #32
 8003c1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	08003c31 	.word	0x08003c31

08003c30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <prvTaskExitError+0x5c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d00c      	beq.n	8003c5e <prvTaskExitError+0x2e>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	b672      	cpsid	i
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	b662      	cpsie	i
 8003c58:	60fb      	str	r3, [r7, #12]
}
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <prvTaskExitError+0x2c>
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	b672      	cpsid	i
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	b662      	cpsie	i
 8003c72:	60bb      	str	r3, [r7, #8]
}
 8003c74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c76:	bf00      	nop
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0fc      	beq.n	8003c78 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	2000000c 	.word	0x2000000c

08003c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <pxCurrentTCBConst2>)
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	6808      	ldr	r0, [r1, #0]
 8003c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9a:	f380 8809 	msr	PSP, r0
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f04f 0000 	mov.w	r0, #0
 8003ca6:	f380 8811 	msr	BASEPRI, r0
 8003caa:	4770      	bx	lr
 8003cac:	f3af 8000 	nop.w

08003cb0 <pxCurrentTCBConst2>:
 8003cb0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop

08003cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003cb8:	4808      	ldr	r0, [pc, #32]	; (8003cdc <prvPortStartFirstTask+0x24>)
 8003cba:	6800      	ldr	r0, [r0, #0]
 8003cbc:	6800      	ldr	r0, [r0, #0]
 8003cbe:	f380 8808 	msr	MSP, r0
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f380 8814 	msr	CONTROL, r0
 8003cca:	b662      	cpsie	i
 8003ccc:	b661      	cpsie	f
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	df00      	svc	0
 8003cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003cda:	bf00      	nop
 8003cdc:	e000ed08 	.word	0xe000ed08

08003ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ce6:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <xPortStartScheduler+0xe4>)
 8003ce8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <xPortStartScheduler+0xe8>)
 8003d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d0e:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <xPortStartScheduler+0xec>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d14:	e009      	b.n	8003d2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003d16:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <xPortStartScheduler+0xec>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <xPortStartScheduler+0xec>)
 8003d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b80      	cmp	r3, #128	; 0x80
 8003d34:	d0ef      	beq.n	8003d16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d36:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <xPortStartScheduler+0xec>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1c3 0307 	rsb	r3, r3, #7
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d00c      	beq.n	8003d5c <xPortStartScheduler+0x7c>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	b672      	cpsid	i
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	b662      	cpsie	i
 8003d56:	60bb      	str	r3, [r7, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	e7fe      	b.n	8003d5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <xPortStartScheduler+0xec>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	4a1a      	ldr	r2, [pc, #104]	; (8003dcc <xPortStartScheduler+0xec>)
 8003d64:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d66:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <xPortStartScheduler+0xec>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d6e:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <xPortStartScheduler+0xec>)
 8003d70:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <xPortStartScheduler+0xf0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <xPortStartScheduler+0xf0>)
 8003d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <xPortStartScheduler+0xf0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <xPortStartScheduler+0xf0>)
 8003d8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d90:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d92:	f000 f8dd 	bl	8003f50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <xPortStartScheduler+0xf4>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d9c:	f000 f8fc 	bl	8003f98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <xPortStartScheduler+0xf8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <xPortStartScheduler+0xf8>)
 8003da6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003daa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003dac:	f7ff ff84 	bl	8003cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003db0:	f7ff f850 	bl	8002e54 <vTaskSwitchContext>
	prvTaskExitError();
 8003db4:	f7ff ff3c 	bl	8003c30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	e000e400 	.word	0xe000e400
 8003dc8:	20000d7c 	.word	0x20000d7c
 8003dcc:	20000d80 	.word	0x20000d80
 8003dd0:	e000ed20 	.word	0xe000ed20
 8003dd4:	2000000c 	.word	0x2000000c
 8003dd8:	e000ef34 	.word	0xe000ef34

08003ddc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	b672      	cpsid	i
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	b662      	cpsie	i
 8003df6:	607b      	str	r3, [r7, #4]
}
 8003df8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <vPortEnterCritical+0x60>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <vPortEnterCritical+0x60>)
 8003e02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e04:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <vPortEnterCritical+0x60>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d111      	bne.n	8003e30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <vPortEnterCritical+0x64>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00c      	beq.n	8003e30 <vPortEnterCritical+0x54>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1a:	b672      	cpsid	i
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	b662      	cpsie	i
 8003e2a:	603b      	str	r3, [r7, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <vPortEnterCritical+0x52>
	}
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e4a:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <vPortExitCritical+0x54>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10c      	bne.n	8003e6c <vPortExitCritical+0x28>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	b672      	cpsid	i
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	b662      	cpsie	i
 8003e66:	607b      	str	r3, [r7, #4]
}
 8003e68:	bf00      	nop
 8003e6a:	e7fe      	b.n	8003e6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <vPortExitCritical+0x54>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <vPortExitCritical+0x54>)
 8003e74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <vPortExitCritical+0x54>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d105      	bne.n	8003e8a <vPortExitCritical+0x46>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f383 8811 	msr	BASEPRI, r3
}
 8003e88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	2000000c 	.word	0x2000000c
 8003e9c:	00000000 	.word	0x00000000

08003ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ea0:	f3ef 8009 	mrs	r0, PSP
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <pxCurrentTCBConst>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	f01e 0f10 	tst.w	lr, #16
 8003eb0:	bf08      	it	eq
 8003eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eba:	6010      	str	r0, [r2, #0]
 8003ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ec4:	b672      	cpsid	i
 8003ec6:	f380 8811 	msr	BASEPRI, r0
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	b662      	cpsie	i
 8003ed4:	f7fe ffbe 	bl	8002e54 <vTaskSwitchContext>
 8003ed8:	f04f 0000 	mov.w	r0, #0
 8003edc:	f380 8811 	msr	BASEPRI, r0
 8003ee0:	bc09      	pop	{r0, r3}
 8003ee2:	6819      	ldr	r1, [r3, #0]
 8003ee4:	6808      	ldr	r0, [r1, #0]
 8003ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eea:	f01e 0f10 	tst.w	lr, #16
 8003eee:	bf08      	it	eq
 8003ef0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ef4:	f380 8809 	msr	PSP, r0
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop

08003f00 <pxCurrentTCBConst>:
 8003f00:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop

08003f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	b672      	cpsid	i
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	b662      	cpsie	i
 8003f22:	607b      	str	r3, [r7, #4]
}
 8003f24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f26:	f7fe fee9 	bl	8002cfc <xTaskIncrementTick>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <xPortSysTickHandler+0x44>)
 8003f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	f383 8811 	msr	BASEPRI, r3
}
 8003f42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <vPortSetupTimerInterrupt+0x34>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <vPortSetupTimerInterrupt+0x38>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <vPortSetupTimerInterrupt+0x3c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <vPortSetupTimerInterrupt+0x40>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	099b      	lsrs	r3, r3, #6
 8003f6c:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <vPortSetupTimerInterrupt+0x44>)
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <vPortSetupTimerInterrupt+0x34>)
 8003f74:	2207      	movs	r2, #7
 8003f76:	601a      	str	r2, [r3, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	e000e010 	.word	0xe000e010
 8003f88:	e000e018 	.word	0xe000e018
 8003f8c:	20000000 	.word	0x20000000
 8003f90:	10624dd3 	.word	0x10624dd3
 8003f94:	e000e014 	.word	0xe000e014

08003f98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003fa8 <vPortEnableVFP+0x10>
 8003f9c:	6801      	ldr	r1, [r0, #0]
 8003f9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003fa2:	6001      	str	r1, [r0, #0]
 8003fa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003fa6:	bf00      	nop
 8003fa8:	e000ed88 	.word	0xe000ed88

08003fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003fb2:	f3ef 8305 	mrs	r3, IPSR
 8003fb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d916      	bls.n	8003fec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fbe:	4a19      	ldr	r2, [pc, #100]	; (8004024 <vPortValidateInterruptPriority+0x78>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fc8:	4b17      	ldr	r3, [pc, #92]	; (8004028 <vPortValidateInterruptPriority+0x7c>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	7afa      	ldrb	r2, [r7, #11]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d20c      	bcs.n	8003fec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	b672      	cpsid	i
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	b662      	cpsie	i
 8003fe6:	607b      	str	r3, [r7, #4]
}
 8003fe8:	bf00      	nop
 8003fea:	e7fe      	b.n	8003fea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003fec:	4b0f      	ldr	r3, [pc, #60]	; (800402c <vPortValidateInterruptPriority+0x80>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <vPortValidateInterruptPriority+0x84>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d90c      	bls.n	8004016 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	b672      	cpsid	i
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	b662      	cpsie	i
 8004010:	603b      	str	r3, [r7, #0]
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <vPortValidateInterruptPriority+0x68>
	}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000e3f0 	.word	0xe000e3f0
 8004028:	20000d7c 	.word	0x20000d7c
 800402c:	e000ed0c 	.word	0xe000ed0c
 8004030:	20000d80 	.word	0x20000d80

08004034 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	; 0x28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800403c:	2300      	movs	r3, #0
 800403e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004040:	f7fe fd9e 	bl	8002b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004044:	4b5b      	ldr	r3, [pc, #364]	; (80041b4 <pvPortMalloc+0x180>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800404c:	f000 f91a 	bl	8004284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004050:	4b59      	ldr	r3, [pc, #356]	; (80041b8 <pvPortMalloc+0x184>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 8092 	bne.w	8004182 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01f      	beq.n	80040a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004064:	2208      	movs	r2, #8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f023 0307 	bic.w	r3, r3, #7
 800407c:	3308      	adds	r3, #8
 800407e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <pvPortMalloc+0x70>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	b672      	cpsid	i
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	b662      	cpsie	i
 800409e:	617b      	str	r3, [r7, #20]
}
 80040a0:	bf00      	nop
 80040a2:	e7fe      	b.n	80040a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d06b      	beq.n	8004182 <pvPortMalloc+0x14e>
 80040aa:	4b44      	ldr	r3, [pc, #272]	; (80041bc <pvPortMalloc+0x188>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d866      	bhi.n	8004182 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040b4:	4b42      	ldr	r3, [pc, #264]	; (80041c0 <pvPortMalloc+0x18c>)
 80040b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040b8:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <pvPortMalloc+0x18c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040be:	e004      	b.n	80040ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d903      	bls.n	80040dc <pvPortMalloc+0xa8>
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f1      	bne.n	80040c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040dc:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <pvPortMalloc+0x180>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d04d      	beq.n	8004182 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2208      	movs	r2, #8
 80040ec:	4413      	add	r3, r2
 80040ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	1ad2      	subs	r2, r2, r3
 8004100:	2308      	movs	r3, #8
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	429a      	cmp	r2, r3
 8004106:	d921      	bls.n	800414c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00c      	beq.n	8004134 <pvPortMalloc+0x100>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	b672      	cpsid	i
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	b662      	cpsie	i
 800412e:	613b      	str	r3, [r7, #16]
}
 8004130:	bf00      	nop
 8004132:	e7fe      	b.n	8004132 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	1ad2      	subs	r2, r2, r3
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004146:	69b8      	ldr	r0, [r7, #24]
 8004148:	f000 f8fe 	bl	8004348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <pvPortMalloc+0x188>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	4a19      	ldr	r2, [pc, #100]	; (80041bc <pvPortMalloc+0x188>)
 8004158:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800415a:	4b18      	ldr	r3, [pc, #96]	; (80041bc <pvPortMalloc+0x188>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <pvPortMalloc+0x190>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d203      	bcs.n	800416e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <pvPortMalloc+0x188>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <pvPortMalloc+0x190>)
 800416c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <pvPortMalloc+0x184>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	431a      	orrs	r2, r3
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004182:	f7fe fd0b 	bl	8002b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <pvPortMalloc+0x176>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	b672      	cpsid	i
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	b662      	cpsie	i
 80041a4:	60fb      	str	r3, [r7, #12]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <pvPortMalloc+0x174>
	return pvReturn;
 80041aa:	69fb      	ldr	r3, [r7, #28]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3728      	adds	r7, #40	; 0x28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	2000498c 	.word	0x2000498c
 80041b8:	20004998 	.word	0x20004998
 80041bc:	20004990 	.word	0x20004990
 80041c0:	20004984 	.word	0x20004984
 80041c4:	20004994 	.word	0x20004994

080041c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d04c      	beq.n	8004274 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041da:	2308      	movs	r3, #8
 80041dc:	425b      	negs	r3, r3
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4413      	add	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	4b23      	ldr	r3, [pc, #140]	; (800427c <vPortFree+0xb4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10c      	bne.n	8004210 <vPortFree+0x48>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	b672      	cpsid	i
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	b662      	cpsie	i
 800420a:	60fb      	str	r3, [r7, #12]
}
 800420c:	bf00      	nop
 800420e:	e7fe      	b.n	800420e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00c      	beq.n	8004232 <vPortFree+0x6a>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	b672      	cpsid	i
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	b662      	cpsie	i
 800422c:	60bb      	str	r3, [r7, #8]
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	4b11      	ldr	r3, [pc, #68]	; (800427c <vPortFree+0xb4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d019      	beq.n	8004274 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d115      	bne.n	8004274 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <vPortFree+0xb4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004258:	f7fe fc92 	bl	8002b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <vPortFree+0xb8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4413      	add	r3, r2
 8004266:	4a06      	ldr	r2, [pc, #24]	; (8004280 <vPortFree+0xb8>)
 8004268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800426a:	6938      	ldr	r0, [r7, #16]
 800426c:	f000 f86c 	bl	8004348 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004270:	f7fe fc94 	bl	8002b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004274:	bf00      	nop
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20004998 	.word	0x20004998
 8004280:	20004990 	.word	0x20004990

08004284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800428a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800428e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004290:	4b27      	ldr	r3, [pc, #156]	; (8004330 <prvHeapInit+0xac>)
 8004292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3307      	adds	r3, #7
 80042a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0307 	bic.w	r3, r3, #7
 80042aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	4a1f      	ldr	r2, [pc, #124]	; (8004330 <prvHeapInit+0xac>)
 80042b4:	4413      	add	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042bc:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <prvHeapInit+0xb0>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042c2:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <prvHeapInit+0xb0>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	4413      	add	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042d0:	2208      	movs	r2, #8
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0307 	bic.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a15      	ldr	r2, [pc, #84]	; (8004338 <prvHeapInit+0xb4>)
 80042e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042e6:	4b14      	ldr	r3, [pc, #80]	; (8004338 <prvHeapInit+0xb4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042ee:	4b12      	ldr	r3, [pc, #72]	; (8004338 <prvHeapInit+0xb4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	1ad2      	subs	r2, r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <prvHeapInit+0xb4>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a0a      	ldr	r2, [pc, #40]	; (800433c <prvHeapInit+0xb8>)
 8004312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a09      	ldr	r2, [pc, #36]	; (8004340 <prvHeapInit+0xbc>)
 800431a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <prvHeapInit+0xc0>)
 800431e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	20000d84 	.word	0x20000d84
 8004334:	20004984 	.word	0x20004984
 8004338:	2000498c 	.word	0x2000498c
 800433c:	20004994 	.word	0x20004994
 8004340:	20004990 	.word	0x20004990
 8004344:	20004998 	.word	0x20004998

08004348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004350:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <prvInsertBlockIntoFreeList+0xac>)
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e002      	b.n	800435c <prvInsertBlockIntoFreeList+0x14>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	d8f7      	bhi.n	8004356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	4413      	add	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d108      	bne.n	800438a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	441a      	add	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	441a      	add	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d118      	bne.n	80043d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <prvInsertBlockIntoFreeList+0xb0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d00d      	beq.n	80043c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e008      	b.n	80043d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <prvInsertBlockIntoFreeList+0xb0>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e003      	b.n	80043d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d002      	beq.n	80043e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20004984 	.word	0x20004984
 80043f8:	2000498c 	.word	0x2000498c

080043fc <__errno>:
 80043fc:	4b01      	ldr	r3, [pc, #4]	; (8004404 <__errno+0x8>)
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000010 	.word	0x20000010

08004408 <__libc_init_array>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4d0d      	ldr	r5, [pc, #52]	; (8004440 <__libc_init_array+0x38>)
 800440c:	4c0d      	ldr	r4, [pc, #52]	; (8004444 <__libc_init_array+0x3c>)
 800440e:	1b64      	subs	r4, r4, r5
 8004410:	10a4      	asrs	r4, r4, #2
 8004412:	2600      	movs	r6, #0
 8004414:	42a6      	cmp	r6, r4
 8004416:	d109      	bne.n	800442c <__libc_init_array+0x24>
 8004418:	4d0b      	ldr	r5, [pc, #44]	; (8004448 <__libc_init_array+0x40>)
 800441a:	4c0c      	ldr	r4, [pc, #48]	; (800444c <__libc_init_array+0x44>)
 800441c:	f000 fcf4 	bl	8004e08 <_init>
 8004420:	1b64      	subs	r4, r4, r5
 8004422:	10a4      	asrs	r4, r4, #2
 8004424:	2600      	movs	r6, #0
 8004426:	42a6      	cmp	r6, r4
 8004428:	d105      	bne.n	8004436 <__libc_init_array+0x2e>
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004430:	4798      	blx	r3
 8004432:	3601      	adds	r6, #1
 8004434:	e7ee      	b.n	8004414 <__libc_init_array+0xc>
 8004436:	f855 3b04 	ldr.w	r3, [r5], #4
 800443a:	4798      	blx	r3
 800443c:	3601      	adds	r6, #1
 800443e:	e7f2      	b.n	8004426 <__libc_init_array+0x1e>
 8004440:	08004f3c 	.word	0x08004f3c
 8004444:	08004f3c 	.word	0x08004f3c
 8004448:	08004f3c 	.word	0x08004f3c
 800444c:	08004f40 	.word	0x08004f40

08004450 <memcpy>:
 8004450:	440a      	add	r2, r1
 8004452:	4291      	cmp	r1, r2
 8004454:	f100 33ff 	add.w	r3, r0, #4294967295
 8004458:	d100      	bne.n	800445c <memcpy+0xc>
 800445a:	4770      	bx	lr
 800445c:	b510      	push	{r4, lr}
 800445e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004462:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004466:	4291      	cmp	r1, r2
 8004468:	d1f9      	bne.n	800445e <memcpy+0xe>
 800446a:	bd10      	pop	{r4, pc}

0800446c <memset>:
 800446c:	4402      	add	r2, r0
 800446e:	4603      	mov	r3, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <_puts_r>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	460e      	mov	r6, r1
 8004480:	4605      	mov	r5, r0
 8004482:	b118      	cbz	r0, 800448c <_puts_r+0x10>
 8004484:	6983      	ldr	r3, [r0, #24]
 8004486:	b90b      	cbnz	r3, 800448c <_puts_r+0x10>
 8004488:	f000 fa48 	bl	800491c <__sinit>
 800448c:	69ab      	ldr	r3, [r5, #24]
 800448e:	68ac      	ldr	r4, [r5, #8]
 8004490:	b913      	cbnz	r3, 8004498 <_puts_r+0x1c>
 8004492:	4628      	mov	r0, r5
 8004494:	f000 fa42 	bl	800491c <__sinit>
 8004498:	4b2c      	ldr	r3, [pc, #176]	; (800454c <_puts_r+0xd0>)
 800449a:	429c      	cmp	r4, r3
 800449c:	d120      	bne.n	80044e0 <_puts_r+0x64>
 800449e:	686c      	ldr	r4, [r5, #4]
 80044a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044a2:	07db      	lsls	r3, r3, #31
 80044a4:	d405      	bmi.n	80044b2 <_puts_r+0x36>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	0598      	lsls	r0, r3, #22
 80044aa:	d402      	bmi.n	80044b2 <_puts_r+0x36>
 80044ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ae:	f000 fad3 	bl	8004a58 <__retarget_lock_acquire_recursive>
 80044b2:	89a3      	ldrh	r3, [r4, #12]
 80044b4:	0719      	lsls	r1, r3, #28
 80044b6:	d51d      	bpl.n	80044f4 <_puts_r+0x78>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	b1db      	cbz	r3, 80044f4 <_puts_r+0x78>
 80044bc:	3e01      	subs	r6, #1
 80044be:	68a3      	ldr	r3, [r4, #8]
 80044c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044c4:	3b01      	subs	r3, #1
 80044c6:	60a3      	str	r3, [r4, #8]
 80044c8:	bb39      	cbnz	r1, 800451a <_puts_r+0x9e>
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	da38      	bge.n	8004540 <_puts_r+0xc4>
 80044ce:	4622      	mov	r2, r4
 80044d0:	210a      	movs	r1, #10
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 f848 	bl	8004568 <__swbuf_r>
 80044d8:	3001      	adds	r0, #1
 80044da:	d011      	beq.n	8004500 <_puts_r+0x84>
 80044dc:	250a      	movs	r5, #10
 80044de:	e011      	b.n	8004504 <_puts_r+0x88>
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <_puts_r+0xd4>)
 80044e2:	429c      	cmp	r4, r3
 80044e4:	d101      	bne.n	80044ea <_puts_r+0x6e>
 80044e6:	68ac      	ldr	r4, [r5, #8]
 80044e8:	e7da      	b.n	80044a0 <_puts_r+0x24>
 80044ea:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <_puts_r+0xd8>)
 80044ec:	429c      	cmp	r4, r3
 80044ee:	bf08      	it	eq
 80044f0:	68ec      	ldreq	r4, [r5, #12]
 80044f2:	e7d5      	b.n	80044a0 <_puts_r+0x24>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 f888 	bl	800460c <__swsetup_r>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d0dd      	beq.n	80044bc <_puts_r+0x40>
 8004500:	f04f 35ff 	mov.w	r5, #4294967295
 8004504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004506:	07da      	lsls	r2, r3, #31
 8004508:	d405      	bmi.n	8004516 <_puts_r+0x9a>
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	059b      	lsls	r3, r3, #22
 800450e:	d402      	bmi.n	8004516 <_puts_r+0x9a>
 8004510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004512:	f000 faa2 	bl	8004a5a <__retarget_lock_release_recursive>
 8004516:	4628      	mov	r0, r5
 8004518:	bd70      	pop	{r4, r5, r6, pc}
 800451a:	2b00      	cmp	r3, #0
 800451c:	da04      	bge.n	8004528 <_puts_r+0xac>
 800451e:	69a2      	ldr	r2, [r4, #24]
 8004520:	429a      	cmp	r2, r3
 8004522:	dc06      	bgt.n	8004532 <_puts_r+0xb6>
 8004524:	290a      	cmp	r1, #10
 8004526:	d004      	beq.n	8004532 <_puts_r+0xb6>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	6022      	str	r2, [r4, #0]
 800452e:	7019      	strb	r1, [r3, #0]
 8004530:	e7c5      	b.n	80044be <_puts_r+0x42>
 8004532:	4622      	mov	r2, r4
 8004534:	4628      	mov	r0, r5
 8004536:	f000 f817 	bl	8004568 <__swbuf_r>
 800453a:	3001      	adds	r0, #1
 800453c:	d1bf      	bne.n	80044be <_puts_r+0x42>
 800453e:	e7df      	b.n	8004500 <_puts_r+0x84>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	250a      	movs	r5, #10
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	6022      	str	r2, [r4, #0]
 8004548:	701d      	strb	r5, [r3, #0]
 800454a:	e7db      	b.n	8004504 <_puts_r+0x88>
 800454c:	08004ef4 	.word	0x08004ef4
 8004550:	08004f14 	.word	0x08004f14
 8004554:	08004ed4 	.word	0x08004ed4

08004558 <puts>:
 8004558:	4b02      	ldr	r3, [pc, #8]	; (8004564 <puts+0xc>)
 800455a:	4601      	mov	r1, r0
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	f7ff bf8d 	b.w	800447c <_puts_r>
 8004562:	bf00      	nop
 8004564:	20000010 	.word	0x20000010

08004568 <__swbuf_r>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	460e      	mov	r6, r1
 800456c:	4614      	mov	r4, r2
 800456e:	4605      	mov	r5, r0
 8004570:	b118      	cbz	r0, 800457a <__swbuf_r+0x12>
 8004572:	6983      	ldr	r3, [r0, #24]
 8004574:	b90b      	cbnz	r3, 800457a <__swbuf_r+0x12>
 8004576:	f000 f9d1 	bl	800491c <__sinit>
 800457a:	4b21      	ldr	r3, [pc, #132]	; (8004600 <__swbuf_r+0x98>)
 800457c:	429c      	cmp	r4, r3
 800457e:	d12b      	bne.n	80045d8 <__swbuf_r+0x70>
 8004580:	686c      	ldr	r4, [r5, #4]
 8004582:	69a3      	ldr	r3, [r4, #24]
 8004584:	60a3      	str	r3, [r4, #8]
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	071a      	lsls	r2, r3, #28
 800458a:	d52f      	bpl.n	80045ec <__swbuf_r+0x84>
 800458c:	6923      	ldr	r3, [r4, #16]
 800458e:	b36b      	cbz	r3, 80045ec <__swbuf_r+0x84>
 8004590:	6923      	ldr	r3, [r4, #16]
 8004592:	6820      	ldr	r0, [r4, #0]
 8004594:	1ac0      	subs	r0, r0, r3
 8004596:	6963      	ldr	r3, [r4, #20]
 8004598:	b2f6      	uxtb	r6, r6
 800459a:	4283      	cmp	r3, r0
 800459c:	4637      	mov	r7, r6
 800459e:	dc04      	bgt.n	80045aa <__swbuf_r+0x42>
 80045a0:	4621      	mov	r1, r4
 80045a2:	4628      	mov	r0, r5
 80045a4:	f000 f926 	bl	80047f4 <_fflush_r>
 80045a8:	bb30      	cbnz	r0, 80045f8 <__swbuf_r+0x90>
 80045aa:	68a3      	ldr	r3, [r4, #8]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	60a3      	str	r3, [r4, #8]
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	6022      	str	r2, [r4, #0]
 80045b6:	701e      	strb	r6, [r3, #0]
 80045b8:	6963      	ldr	r3, [r4, #20]
 80045ba:	3001      	adds	r0, #1
 80045bc:	4283      	cmp	r3, r0
 80045be:	d004      	beq.n	80045ca <__swbuf_r+0x62>
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	07db      	lsls	r3, r3, #31
 80045c4:	d506      	bpl.n	80045d4 <__swbuf_r+0x6c>
 80045c6:	2e0a      	cmp	r6, #10
 80045c8:	d104      	bne.n	80045d4 <__swbuf_r+0x6c>
 80045ca:	4621      	mov	r1, r4
 80045cc:	4628      	mov	r0, r5
 80045ce:	f000 f911 	bl	80047f4 <_fflush_r>
 80045d2:	b988      	cbnz	r0, 80045f8 <__swbuf_r+0x90>
 80045d4:	4638      	mov	r0, r7
 80045d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <__swbuf_r+0x9c>)
 80045da:	429c      	cmp	r4, r3
 80045dc:	d101      	bne.n	80045e2 <__swbuf_r+0x7a>
 80045de:	68ac      	ldr	r4, [r5, #8]
 80045e0:	e7cf      	b.n	8004582 <__swbuf_r+0x1a>
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <__swbuf_r+0xa0>)
 80045e4:	429c      	cmp	r4, r3
 80045e6:	bf08      	it	eq
 80045e8:	68ec      	ldreq	r4, [r5, #12]
 80045ea:	e7ca      	b.n	8004582 <__swbuf_r+0x1a>
 80045ec:	4621      	mov	r1, r4
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 f80c 	bl	800460c <__swsetup_r>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d0cb      	beq.n	8004590 <__swbuf_r+0x28>
 80045f8:	f04f 37ff 	mov.w	r7, #4294967295
 80045fc:	e7ea      	b.n	80045d4 <__swbuf_r+0x6c>
 80045fe:	bf00      	nop
 8004600:	08004ef4 	.word	0x08004ef4
 8004604:	08004f14 	.word	0x08004f14
 8004608:	08004ed4 	.word	0x08004ed4

0800460c <__swsetup_r>:
 800460c:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <__swsetup_r+0xcc>)
 800460e:	b570      	push	{r4, r5, r6, lr}
 8004610:	681d      	ldr	r5, [r3, #0]
 8004612:	4606      	mov	r6, r0
 8004614:	460c      	mov	r4, r1
 8004616:	b125      	cbz	r5, 8004622 <__swsetup_r+0x16>
 8004618:	69ab      	ldr	r3, [r5, #24]
 800461a:	b913      	cbnz	r3, 8004622 <__swsetup_r+0x16>
 800461c:	4628      	mov	r0, r5
 800461e:	f000 f97d 	bl	800491c <__sinit>
 8004622:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <__swsetup_r+0xd0>)
 8004624:	429c      	cmp	r4, r3
 8004626:	d10f      	bne.n	8004648 <__swsetup_r+0x3c>
 8004628:	686c      	ldr	r4, [r5, #4]
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004630:	0719      	lsls	r1, r3, #28
 8004632:	d42c      	bmi.n	800468e <__swsetup_r+0x82>
 8004634:	06dd      	lsls	r5, r3, #27
 8004636:	d411      	bmi.n	800465c <__swsetup_r+0x50>
 8004638:	2309      	movs	r3, #9
 800463a:	6033      	str	r3, [r6, #0]
 800463c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004640:	81a3      	strh	r3, [r4, #12]
 8004642:	f04f 30ff 	mov.w	r0, #4294967295
 8004646:	e03e      	b.n	80046c6 <__swsetup_r+0xba>
 8004648:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <__swsetup_r+0xd4>)
 800464a:	429c      	cmp	r4, r3
 800464c:	d101      	bne.n	8004652 <__swsetup_r+0x46>
 800464e:	68ac      	ldr	r4, [r5, #8]
 8004650:	e7eb      	b.n	800462a <__swsetup_r+0x1e>
 8004652:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <__swsetup_r+0xd8>)
 8004654:	429c      	cmp	r4, r3
 8004656:	bf08      	it	eq
 8004658:	68ec      	ldreq	r4, [r5, #12]
 800465a:	e7e6      	b.n	800462a <__swsetup_r+0x1e>
 800465c:	0758      	lsls	r0, r3, #29
 800465e:	d512      	bpl.n	8004686 <__swsetup_r+0x7a>
 8004660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004662:	b141      	cbz	r1, 8004676 <__swsetup_r+0x6a>
 8004664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004668:	4299      	cmp	r1, r3
 800466a:	d002      	beq.n	8004672 <__swsetup_r+0x66>
 800466c:	4630      	mov	r0, r6
 800466e:	f000 fa59 	bl	8004b24 <_free_r>
 8004672:	2300      	movs	r3, #0
 8004674:	6363      	str	r3, [r4, #52]	; 0x34
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	2300      	movs	r3, #0
 8004680:	6063      	str	r3, [r4, #4]
 8004682:	6923      	ldr	r3, [r4, #16]
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	f043 0308 	orr.w	r3, r3, #8
 800468c:	81a3      	strh	r3, [r4, #12]
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	b94b      	cbnz	r3, 80046a6 <__swsetup_r+0x9a>
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800469c:	d003      	beq.n	80046a6 <__swsetup_r+0x9a>
 800469e:	4621      	mov	r1, r4
 80046a0:	4630      	mov	r0, r6
 80046a2:	f000 f9ff 	bl	8004aa4 <__smakebuf_r>
 80046a6:	89a0      	ldrh	r0, [r4, #12]
 80046a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046ac:	f010 0301 	ands.w	r3, r0, #1
 80046b0:	d00a      	beq.n	80046c8 <__swsetup_r+0xbc>
 80046b2:	2300      	movs	r3, #0
 80046b4:	60a3      	str	r3, [r4, #8]
 80046b6:	6963      	ldr	r3, [r4, #20]
 80046b8:	425b      	negs	r3, r3
 80046ba:	61a3      	str	r3, [r4, #24]
 80046bc:	6923      	ldr	r3, [r4, #16]
 80046be:	b943      	cbnz	r3, 80046d2 <__swsetup_r+0xc6>
 80046c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046c4:	d1ba      	bne.n	800463c <__swsetup_r+0x30>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	0781      	lsls	r1, r0, #30
 80046ca:	bf58      	it	pl
 80046cc:	6963      	ldrpl	r3, [r4, #20]
 80046ce:	60a3      	str	r3, [r4, #8]
 80046d0:	e7f4      	b.n	80046bc <__swsetup_r+0xb0>
 80046d2:	2000      	movs	r0, #0
 80046d4:	e7f7      	b.n	80046c6 <__swsetup_r+0xba>
 80046d6:	bf00      	nop
 80046d8:	20000010 	.word	0x20000010
 80046dc:	08004ef4 	.word	0x08004ef4
 80046e0:	08004f14 	.word	0x08004f14
 80046e4:	08004ed4 	.word	0x08004ed4

080046e8 <__sflush_r>:
 80046e8:	898a      	ldrh	r2, [r1, #12]
 80046ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ee:	4605      	mov	r5, r0
 80046f0:	0710      	lsls	r0, r2, #28
 80046f2:	460c      	mov	r4, r1
 80046f4:	d458      	bmi.n	80047a8 <__sflush_r+0xc0>
 80046f6:	684b      	ldr	r3, [r1, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dc05      	bgt.n	8004708 <__sflush_r+0x20>
 80046fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	dc02      	bgt.n	8004708 <__sflush_r+0x20>
 8004702:	2000      	movs	r0, #0
 8004704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800470a:	2e00      	cmp	r6, #0
 800470c:	d0f9      	beq.n	8004702 <__sflush_r+0x1a>
 800470e:	2300      	movs	r3, #0
 8004710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004714:	682f      	ldr	r7, [r5, #0]
 8004716:	602b      	str	r3, [r5, #0]
 8004718:	d032      	beq.n	8004780 <__sflush_r+0x98>
 800471a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800471c:	89a3      	ldrh	r3, [r4, #12]
 800471e:	075a      	lsls	r2, r3, #29
 8004720:	d505      	bpl.n	800472e <__sflush_r+0x46>
 8004722:	6863      	ldr	r3, [r4, #4]
 8004724:	1ac0      	subs	r0, r0, r3
 8004726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004728:	b10b      	cbz	r3, 800472e <__sflush_r+0x46>
 800472a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800472c:	1ac0      	subs	r0, r0, r3
 800472e:	2300      	movs	r3, #0
 8004730:	4602      	mov	r2, r0
 8004732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004734:	6a21      	ldr	r1, [r4, #32]
 8004736:	4628      	mov	r0, r5
 8004738:	47b0      	blx	r6
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	d106      	bne.n	800474e <__sflush_r+0x66>
 8004740:	6829      	ldr	r1, [r5, #0]
 8004742:	291d      	cmp	r1, #29
 8004744:	d82c      	bhi.n	80047a0 <__sflush_r+0xb8>
 8004746:	4a2a      	ldr	r2, [pc, #168]	; (80047f0 <__sflush_r+0x108>)
 8004748:	40ca      	lsrs	r2, r1
 800474a:	07d6      	lsls	r6, r2, #31
 800474c:	d528      	bpl.n	80047a0 <__sflush_r+0xb8>
 800474e:	2200      	movs	r2, #0
 8004750:	6062      	str	r2, [r4, #4]
 8004752:	04d9      	lsls	r1, r3, #19
 8004754:	6922      	ldr	r2, [r4, #16]
 8004756:	6022      	str	r2, [r4, #0]
 8004758:	d504      	bpl.n	8004764 <__sflush_r+0x7c>
 800475a:	1c42      	adds	r2, r0, #1
 800475c:	d101      	bne.n	8004762 <__sflush_r+0x7a>
 800475e:	682b      	ldr	r3, [r5, #0]
 8004760:	b903      	cbnz	r3, 8004764 <__sflush_r+0x7c>
 8004762:	6560      	str	r0, [r4, #84]	; 0x54
 8004764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004766:	602f      	str	r7, [r5, #0]
 8004768:	2900      	cmp	r1, #0
 800476a:	d0ca      	beq.n	8004702 <__sflush_r+0x1a>
 800476c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004770:	4299      	cmp	r1, r3
 8004772:	d002      	beq.n	800477a <__sflush_r+0x92>
 8004774:	4628      	mov	r0, r5
 8004776:	f000 f9d5 	bl	8004b24 <_free_r>
 800477a:	2000      	movs	r0, #0
 800477c:	6360      	str	r0, [r4, #52]	; 0x34
 800477e:	e7c1      	b.n	8004704 <__sflush_r+0x1c>
 8004780:	6a21      	ldr	r1, [r4, #32]
 8004782:	2301      	movs	r3, #1
 8004784:	4628      	mov	r0, r5
 8004786:	47b0      	blx	r6
 8004788:	1c41      	adds	r1, r0, #1
 800478a:	d1c7      	bne.n	800471c <__sflush_r+0x34>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0c4      	beq.n	800471c <__sflush_r+0x34>
 8004792:	2b1d      	cmp	r3, #29
 8004794:	d001      	beq.n	800479a <__sflush_r+0xb2>
 8004796:	2b16      	cmp	r3, #22
 8004798:	d101      	bne.n	800479e <__sflush_r+0xb6>
 800479a:	602f      	str	r7, [r5, #0]
 800479c:	e7b1      	b.n	8004702 <__sflush_r+0x1a>
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a4:	81a3      	strh	r3, [r4, #12]
 80047a6:	e7ad      	b.n	8004704 <__sflush_r+0x1c>
 80047a8:	690f      	ldr	r7, [r1, #16]
 80047aa:	2f00      	cmp	r7, #0
 80047ac:	d0a9      	beq.n	8004702 <__sflush_r+0x1a>
 80047ae:	0793      	lsls	r3, r2, #30
 80047b0:	680e      	ldr	r6, [r1, #0]
 80047b2:	bf08      	it	eq
 80047b4:	694b      	ldreq	r3, [r1, #20]
 80047b6:	600f      	str	r7, [r1, #0]
 80047b8:	bf18      	it	ne
 80047ba:	2300      	movne	r3, #0
 80047bc:	eba6 0807 	sub.w	r8, r6, r7
 80047c0:	608b      	str	r3, [r1, #8]
 80047c2:	f1b8 0f00 	cmp.w	r8, #0
 80047c6:	dd9c      	ble.n	8004702 <__sflush_r+0x1a>
 80047c8:	6a21      	ldr	r1, [r4, #32]
 80047ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047cc:	4643      	mov	r3, r8
 80047ce:	463a      	mov	r2, r7
 80047d0:	4628      	mov	r0, r5
 80047d2:	47b0      	blx	r6
 80047d4:	2800      	cmp	r0, #0
 80047d6:	dc06      	bgt.n	80047e6 <__sflush_r+0xfe>
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047de:	81a3      	strh	r3, [r4, #12]
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	e78e      	b.n	8004704 <__sflush_r+0x1c>
 80047e6:	4407      	add	r7, r0
 80047e8:	eba8 0800 	sub.w	r8, r8, r0
 80047ec:	e7e9      	b.n	80047c2 <__sflush_r+0xda>
 80047ee:	bf00      	nop
 80047f0:	20400001 	.word	0x20400001

080047f4 <_fflush_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	690b      	ldr	r3, [r1, #16]
 80047f8:	4605      	mov	r5, r0
 80047fa:	460c      	mov	r4, r1
 80047fc:	b913      	cbnz	r3, 8004804 <_fflush_r+0x10>
 80047fe:	2500      	movs	r5, #0
 8004800:	4628      	mov	r0, r5
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	b118      	cbz	r0, 800480e <_fflush_r+0x1a>
 8004806:	6983      	ldr	r3, [r0, #24]
 8004808:	b90b      	cbnz	r3, 800480e <_fflush_r+0x1a>
 800480a:	f000 f887 	bl	800491c <__sinit>
 800480e:	4b14      	ldr	r3, [pc, #80]	; (8004860 <_fflush_r+0x6c>)
 8004810:	429c      	cmp	r4, r3
 8004812:	d11b      	bne.n	800484c <_fflush_r+0x58>
 8004814:	686c      	ldr	r4, [r5, #4]
 8004816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0ef      	beq.n	80047fe <_fflush_r+0xa>
 800481e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004820:	07d0      	lsls	r0, r2, #31
 8004822:	d404      	bmi.n	800482e <_fflush_r+0x3a>
 8004824:	0599      	lsls	r1, r3, #22
 8004826:	d402      	bmi.n	800482e <_fflush_r+0x3a>
 8004828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800482a:	f000 f915 	bl	8004a58 <__retarget_lock_acquire_recursive>
 800482e:	4628      	mov	r0, r5
 8004830:	4621      	mov	r1, r4
 8004832:	f7ff ff59 	bl	80046e8 <__sflush_r>
 8004836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004838:	07da      	lsls	r2, r3, #31
 800483a:	4605      	mov	r5, r0
 800483c:	d4e0      	bmi.n	8004800 <_fflush_r+0xc>
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	059b      	lsls	r3, r3, #22
 8004842:	d4dd      	bmi.n	8004800 <_fflush_r+0xc>
 8004844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004846:	f000 f908 	bl	8004a5a <__retarget_lock_release_recursive>
 800484a:	e7d9      	b.n	8004800 <_fflush_r+0xc>
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <_fflush_r+0x70>)
 800484e:	429c      	cmp	r4, r3
 8004850:	d101      	bne.n	8004856 <_fflush_r+0x62>
 8004852:	68ac      	ldr	r4, [r5, #8]
 8004854:	e7df      	b.n	8004816 <_fflush_r+0x22>
 8004856:	4b04      	ldr	r3, [pc, #16]	; (8004868 <_fflush_r+0x74>)
 8004858:	429c      	cmp	r4, r3
 800485a:	bf08      	it	eq
 800485c:	68ec      	ldreq	r4, [r5, #12]
 800485e:	e7da      	b.n	8004816 <_fflush_r+0x22>
 8004860:	08004ef4 	.word	0x08004ef4
 8004864:	08004f14 	.word	0x08004f14
 8004868:	08004ed4 	.word	0x08004ed4

0800486c <std>:
 800486c:	2300      	movs	r3, #0
 800486e:	b510      	push	{r4, lr}
 8004870:	4604      	mov	r4, r0
 8004872:	e9c0 3300 	strd	r3, r3, [r0]
 8004876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800487a:	6083      	str	r3, [r0, #8]
 800487c:	8181      	strh	r1, [r0, #12]
 800487e:	6643      	str	r3, [r0, #100]	; 0x64
 8004880:	81c2      	strh	r2, [r0, #14]
 8004882:	6183      	str	r3, [r0, #24]
 8004884:	4619      	mov	r1, r3
 8004886:	2208      	movs	r2, #8
 8004888:	305c      	adds	r0, #92	; 0x5c
 800488a:	f7ff fdef 	bl	800446c <memset>
 800488e:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <std+0x38>)
 8004890:	6263      	str	r3, [r4, #36]	; 0x24
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <std+0x3c>)
 8004894:	62a3      	str	r3, [r4, #40]	; 0x28
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <std+0x40>)
 8004898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <std+0x44>)
 800489c:	6224      	str	r4, [r4, #32]
 800489e:	6323      	str	r3, [r4, #48]	; 0x30
 80048a0:	bd10      	pop	{r4, pc}
 80048a2:	bf00      	nop
 80048a4:	08004c99 	.word	0x08004c99
 80048a8:	08004cbb 	.word	0x08004cbb
 80048ac:	08004cf3 	.word	0x08004cf3
 80048b0:	08004d17 	.word	0x08004d17

080048b4 <_cleanup_r>:
 80048b4:	4901      	ldr	r1, [pc, #4]	; (80048bc <_cleanup_r+0x8>)
 80048b6:	f000 b8af 	b.w	8004a18 <_fwalk_reent>
 80048ba:	bf00      	nop
 80048bc:	080047f5 	.word	0x080047f5

080048c0 <__sfmoreglue>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	1e4a      	subs	r2, r1, #1
 80048c4:	2568      	movs	r5, #104	; 0x68
 80048c6:	4355      	muls	r5, r2
 80048c8:	460e      	mov	r6, r1
 80048ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80048ce:	f000 f979 	bl	8004bc4 <_malloc_r>
 80048d2:	4604      	mov	r4, r0
 80048d4:	b140      	cbz	r0, 80048e8 <__sfmoreglue+0x28>
 80048d6:	2100      	movs	r1, #0
 80048d8:	e9c0 1600 	strd	r1, r6, [r0]
 80048dc:	300c      	adds	r0, #12
 80048de:	60a0      	str	r0, [r4, #8]
 80048e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80048e4:	f7ff fdc2 	bl	800446c <memset>
 80048e8:	4620      	mov	r0, r4
 80048ea:	bd70      	pop	{r4, r5, r6, pc}

080048ec <__sfp_lock_acquire>:
 80048ec:	4801      	ldr	r0, [pc, #4]	; (80048f4 <__sfp_lock_acquire+0x8>)
 80048ee:	f000 b8b3 	b.w	8004a58 <__retarget_lock_acquire_recursive>
 80048f2:	bf00      	nop
 80048f4:	200049f8 	.word	0x200049f8

080048f8 <__sfp_lock_release>:
 80048f8:	4801      	ldr	r0, [pc, #4]	; (8004900 <__sfp_lock_release+0x8>)
 80048fa:	f000 b8ae 	b.w	8004a5a <__retarget_lock_release_recursive>
 80048fe:	bf00      	nop
 8004900:	200049f8 	.word	0x200049f8

08004904 <__sinit_lock_acquire>:
 8004904:	4801      	ldr	r0, [pc, #4]	; (800490c <__sinit_lock_acquire+0x8>)
 8004906:	f000 b8a7 	b.w	8004a58 <__retarget_lock_acquire_recursive>
 800490a:	bf00      	nop
 800490c:	200049f3 	.word	0x200049f3

08004910 <__sinit_lock_release>:
 8004910:	4801      	ldr	r0, [pc, #4]	; (8004918 <__sinit_lock_release+0x8>)
 8004912:	f000 b8a2 	b.w	8004a5a <__retarget_lock_release_recursive>
 8004916:	bf00      	nop
 8004918:	200049f3 	.word	0x200049f3

0800491c <__sinit>:
 800491c:	b510      	push	{r4, lr}
 800491e:	4604      	mov	r4, r0
 8004920:	f7ff fff0 	bl	8004904 <__sinit_lock_acquire>
 8004924:	69a3      	ldr	r3, [r4, #24]
 8004926:	b11b      	cbz	r3, 8004930 <__sinit+0x14>
 8004928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800492c:	f7ff bff0 	b.w	8004910 <__sinit_lock_release>
 8004930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004934:	6523      	str	r3, [r4, #80]	; 0x50
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <__sinit+0x68>)
 8004938:	4a13      	ldr	r2, [pc, #76]	; (8004988 <__sinit+0x6c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	62a2      	str	r2, [r4, #40]	; 0x28
 800493e:	42a3      	cmp	r3, r4
 8004940:	bf04      	itt	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	61a3      	streq	r3, [r4, #24]
 8004946:	4620      	mov	r0, r4
 8004948:	f000 f820 	bl	800498c <__sfp>
 800494c:	6060      	str	r0, [r4, #4]
 800494e:	4620      	mov	r0, r4
 8004950:	f000 f81c 	bl	800498c <__sfp>
 8004954:	60a0      	str	r0, [r4, #8]
 8004956:	4620      	mov	r0, r4
 8004958:	f000 f818 	bl	800498c <__sfp>
 800495c:	2200      	movs	r2, #0
 800495e:	60e0      	str	r0, [r4, #12]
 8004960:	2104      	movs	r1, #4
 8004962:	6860      	ldr	r0, [r4, #4]
 8004964:	f7ff ff82 	bl	800486c <std>
 8004968:	68a0      	ldr	r0, [r4, #8]
 800496a:	2201      	movs	r2, #1
 800496c:	2109      	movs	r1, #9
 800496e:	f7ff ff7d 	bl	800486c <std>
 8004972:	68e0      	ldr	r0, [r4, #12]
 8004974:	2202      	movs	r2, #2
 8004976:	2112      	movs	r1, #18
 8004978:	f7ff ff78 	bl	800486c <std>
 800497c:	2301      	movs	r3, #1
 800497e:	61a3      	str	r3, [r4, #24]
 8004980:	e7d2      	b.n	8004928 <__sinit+0xc>
 8004982:	bf00      	nop
 8004984:	08004ed0 	.word	0x08004ed0
 8004988:	080048b5 	.word	0x080048b5

0800498c <__sfp>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	4607      	mov	r7, r0
 8004990:	f7ff ffac 	bl	80048ec <__sfp_lock_acquire>
 8004994:	4b1e      	ldr	r3, [pc, #120]	; (8004a10 <__sfp+0x84>)
 8004996:	681e      	ldr	r6, [r3, #0]
 8004998:	69b3      	ldr	r3, [r6, #24]
 800499a:	b913      	cbnz	r3, 80049a2 <__sfp+0x16>
 800499c:	4630      	mov	r0, r6
 800499e:	f7ff ffbd 	bl	800491c <__sinit>
 80049a2:	3648      	adds	r6, #72	; 0x48
 80049a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	d503      	bpl.n	80049b4 <__sfp+0x28>
 80049ac:	6833      	ldr	r3, [r6, #0]
 80049ae:	b30b      	cbz	r3, 80049f4 <__sfp+0x68>
 80049b0:	6836      	ldr	r6, [r6, #0]
 80049b2:	e7f7      	b.n	80049a4 <__sfp+0x18>
 80049b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049b8:	b9d5      	cbnz	r5, 80049f0 <__sfp+0x64>
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <__sfp+0x88>)
 80049bc:	60e3      	str	r3, [r4, #12]
 80049be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049c2:	6665      	str	r5, [r4, #100]	; 0x64
 80049c4:	f000 f847 	bl	8004a56 <__retarget_lock_init_recursive>
 80049c8:	f7ff ff96 	bl	80048f8 <__sfp_lock_release>
 80049cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80049d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80049d4:	6025      	str	r5, [r4, #0]
 80049d6:	61a5      	str	r5, [r4, #24]
 80049d8:	2208      	movs	r2, #8
 80049da:	4629      	mov	r1, r5
 80049dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049e0:	f7ff fd44 	bl	800446c <memset>
 80049e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80049e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80049ec:	4620      	mov	r0, r4
 80049ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f0:	3468      	adds	r4, #104	; 0x68
 80049f2:	e7d9      	b.n	80049a8 <__sfp+0x1c>
 80049f4:	2104      	movs	r1, #4
 80049f6:	4638      	mov	r0, r7
 80049f8:	f7ff ff62 	bl	80048c0 <__sfmoreglue>
 80049fc:	4604      	mov	r4, r0
 80049fe:	6030      	str	r0, [r6, #0]
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d1d5      	bne.n	80049b0 <__sfp+0x24>
 8004a04:	f7ff ff78 	bl	80048f8 <__sfp_lock_release>
 8004a08:	230c      	movs	r3, #12
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	e7ee      	b.n	80049ec <__sfp+0x60>
 8004a0e:	bf00      	nop
 8004a10:	08004ed0 	.word	0x08004ed0
 8004a14:	ffff0001 	.word	0xffff0001

08004a18 <_fwalk_reent>:
 8004a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	4688      	mov	r8, r1
 8004a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a24:	2700      	movs	r7, #0
 8004a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8004a2e:	d505      	bpl.n	8004a3c <_fwalk_reent+0x24>
 8004a30:	6824      	ldr	r4, [r4, #0]
 8004a32:	2c00      	cmp	r4, #0
 8004a34:	d1f7      	bne.n	8004a26 <_fwalk_reent+0xe>
 8004a36:	4638      	mov	r0, r7
 8004a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a3c:	89ab      	ldrh	r3, [r5, #12]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d907      	bls.n	8004a52 <_fwalk_reent+0x3a>
 8004a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a46:	3301      	adds	r3, #1
 8004a48:	d003      	beq.n	8004a52 <_fwalk_reent+0x3a>
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	47c0      	blx	r8
 8004a50:	4307      	orrs	r7, r0
 8004a52:	3568      	adds	r5, #104	; 0x68
 8004a54:	e7e9      	b.n	8004a2a <_fwalk_reent+0x12>

08004a56 <__retarget_lock_init_recursive>:
 8004a56:	4770      	bx	lr

08004a58 <__retarget_lock_acquire_recursive>:
 8004a58:	4770      	bx	lr

08004a5a <__retarget_lock_release_recursive>:
 8004a5a:	4770      	bx	lr

08004a5c <__swhatbuf_r>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	460e      	mov	r6, r1
 8004a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a64:	2900      	cmp	r1, #0
 8004a66:	b096      	sub	sp, #88	; 0x58
 8004a68:	4614      	mov	r4, r2
 8004a6a:	461d      	mov	r5, r3
 8004a6c:	da07      	bge.n	8004a7e <__swhatbuf_r+0x22>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	602b      	str	r3, [r5, #0]
 8004a72:	89b3      	ldrh	r3, [r6, #12]
 8004a74:	061a      	lsls	r2, r3, #24
 8004a76:	d410      	bmi.n	8004a9a <__swhatbuf_r+0x3e>
 8004a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a7c:	e00e      	b.n	8004a9c <__swhatbuf_r+0x40>
 8004a7e:	466a      	mov	r2, sp
 8004a80:	f000 f970 	bl	8004d64 <_fstat_r>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	dbf2      	blt.n	8004a6e <__swhatbuf_r+0x12>
 8004a88:	9a01      	ldr	r2, [sp, #4]
 8004a8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a92:	425a      	negs	r2, r3
 8004a94:	415a      	adcs	r2, r3
 8004a96:	602a      	str	r2, [r5, #0]
 8004a98:	e7ee      	b.n	8004a78 <__swhatbuf_r+0x1c>
 8004a9a:	2340      	movs	r3, #64	; 0x40
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	6023      	str	r3, [r4, #0]
 8004aa0:	b016      	add	sp, #88	; 0x58
 8004aa2:	bd70      	pop	{r4, r5, r6, pc}

08004aa4 <__smakebuf_r>:
 8004aa4:	898b      	ldrh	r3, [r1, #12]
 8004aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004aa8:	079d      	lsls	r5, r3, #30
 8004aaa:	4606      	mov	r6, r0
 8004aac:	460c      	mov	r4, r1
 8004aae:	d507      	bpl.n	8004ac0 <__smakebuf_r+0x1c>
 8004ab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	6123      	str	r3, [r4, #16]
 8004ab8:	2301      	movs	r3, #1
 8004aba:	6163      	str	r3, [r4, #20]
 8004abc:	b002      	add	sp, #8
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
 8004ac0:	ab01      	add	r3, sp, #4
 8004ac2:	466a      	mov	r2, sp
 8004ac4:	f7ff ffca 	bl	8004a5c <__swhatbuf_r>
 8004ac8:	9900      	ldr	r1, [sp, #0]
 8004aca:	4605      	mov	r5, r0
 8004acc:	4630      	mov	r0, r6
 8004ace:	f000 f879 	bl	8004bc4 <_malloc_r>
 8004ad2:	b948      	cbnz	r0, 8004ae8 <__smakebuf_r+0x44>
 8004ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ad8:	059a      	lsls	r2, r3, #22
 8004ada:	d4ef      	bmi.n	8004abc <__smakebuf_r+0x18>
 8004adc:	f023 0303 	bic.w	r3, r3, #3
 8004ae0:	f043 0302 	orr.w	r3, r3, #2
 8004ae4:	81a3      	strh	r3, [r4, #12]
 8004ae6:	e7e3      	b.n	8004ab0 <__smakebuf_r+0xc>
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <__smakebuf_r+0x7c>)
 8004aea:	62b3      	str	r3, [r6, #40]	; 0x28
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	6020      	str	r0, [r4, #0]
 8004af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af4:	81a3      	strh	r3, [r4, #12]
 8004af6:	9b00      	ldr	r3, [sp, #0]
 8004af8:	6163      	str	r3, [r4, #20]
 8004afa:	9b01      	ldr	r3, [sp, #4]
 8004afc:	6120      	str	r0, [r4, #16]
 8004afe:	b15b      	cbz	r3, 8004b18 <__smakebuf_r+0x74>
 8004b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b04:	4630      	mov	r0, r6
 8004b06:	f000 f93f 	bl	8004d88 <_isatty_r>
 8004b0a:	b128      	cbz	r0, 8004b18 <__smakebuf_r+0x74>
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	81a3      	strh	r3, [r4, #12]
 8004b18:	89a0      	ldrh	r0, [r4, #12]
 8004b1a:	4305      	orrs	r5, r0
 8004b1c:	81a5      	strh	r5, [r4, #12]
 8004b1e:	e7cd      	b.n	8004abc <__smakebuf_r+0x18>
 8004b20:	080048b5 	.word	0x080048b5

08004b24 <_free_r>:
 8004b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b26:	2900      	cmp	r1, #0
 8004b28:	d048      	beq.n	8004bbc <_free_r+0x98>
 8004b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2e:	9001      	str	r0, [sp, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f1a1 0404 	sub.w	r4, r1, #4
 8004b36:	bfb8      	it	lt
 8004b38:	18e4      	addlt	r4, r4, r3
 8004b3a:	f000 f947 	bl	8004dcc <__malloc_lock>
 8004b3e:	4a20      	ldr	r2, [pc, #128]	; (8004bc0 <_free_r+0x9c>)
 8004b40:	9801      	ldr	r0, [sp, #4]
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	4615      	mov	r5, r2
 8004b46:	b933      	cbnz	r3, 8004b56 <_free_r+0x32>
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	6014      	str	r4, [r2, #0]
 8004b4c:	b003      	add	sp, #12
 8004b4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b52:	f000 b941 	b.w	8004dd8 <__malloc_unlock>
 8004b56:	42a3      	cmp	r3, r4
 8004b58:	d90b      	bls.n	8004b72 <_free_r+0x4e>
 8004b5a:	6821      	ldr	r1, [r4, #0]
 8004b5c:	1862      	adds	r2, r4, r1
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	bf04      	itt	eq
 8004b62:	681a      	ldreq	r2, [r3, #0]
 8004b64:	685b      	ldreq	r3, [r3, #4]
 8004b66:	6063      	str	r3, [r4, #4]
 8004b68:	bf04      	itt	eq
 8004b6a:	1852      	addeq	r2, r2, r1
 8004b6c:	6022      	streq	r2, [r4, #0]
 8004b6e:	602c      	str	r4, [r5, #0]
 8004b70:	e7ec      	b.n	8004b4c <_free_r+0x28>
 8004b72:	461a      	mov	r2, r3
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	b10b      	cbz	r3, 8004b7c <_free_r+0x58>
 8004b78:	42a3      	cmp	r3, r4
 8004b7a:	d9fa      	bls.n	8004b72 <_free_r+0x4e>
 8004b7c:	6811      	ldr	r1, [r2, #0]
 8004b7e:	1855      	adds	r5, r2, r1
 8004b80:	42a5      	cmp	r5, r4
 8004b82:	d10b      	bne.n	8004b9c <_free_r+0x78>
 8004b84:	6824      	ldr	r4, [r4, #0]
 8004b86:	4421      	add	r1, r4
 8004b88:	1854      	adds	r4, r2, r1
 8004b8a:	42a3      	cmp	r3, r4
 8004b8c:	6011      	str	r1, [r2, #0]
 8004b8e:	d1dd      	bne.n	8004b4c <_free_r+0x28>
 8004b90:	681c      	ldr	r4, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	6053      	str	r3, [r2, #4]
 8004b96:	4421      	add	r1, r4
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	e7d7      	b.n	8004b4c <_free_r+0x28>
 8004b9c:	d902      	bls.n	8004ba4 <_free_r+0x80>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	6003      	str	r3, [r0, #0]
 8004ba2:	e7d3      	b.n	8004b4c <_free_r+0x28>
 8004ba4:	6825      	ldr	r5, [r4, #0]
 8004ba6:	1961      	adds	r1, r4, r5
 8004ba8:	428b      	cmp	r3, r1
 8004baa:	bf04      	itt	eq
 8004bac:	6819      	ldreq	r1, [r3, #0]
 8004bae:	685b      	ldreq	r3, [r3, #4]
 8004bb0:	6063      	str	r3, [r4, #4]
 8004bb2:	bf04      	itt	eq
 8004bb4:	1949      	addeq	r1, r1, r5
 8004bb6:	6021      	streq	r1, [r4, #0]
 8004bb8:	6054      	str	r4, [r2, #4]
 8004bba:	e7c7      	b.n	8004b4c <_free_r+0x28>
 8004bbc:	b003      	add	sp, #12
 8004bbe:	bd30      	pop	{r4, r5, pc}
 8004bc0:	2000499c 	.word	0x2000499c

08004bc4 <_malloc_r>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	1ccd      	adds	r5, r1, #3
 8004bc8:	f025 0503 	bic.w	r5, r5, #3
 8004bcc:	3508      	adds	r5, #8
 8004bce:	2d0c      	cmp	r5, #12
 8004bd0:	bf38      	it	cc
 8004bd2:	250c      	movcc	r5, #12
 8004bd4:	2d00      	cmp	r5, #0
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	db01      	blt.n	8004bde <_malloc_r+0x1a>
 8004bda:	42a9      	cmp	r1, r5
 8004bdc:	d903      	bls.n	8004be6 <_malloc_r+0x22>
 8004bde:	230c      	movs	r3, #12
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	2000      	movs	r0, #0
 8004be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be6:	f000 f8f1 	bl	8004dcc <__malloc_lock>
 8004bea:	4921      	ldr	r1, [pc, #132]	; (8004c70 <_malloc_r+0xac>)
 8004bec:	680a      	ldr	r2, [r1, #0]
 8004bee:	4614      	mov	r4, r2
 8004bf0:	b99c      	cbnz	r4, 8004c1a <_malloc_r+0x56>
 8004bf2:	4f20      	ldr	r7, [pc, #128]	; (8004c74 <_malloc_r+0xb0>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	b923      	cbnz	r3, 8004c02 <_malloc_r+0x3e>
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f000 f83c 	bl	8004c78 <_sbrk_r>
 8004c00:	6038      	str	r0, [r7, #0]
 8004c02:	4629      	mov	r1, r5
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 f837 	bl	8004c78 <_sbrk_r>
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	d123      	bne.n	8004c56 <_malloc_r+0x92>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	6033      	str	r3, [r6, #0]
 8004c12:	4630      	mov	r0, r6
 8004c14:	f000 f8e0 	bl	8004dd8 <__malloc_unlock>
 8004c18:	e7e3      	b.n	8004be2 <_malloc_r+0x1e>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	1b5b      	subs	r3, r3, r5
 8004c1e:	d417      	bmi.n	8004c50 <_malloc_r+0x8c>
 8004c20:	2b0b      	cmp	r3, #11
 8004c22:	d903      	bls.n	8004c2c <_malloc_r+0x68>
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	441c      	add	r4, r3
 8004c28:	6025      	str	r5, [r4, #0]
 8004c2a:	e004      	b.n	8004c36 <_malloc_r+0x72>
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	42a2      	cmp	r2, r4
 8004c30:	bf0c      	ite	eq
 8004c32:	600b      	streq	r3, [r1, #0]
 8004c34:	6053      	strne	r3, [r2, #4]
 8004c36:	4630      	mov	r0, r6
 8004c38:	f000 f8ce 	bl	8004dd8 <__malloc_unlock>
 8004c3c:	f104 000b 	add.w	r0, r4, #11
 8004c40:	1d23      	adds	r3, r4, #4
 8004c42:	f020 0007 	bic.w	r0, r0, #7
 8004c46:	1ac2      	subs	r2, r0, r3
 8004c48:	d0cc      	beq.n	8004be4 <_malloc_r+0x20>
 8004c4a:	1a1b      	subs	r3, r3, r0
 8004c4c:	50a3      	str	r3, [r4, r2]
 8004c4e:	e7c9      	b.n	8004be4 <_malloc_r+0x20>
 8004c50:	4622      	mov	r2, r4
 8004c52:	6864      	ldr	r4, [r4, #4]
 8004c54:	e7cc      	b.n	8004bf0 <_malloc_r+0x2c>
 8004c56:	1cc4      	adds	r4, r0, #3
 8004c58:	f024 0403 	bic.w	r4, r4, #3
 8004c5c:	42a0      	cmp	r0, r4
 8004c5e:	d0e3      	beq.n	8004c28 <_malloc_r+0x64>
 8004c60:	1a21      	subs	r1, r4, r0
 8004c62:	4630      	mov	r0, r6
 8004c64:	f000 f808 	bl	8004c78 <_sbrk_r>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d1dd      	bne.n	8004c28 <_malloc_r+0x64>
 8004c6c:	e7cf      	b.n	8004c0e <_malloc_r+0x4a>
 8004c6e:	bf00      	nop
 8004c70:	2000499c 	.word	0x2000499c
 8004c74:	200049a0 	.word	0x200049a0

08004c78 <_sbrk_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d06      	ldr	r5, [pc, #24]	; (8004c94 <_sbrk_r+0x1c>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	f7fb fe20 	bl	80008c8 <_sbrk>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_sbrk_r+0x1a>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_sbrk_r+0x1a>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	200049fc 	.word	0x200049fc

08004c98 <__sread>:
 8004c98:	b510      	push	{r4, lr}
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca0:	f000 f8a0 	bl	8004de4 <_read_r>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	bfab      	itete	ge
 8004ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004caa:	89a3      	ldrhlt	r3, [r4, #12]
 8004cac:	181b      	addge	r3, r3, r0
 8004cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cb2:	bfac      	ite	ge
 8004cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cb6:	81a3      	strhlt	r3, [r4, #12]
 8004cb8:	bd10      	pop	{r4, pc}

08004cba <__swrite>:
 8004cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbe:	461f      	mov	r7, r3
 8004cc0:	898b      	ldrh	r3, [r1, #12]
 8004cc2:	05db      	lsls	r3, r3, #23
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	4616      	mov	r6, r2
 8004cca:	d505      	bpl.n	8004cd8 <__swrite+0x1e>
 8004ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f000 f868 	bl	8004da8 <_lseek_r>
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	4628      	mov	r0, r5
 8004cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cee:	f000 b817 	b.w	8004d20 <_write_r>

08004cf2 <__sseek>:
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfa:	f000 f855 	bl	8004da8 <_lseek_r>
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	bf15      	itete	ne
 8004d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d0e:	81a3      	strheq	r3, [r4, #12]
 8004d10:	bf18      	it	ne
 8004d12:	81a3      	strhne	r3, [r4, #12]
 8004d14:	bd10      	pop	{r4, pc}

08004d16 <__sclose>:
 8004d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1a:	f000 b813 	b.w	8004d44 <_close_r>
	...

08004d20 <_write_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4d07      	ldr	r5, [pc, #28]	; (8004d40 <_write_r+0x20>)
 8004d24:	4604      	mov	r4, r0
 8004d26:	4608      	mov	r0, r1
 8004d28:	4611      	mov	r1, r2
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	602a      	str	r2, [r5, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f7fb fd79 	bl	8000826 <_write>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d102      	bne.n	8004d3e <_write_r+0x1e>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	b103      	cbz	r3, 8004d3e <_write_r+0x1e>
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	200049fc 	.word	0x200049fc

08004d44 <_close_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4d06      	ldr	r5, [pc, #24]	; (8004d60 <_close_r+0x1c>)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	602b      	str	r3, [r5, #0]
 8004d50:	f7fb fd85 	bl	800085e <_close>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_close_r+0x1a>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_close_r+0x1a>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	200049fc 	.word	0x200049fc

08004d64 <_fstat_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d07      	ldr	r5, [pc, #28]	; (8004d84 <_fstat_r+0x20>)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	602b      	str	r3, [r5, #0]
 8004d72:	f7fb fd80 	bl	8000876 <_fstat>
 8004d76:	1c43      	adds	r3, r0, #1
 8004d78:	d102      	bne.n	8004d80 <_fstat_r+0x1c>
 8004d7a:	682b      	ldr	r3, [r5, #0]
 8004d7c:	b103      	cbz	r3, 8004d80 <_fstat_r+0x1c>
 8004d7e:	6023      	str	r3, [r4, #0]
 8004d80:	bd38      	pop	{r3, r4, r5, pc}
 8004d82:	bf00      	nop
 8004d84:	200049fc 	.word	0x200049fc

08004d88 <_isatty_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d06      	ldr	r5, [pc, #24]	; (8004da4 <_isatty_r+0x1c>)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4608      	mov	r0, r1
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	f7fb fd7f 	bl	8000896 <_isatty>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_isatty_r+0x1a>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_isatty_r+0x1a>
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	200049fc 	.word	0x200049fc

08004da8 <_lseek_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4d07      	ldr	r5, [pc, #28]	; (8004dc8 <_lseek_r+0x20>)
 8004dac:	4604      	mov	r4, r0
 8004dae:	4608      	mov	r0, r1
 8004db0:	4611      	mov	r1, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	602a      	str	r2, [r5, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f7fb fd78 	bl	80008ac <_lseek>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_lseek_r+0x1e>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_lseek_r+0x1e>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	200049fc 	.word	0x200049fc

08004dcc <__malloc_lock>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__malloc_lock+0x8>)
 8004dce:	f7ff be43 	b.w	8004a58 <__retarget_lock_acquire_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	200049f4 	.word	0x200049f4

08004dd8 <__malloc_unlock>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <__malloc_unlock+0x8>)
 8004dda:	f7ff be3e 	b.w	8004a5a <__retarget_lock_release_recursive>
 8004dde:	bf00      	nop
 8004de0:	200049f4 	.word	0x200049f4

08004de4 <_read_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4d07      	ldr	r5, [pc, #28]	; (8004e04 <_read_r+0x20>)
 8004de8:	4604      	mov	r4, r0
 8004dea:	4608      	mov	r0, r1
 8004dec:	4611      	mov	r1, r2
 8004dee:	2200      	movs	r2, #0
 8004df0:	602a      	str	r2, [r5, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f7fb fcfa 	bl	80007ec <_read>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_read_r+0x1e>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_read_r+0x1e>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	200049fc 	.word	0x200049fc

08004e08 <_init>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	bf00      	nop
 8004e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0e:	bc08      	pop	{r3}
 8004e10:	469e      	mov	lr, r3
 8004e12:	4770      	bx	lr

08004e14 <_fini>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	bf00      	nop
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr
