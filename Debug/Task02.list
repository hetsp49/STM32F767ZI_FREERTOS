
Task02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004ff0  08004ff0  00014ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f0  080050f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080050f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004994  20000074  0800516c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a08  0800516c  00024a08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f52  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ba  00000000  00000000  00032ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000359b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00036600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040c6  00000000  00000000  00037138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db7a  00000000  00000000  0003b1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6d35  00000000  00000000  00048d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013faad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b4  00000000  00000000  0013fb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08004fd8 	.word	0x08004fd8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08004fd8 	.word	0x08004fd8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96e 	b.w	8000534 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468c      	mov	ip, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	f040 8083 	bne.w	8000386 <__udivmoddi4+0x116>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d947      	bls.n	8000316 <__udivmoddi4+0xa6>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b142      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028c:	f1c2 0020 	rsb	r0, r2, #32
 8000290:	fa24 f000 	lsr.w	r0, r4, r0
 8000294:	4091      	lsls	r1, r2
 8000296:	4097      	lsls	r7, r2
 8000298:	ea40 0c01 	orr.w	ip, r0, r1
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbbc f6f8 	udiv	r6, ip, r8
 80002a8:	fa1f fe87 	uxth.w	lr, r7
 80002ac:	fb08 c116 	mls	r1, r8, r6, ip
 80002b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b4:	fb06 f10e 	mul.w	r1, r6, lr
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c2:	f080 8119 	bcs.w	80004f8 <__udivmoddi4+0x288>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8116 	bls.w	80004f8 <__udivmoddi4+0x288>
 80002cc:	3e02      	subs	r6, #2
 80002ce:	443b      	add	r3, r7
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	193c      	adds	r4, r7, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8105 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f240 8102 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002f8:	3802      	subs	r0, #2
 80002fa:	443c      	add	r4, r7
 80002fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000300:	eba4 040e 	sub.w	r4, r4, lr
 8000304:	2600      	movs	r6, #0
 8000306:	b11d      	cbz	r5, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c5 4300 	strd	r4, r3, [r5]
 8000310:	4631      	mov	r1, r6
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xaa>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	2a00      	cmp	r2, #0
 8000320:	d150      	bne.n	80003c4 <__udivmoddi4+0x154>
 8000322:	1bcb      	subs	r3, r1, r7
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	fa1f f887 	uxth.w	r8, r7
 800032c:	2601      	movs	r6, #1
 800032e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000332:	0c21      	lsrs	r1, r4, #16
 8000334:	fb0e 331c 	mls	r3, lr, ip, r3
 8000338:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800033c:	fb08 f30c 	mul.w	r3, r8, ip
 8000340:	428b      	cmp	r3, r1
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000344:	1879      	adds	r1, r7, r1
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0xe2>
 800034c:	428b      	cmp	r3, r1
 800034e:	f200 80e9 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 8000352:	4684      	mov	ip, r0
 8000354:	1ac9      	subs	r1, r1, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x10c>
 800036c:	193c      	adds	r4, r7, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x10a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80d9 	bhi.w	800052c <__udivmoddi4+0x2bc>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e7bf      	b.n	8000306 <__udivmoddi4+0x96>
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x12e>
 800038a:	2d00      	cmp	r5, #0
 800038c:	f000 80b1 	beq.w	80004f2 <__udivmoddi4+0x282>
 8000390:	2600      	movs	r6, #0
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	4630      	mov	r0, r6
 8000398:	4631      	mov	r1, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f683 	clz	r6, r3
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d14a      	bne.n	800043c <__udivmoddi4+0x1cc>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0x140>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80b8 	bhi.w	8000520 <__udivmoddi4+0x2b0>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0103 	sbc.w	r1, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	468c      	mov	ip, r1
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d0a8      	beq.n	8000310 <__udivmoddi4+0xa0>
 80003be:	e9c5 4c00 	strd	r4, ip, [r5]
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0xa0>
 80003c4:	f1c2 0320 	rsb	r3, r2, #32
 80003c8:	fa20 f603 	lsr.w	r6, r0, r3
 80003cc:	4097      	lsls	r7, r2
 80003ce:	fa01 f002 	lsl.w	r0, r1, r2
 80003d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d6:	40d9      	lsrs	r1, r3
 80003d8:	4330      	orrs	r0, r6
 80003da:	0c03      	lsrs	r3, r0, #16
 80003dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e0:	fa1f f887 	uxth.w	r8, r7
 80003e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb06 f108 	mul.w	r1, r6, r8
 80003f0:	4299      	cmp	r1, r3
 80003f2:	fa04 f402 	lsl.w	r4, r4, r2
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x19c>
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003fe:	f080 808d 	bcs.w	800051c <__udivmoddi4+0x2ac>
 8000402:	4299      	cmp	r1, r3
 8000404:	f240 808a 	bls.w	800051c <__udivmoddi4+0x2ac>
 8000408:	3e02      	subs	r6, #2
 800040a:	443b      	add	r3, r7
 800040c:	1a5b      	subs	r3, r3, r1
 800040e:	b281      	uxth	r1, r0
 8000410:	fbb3 f0fe 	udiv	r0, r3, lr
 8000414:	fb0e 3310 	mls	r3, lr, r0, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb00 f308 	mul.w	r3, r0, r8
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x1c4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f100 3cff 	add.w	ip, r0, #4294967295
 800042a:	d273      	bcs.n	8000514 <__udivmoddi4+0x2a4>
 800042c:	428b      	cmp	r3, r1
 800042e:	d971      	bls.n	8000514 <__udivmoddi4+0x2a4>
 8000430:	3802      	subs	r0, #2
 8000432:	4439      	add	r1, r7
 8000434:	1acb      	subs	r3, r1, r3
 8000436:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800043a:	e778      	b.n	800032e <__udivmoddi4+0xbe>
 800043c:	f1c6 0c20 	rsb	ip, r6, #32
 8000440:	fa03 f406 	lsl.w	r4, r3, r6
 8000444:	fa22 f30c 	lsr.w	r3, r2, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	fa20 f70c 	lsr.w	r7, r0, ip
 800044e:	fa01 f306 	lsl.w	r3, r1, r6
 8000452:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000456:	fa21 f10c 	lsr.w	r1, r1, ip
 800045a:	431f      	orrs	r7, r3
 800045c:	0c3b      	lsrs	r3, r7, #16
 800045e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000462:	fa1f f884 	uxth.w	r8, r4
 8000466:	fb0e 1119 	mls	r1, lr, r9, r1
 800046a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800046e:	fb09 fa08 	mul.w	sl, r9, r8
 8000472:	458a      	cmp	sl, r1
 8000474:	fa02 f206 	lsl.w	r2, r2, r6
 8000478:	fa00 f306 	lsl.w	r3, r0, r6
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x220>
 800047e:	1861      	adds	r1, r4, r1
 8000480:	f109 30ff 	add.w	r0, r9, #4294967295
 8000484:	d248      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 8000486:	458a      	cmp	sl, r1
 8000488:	d946      	bls.n	8000518 <__udivmoddi4+0x2a8>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4421      	add	r1, r4
 8000490:	eba1 010a 	sub.w	r1, r1, sl
 8000494:	b2bf      	uxth	r7, r7
 8000496:	fbb1 f0fe 	udiv	r0, r1, lr
 800049a:	fb0e 1110 	mls	r1, lr, r0, r1
 800049e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004a2:	fb00 f808 	mul.w	r8, r0, r8
 80004a6:	45b8      	cmp	r8, r7
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x24a>
 80004aa:	19e7      	adds	r7, r4, r7
 80004ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b0:	d22e      	bcs.n	8000510 <__udivmoddi4+0x2a0>
 80004b2:	45b8      	cmp	r8, r7
 80004b4:	d92c      	bls.n	8000510 <__udivmoddi4+0x2a0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4427      	add	r7, r4
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	eba7 0708 	sub.w	r7, r7, r8
 80004c2:	fba0 8902 	umull	r8, r9, r0, r2
 80004c6:	454f      	cmp	r7, r9
 80004c8:	46c6      	mov	lr, r8
 80004ca:	4649      	mov	r1, r9
 80004cc:	d31a      	bcc.n	8000504 <__udivmoddi4+0x294>
 80004ce:	d017      	beq.n	8000500 <__udivmoddi4+0x290>
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x27a>
 80004d2:	ebb3 020e 	subs.w	r2, r3, lr
 80004d6:	eb67 0701 	sbc.w	r7, r7, r1
 80004da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004de:	40f2      	lsrs	r2, r6
 80004e0:	ea4c 0202 	orr.w	r2, ip, r2
 80004e4:	40f7      	lsrs	r7, r6
 80004e6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ea:	2600      	movs	r6, #0
 80004ec:	4631      	mov	r1, r6
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e70b      	b.n	8000310 <__udivmoddi4+0xa0>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0x60>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fd      	b.n	80002fc <__udivmoddi4+0x8c>
 8000500:	4543      	cmp	r3, r8
 8000502:	d2e5      	bcs.n	80004d0 <__udivmoddi4+0x260>
 8000504:	ebb8 0e02 	subs.w	lr, r8, r2
 8000508:	eb69 0104 	sbc.w	r1, r9, r4
 800050c:	3801      	subs	r0, #1
 800050e:	e7df      	b.n	80004d0 <__udivmoddi4+0x260>
 8000510:	4608      	mov	r0, r1
 8000512:	e7d2      	b.n	80004ba <__udivmoddi4+0x24a>
 8000514:	4660      	mov	r0, ip
 8000516:	e78d      	b.n	8000434 <__udivmoddi4+0x1c4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7b9      	b.n	8000490 <__udivmoddi4+0x220>
 800051c:	4666      	mov	r6, ip
 800051e:	e775      	b.n	800040c <__udivmoddi4+0x19c>
 8000520:	4630      	mov	r0, r6
 8000522:	e74a      	b.n	80003ba <__udivmoddi4+0x14a>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	4439      	add	r1, r7
 800052a:	e713      	b.n	8000354 <__udivmoddi4+0xe4>
 800052c:	3802      	subs	r0, #2
 800052e:	443c      	add	r4, r7
 8000530:	e724      	b.n	800037c <__udivmoddi4+0x10c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b085      	sub	sp, #20
 800053c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fa78 	bl	8000a32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f851 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f8ab 	bl	80006a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800054a:	f001 fa11 	bl	8001970 <osKernelInitialize>

  xOneShotTimer = xTimerCreate("OneShot",mainONE_SHOT_TIMER_PERIOD,pdFALSE,0,prvOneShotTimerCallback );
  xAutoReloadTimer = xTimerCreate("AutoReload",mainAUTO_RELOAD_TIMER_PERIOD,pdTRUE,0,prvAutoReloadTimerCallback );*/
  BaseType_t  xTimer2Started;

    xTaskCreate(StartDefaultTask, "LED Task", 1024, NULL, 1, &task1_handle);
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <main+0x8c>)
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800055c:	491a      	ldr	r1, [pc, #104]	; (80005c8 <main+0x90>)
 800055e:	481b      	ldr	r0, [pc, #108]	; (80005cc <main+0x94>)
 8000560:	f002 f96b 	bl	800283a <xTaskCreate>

   // xOneShotTimer = xTimerCreate("OneShot",mainONE_SHOT_TIMER_PERIOD,pdFALSE,0,prvTimerCallback );
    xAutoReloadTimer = xTimerCreate("AutoReload",xHealthyTimerPeriod,pdTRUE,0,prvTimerCallback);
 8000564:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <main+0x98>)
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2300      	movs	r3, #0
 800056e:	2201      	movs	r2, #1
 8000570:	4818      	ldr	r0, [pc, #96]	; (80005d4 <main+0x9c>)
 8000572:	f003 f89d 	bl	80036b0 <xTimerCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <main+0xa0>)
 800057a:	6013      	str	r3, [r2, #0]

    if(  xAutoReloadTimer != NULL  )
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <main+0xa0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d014      	beq.n	80005ae <main+0x76>
     {
      printf("timers created\n");
 8000584:	4815      	ldr	r0, [pc, #84]	; (80005dc <main+0xa4>)
 8000586:	f004 f8cf 	bl	8004728 <puts>
     //xTimer1Started = xTimerStart( xOneShotTimer, 0 );
     xTimer2Started = xTimerStart( xAutoReloadTimer, 0 );
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <main+0xa0>)
 800058c:	681c      	ldr	r4, [r3, #0]
 800058e:	f002 fc1b 	bl	8002dc8 <xTaskGetTickCount>
 8000592:	4602      	mov	r2, r0
 8000594:	2300      	movs	r3, #0
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	2101      	movs	r1, #1
 800059c:	4620      	mov	r0, r4
 800059e:	f003 f8e5 	bl	800376c <xTimerGenericCommand>
 80005a2:	6078      	str	r0, [r7, #4]

       if( xTimer2Started == pdPASS  )
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d101      	bne.n	80005ae <main+0x76>
        {
           /* Start the scheduler. */
           vTaskStartScheduler();
 80005aa:	f002 faf5 	bl	8002b98 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ae:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <main+0xa8>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <main+0x94>)
 80005b4:	f001 fa46 	bl	8001a44 <osThreadNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <main+0xac>)
 80005bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005be:	f001 fa0b 	bl	80019d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <main+0x8a>
 80005c4:	200049b0 	.word	0x200049b0
 80005c8:	08004ffc 	.word	0x08004ffc
 80005cc:	08000705 	.word	0x08000705
 80005d0:	0800072d 	.word	0x0800072d
 80005d4:	08005008 	.word	0x08005008
 80005d8:	200049ac 	.word	0x200049ac
 80005dc:	08005014 	.word	0x08005014
 80005e0:	08005050 	.word	0x08005050
 80005e4:	200049a8 	.word	0x200049a8

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 f820 	bl	800463c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <SystemClock_Config+0xb0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <SystemClock_Config+0xb0>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <SystemClock_Config+0xb0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <SystemClock_Config+0xb4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800062c:	4a1b      	ldr	r2, [pc, #108]	; (800069c <SystemClock_Config+0xb4>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <SystemClock_Config+0xb4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064c:	2300      	movs	r3, #0
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fd33 	bl	80010c0 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000660:	f000 f88e 	bl	8000780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f000 ffcc 	bl	800161c <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800068a:	f000 f879 	bl	8000780 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_GPIO_Init+0x5c>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	4a10      	ldr	r2, [pc, #64]	; (80006fc <MX_GPIO_Init+0x5c>)
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	6313      	str	r3, [r2, #48]	; 0x30
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_GPIO_Init+0x5c>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, gled_Pin|rled_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f244 0101 	movw	r1, #16385	; 0x4001
 80006d2:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_GPIO_Init+0x60>)
 80006d4:	f000 fcc0 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : gled_Pin r_led_Pin */
  GPIO_InitStruct.Pin = gled_Pin|rled_Pin;
 80006d8:	f244 0301 	movw	r3, #16385	; 0x4001
 80006dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_GPIO_Init+0x60>)
 80006f0:	f000 fb06 	bl	8000d00 <HAL_GPIO_Init>

}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020400 	.word	0x40020400

08000704 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
//	        xTimerStop(xTimer, 0);
//	        xTimerDelete(xTimer, 0);
//
//	        // Delete the task
//	        vTaskDelete(NULL);
printf("Task is running\r\n");
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <StartDefaultTask+0x20>)
 800070e:	f004 f80b 	bl	8004728 <puts>
while(1)
{
	HAL_GPIO_TogglePin(gled_GPIO_Port, gled_Pin);
 8000712:	2101      	movs	r1, #1
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <StartDefaultTask+0x24>)
 8000716:	f000 fcb8 	bl	800108a <HAL_GPIO_TogglePin>
	HAL_Delay(2000);
 800071a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800071e:	f000 f9e5 	bl	8000aec <HAL_Delay>
	HAL_GPIO_TogglePin(gled_GPIO_Port, gled_Pin);
 8000722:	e7f6      	b.n	8000712 <StartDefaultTask+0xe>
 8000724:	08005024 	.word	0x08005024
 8000728:	40020400 	.word	0x40020400

0800072c <prvTimerCallback>:
}
osDelay(1000);
}

static void prvTimerCallback( TimerHandle_t xTimer )
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af02      	add	r7, sp, #8
 8000732:	6078      	str	r0, [r7, #4]

static BaseType_t xErrorDetected = pdFALSE;

if( xErrorDetected == pdFALSE )
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <prvTimerCallback+0x48>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d112      	bne.n	8000762 <prvTimerCallback+0x36>
    {

    //if( CheckTasksAreRunningWithoutError() == pdFAIL )
        if(eTaskGetState(task1_handle) != eRunning )
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <prvTimerCallback+0x4c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f002 f9c1 	bl	8002ac8 <eTaskGetState>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d007      	beq.n	800075c <prvTimerCallback+0x30>
        {

            xTimerChangePeriod( xTimer, xErrorTimerPeriod, 0 ); /* Do not block when sending this command. */
 800074c:	22c8      	movs	r2, #200	; 0xc8
 800074e:	2300      	movs	r3, #0
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2300      	movs	r3, #0
 8000754:	2104      	movs	r1, #4
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f003 f808 	bl	800376c <xTimerGenericCommand>
        }
        /* Latch that an error has already been detected. */
        xErrorDetected = pdTRUE;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <prvTimerCallback+0x48>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
    }
HAL_GPIO_TogglePin(gled_GPIO_Port, gled_Pin);
 8000762:	2101      	movs	r1, #1
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <prvTimerCallback+0x50>)
 8000766:	f000 fc90 	bl	800108a <HAL_GPIO_TogglePin>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000090 	.word	0x20000090
 8000778:	200049b0 	.word	0x200049b0
 800077c:	40020400 	.word	0x40020400

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	; 0x44
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f000 fa70 	bl	8000cae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f94e 	bl	8000aac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000810:	f002 fe20 	bl	8003454 <xTaskGetSchedulerState>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d001      	beq.n	800081e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800081a:	f003 fc5d 	bl	80040d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <ITM_SendChar+0x48>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <ITM_SendChar+0x48>)
 8000834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000838:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <ITM_SendChar+0x4c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <ITM_SendChar+0x4c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000846:	bf00      	nop
 8000848:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f8      	beq.n	8000848 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000856:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	6013      	str	r3, [r2, #0]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000edfc 	.word	0xe000edfc
 8000870:	e0000e00 	.word	0xe0000e00

08000874 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	e00a      	b.n	800089c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000886:	f3af 8000 	nop.w
 800088a:	4601      	mov	r1, r0
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	60ba      	str	r2, [r7, #8]
 8000892:	b2ca      	uxtb	r2, r1
 8000894:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	3301      	adds	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	dbf0      	blt.n	8000886 <_read+0x12>
	}

return len;
 80008a4:	687b      	ldr	r3, [r7, #4]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	60f8      	str	r0, [r7, #12]
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	e009      	b.n	80008d4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	60ba      	str	r2, [r7, #8]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ffab 	bl	8000824 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3301      	adds	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	429a      	cmp	r2, r3
 80008da:	dbf1      	blt.n	80008c0 <_write+0x12>
	}
	return len;
 80008dc:	687b      	ldr	r3, [r7, #4]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_close>:

int _close(int file)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	return -1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800090e:	605a      	str	r2, [r3, #4]
	return 0;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <_isatty>:

int _isatty(int file)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	return 1;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
	return 0;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f003 fe24 	bl	80045cc <__errno>
 8000984:	4603      	mov	r3, r0
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20080000 	.word	0x20080000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	20000094 	.word	0x20000094
 80009b8:	20004a08 	.word	0x20004a08

080009bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009e6:	490e      	ldr	r1, [pc, #56]	; (8000a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009fc:	4c0b      	ldr	r4, [pc, #44]	; (8000a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0a:	f7ff ffd7 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f003 fde3 	bl	80045d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fd91 	bl	8000538 <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a24:	080050f8 	.word	0x080050f8
  ldr r2, =_sbss
 8000a28:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a2c:	20004a08 	.word	0x20004a08

08000a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC_IRQHandler>

08000a32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a36:	2003      	movs	r0, #3
 8000a38:	f000 f92e 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3c:	200f      	movs	r0, #15
 8000a3e:	f000 f805 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a42:	f7ff fea3 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f93b 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 f911 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	200049b4 	.word	0x200049b4

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200049b4 	.word	0x200049b4

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff ffee 	bl	8000ad4 <HAL_GetTick>
 8000af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Delay+0x44>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b12:	bf00      	nop
 8000b14:	f7ff ffde 	bl	8000ad4 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <__NVIC_SetPriorityGrouping+0x40>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <__NVIC_SetPriorityGrouping+0x40>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	05fa0000 	.word	0x05fa0000

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff47 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff5c 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ffb0 	bl	8000c54 <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e175      	b.n	800100c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 8164 	bne.w	8001006 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x56>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80be 	beq.w	8001006 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	4b66      	ldr	r3, [pc, #408]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a65      	ldr	r2, [pc, #404]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b63      	ldr	r3, [pc, #396]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ea2:	4a61      	ldr	r2, [pc, #388]	; (8001028 <HAL_GPIO_Init+0x328>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a58      	ldr	r2, [pc, #352]	; (800102c <HAL_GPIO_Init+0x32c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d037      	beq.n	8000f3e <HAL_GPIO_Init+0x23e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a57      	ldr	r2, [pc, #348]	; (8001030 <HAL_GPIO_Init+0x330>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d031      	beq.n	8000f3a <HAL_GPIO_Init+0x23a>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a56      	ldr	r2, [pc, #344]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d02b      	beq.n	8000f36 <HAL_GPIO_Init+0x236>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a55      	ldr	r2, [pc, #340]	; (8001038 <HAL_GPIO_Init+0x338>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x232>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a54      	ldr	r2, [pc, #336]	; (800103c <HAL_GPIO_Init+0x33c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x22e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a53      	ldr	r2, [pc, #332]	; (8001040 <HAL_GPIO_Init+0x340>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x22a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a52      	ldr	r2, [pc, #328]	; (8001044 <HAL_GPIO_Init+0x344>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x226>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a51      	ldr	r2, [pc, #324]	; (8001048 <HAL_GPIO_Init+0x348>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x222>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a50      	ldr	r2, [pc, #320]	; (800104c <HAL_GPIO_Init+0x34c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x21e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x21a>
 8000f16:	2309      	movs	r3, #9
 8000f18:	e012      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	e010      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f1e:	2308      	movs	r3, #8
 8000f20:	e00e      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e00c      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f26:	2306      	movs	r3, #6
 8000f28:	e00a      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	e008      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	69fa      	ldr	r2, [r7, #28]
 8000f42:	f002 0203 	and.w	r2, r2, #3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f50:	4935      	ldr	r1, [pc, #212]	; (8001028 <HAL_GPIO_Init+0x328>)
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5e:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f82:	4a34      	ldr	r2, [pc, #208]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f88:	4b32      	ldr	r3, [pc, #200]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fac:	4a29      	ldr	r2, [pc, #164]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <HAL_GPIO_Init+0x354>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	f67f ae86 	bls.w	8000d20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40013800 	.word	0x40013800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40021000 	.word	0x40021000
 8001040:	40021400 	.word	0x40021400
 8001044:	40021800 	.word	0x40021800
 8001048:	40021c00 	.word	0x40021c00
 800104c:	40022000 	.word	0x40022000
 8001050:	40022400 	.word	0x40022400
 8001054:	40013c00 	.word	0x40013c00

08001058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001074:	e003      	b.n	800107e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	041a      	lsls	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	619a      	str	r2, [r3, #24]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800108a:	b480      	push	{r7}
 800108c:	b085      	sub	sp, #20
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800109c:	887a      	ldrh	r2, [r7, #2]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4013      	ands	r3, r2
 80010a2:	041a      	lsls	r2, r3, #16
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	400b      	ands	r3, r1
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e29b      	b.n	800160e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8087 	beq.w	80011f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010e4:	4b96      	ldr	r3, [pc, #600]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d00c      	beq.n	800110a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f0:	4b93      	ldr	r3, [pc, #588]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d112      	bne.n	8001122 <HAL_RCC_OscConfig+0x62>
 80010fc:	4b90      	ldr	r3, [pc, #576]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001108:	d10b      	bne.n	8001122 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110a:	4b8d      	ldr	r3, [pc, #564]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d06c      	beq.n	80011f0 <HAL_RCC_OscConfig+0x130>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d168      	bne.n	80011f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e275      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112a:	d106      	bne.n	800113a <HAL_RCC_OscConfig+0x7a>
 800112c:	4b84      	ldr	r3, [pc, #528]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a83      	ldr	r2, [pc, #524]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e02e      	b.n	8001198 <HAL_RCC_OscConfig+0xd8>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x9c>
 8001142:	4b7f      	ldr	r3, [pc, #508]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a7e      	ldr	r2, [pc, #504]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b7c      	ldr	r3, [pc, #496]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a7b      	ldr	r2, [pc, #492]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001154:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e01d      	b.n	8001198 <HAL_RCC_OscConfig+0xd8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0xc0>
 8001166:	4b76      	ldr	r3, [pc, #472]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a75      	ldr	r2, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b73      	ldr	r3, [pc, #460]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a72      	ldr	r2, [pc, #456]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0xd8>
 8001180:	4b6f      	ldr	r3, [pc, #444]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a6e      	ldr	r2, [pc, #440]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b6c      	ldr	r3, [pc, #432]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a6b      	ldr	r2, [pc, #428]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a0:	f7ff fc98 	bl	8000ad4 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fc94 	bl	8000ad4 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e229      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b61      	ldr	r3, [pc, #388]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0xe8>
 80011c6:	e014      	b.n	80011f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fc84 	bl	8000ad4 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fc80 	bl	8000ad4 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e215      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	4b57      	ldr	r3, [pc, #348]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x110>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d069      	beq.n	80012d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011fe:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120a:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b08      	cmp	r3, #8
 8001214:	d11c      	bne.n	8001250 <HAL_RCC_OscConfig+0x190>
 8001216:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d116      	bne.n	8001250 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x17a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e1e9      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	493d      	ldr	r1, [pc, #244]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	e040      	b.n	80012d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d023      	beq.n	80012a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a38      	ldr	r2, [pc, #224]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fc36 	bl	8000ad4 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff fc32 	bl	8000ad4 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1c7      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4929      	ldr	r1, [pc, #164]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
 800129e:	e018      	b.n	80012d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc12 	bl	8000ad4 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fc0e 	bl	8000ad4 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e1a3      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d038      	beq.n	8001350 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d019      	beq.n	800131a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80012e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ea:	4a15      	ldr	r2, [pc, #84]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f2:	f7ff fbef 	bl	8000ad4 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fa:	f7ff fbeb 	bl	8000ad4 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e180      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800130e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x23a>
 8001318:	e01a      	b.n	8001350 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800131c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001326:	f7ff fbd5 	bl	8000ad4 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132c:	e00a      	b.n	8001344 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff fbd1 	bl	8000ad4 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d903      	bls.n	8001344 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e166      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
 8001340:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	4b92      	ldr	r3, [pc, #584]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1ee      	bne.n	800132e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80a4 	beq.w	80014a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135e:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10d      	bne.n	8001386 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a88      	ldr	r2, [pc, #544]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b86      	ldr	r3, [pc, #536]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001386:	4b83      	ldr	r3, [pc, #524]	; (8001594 <HAL_RCC_OscConfig+0x4d4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d118      	bne.n	80013c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001392:	4b80      	ldr	r3, [pc, #512]	; (8001594 <HAL_RCC_OscConfig+0x4d4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a7f      	ldr	r2, [pc, #508]	; (8001594 <HAL_RCC_OscConfig+0x4d4>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff fb99 	bl	8000ad4 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a6:	f7ff fb95 	bl	8000ad4 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b64      	cmp	r3, #100	; 0x64
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e12a      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b8:	4b76      	ldr	r3, [pc, #472]	; (8001594 <HAL_RCC_OscConfig+0x4d4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x31a>
 80013cc:	4b70      	ldr	r3, [pc, #448]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a6f      	ldr	r2, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
 80013d8:	e02d      	b.n	8001436 <HAL_RCC_OscConfig+0x376>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x33c>
 80013e2:	4b6b      	ldr	r3, [pc, #428]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e6:	4a6a      	ldr	r2, [pc, #424]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6713      	str	r3, [r2, #112]	; 0x70
 80013ee:	4b68      	ldr	r3, [pc, #416]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a67      	ldr	r2, [pc, #412]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013f4:	f023 0304 	bic.w	r3, r3, #4
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	e01c      	b.n	8001436 <HAL_RCC_OscConfig+0x376>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b05      	cmp	r3, #5
 8001402:	d10c      	bne.n	800141e <HAL_RCC_OscConfig+0x35e>
 8001404:	4b62      	ldr	r3, [pc, #392]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	4a61      	ldr	r2, [pc, #388]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6713      	str	r3, [r2, #112]	; 0x70
 8001410:	4b5f      	ldr	r3, [pc, #380]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	4a5e      	ldr	r2, [pc, #376]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6713      	str	r3, [r2, #112]	; 0x70
 800141c:	e00b      	b.n	8001436 <HAL_RCC_OscConfig+0x376>
 800141e:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001422:	4a5b      	ldr	r2, [pc, #364]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	6713      	str	r3, [r2, #112]	; 0x70
 800142a:	4b59      	ldr	r3, [pc, #356]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	4a58      	ldr	r2, [pc, #352]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001430:	f023 0304 	bic.w	r3, r3, #4
 8001434:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d015      	beq.n	800146a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143e:	f7ff fb49 	bl	8000ad4 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff fb45 	bl	8000ad4 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e0d8      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145c:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0ee      	beq.n	8001446 <HAL_RCC_OscConfig+0x386>
 8001468:	e014      	b.n	8001494 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146a:	f7ff fb33 	bl	8000ad4 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f7ff fb2f 	bl	8000ad4 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001480:	4293      	cmp	r3, r2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e0c2      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ee      	bne.n	8001472 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d105      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a3c      	ldr	r2, [pc, #240]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80014a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80ae 	beq.w	800160c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b0:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d06d      	beq.n	8001598 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d14b      	bne.n	800155c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c4:	4b32      	ldr	r3, [pc, #200]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a31      	ldr	r2, [pc, #196]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80014ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb00 	bl	8000ad4 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fafc 	bl	8000ad4 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e091      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	3b01      	subs	r3, #1
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	071b      	lsls	r3, r3, #28
 8001522:	491b      	ldr	r1, [pc, #108]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800152e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff face 	bl	8000ad4 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff faca 	bl	8000ad4 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e05f      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x47c>
 800155a:	e057      	b.n	800160c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fab4 	bl	8000ad4 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff fab0 	bl	8000ad4 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e045      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001582:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x4b0>
 800158e:	e03d      	b.n	800160c <HAL_RCC_OscConfig+0x54c>
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <HAL_RCC_OscConfig+0x558>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d030      	beq.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d129      	bne.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	429a      	cmp	r2, r3
 80015c0:	d122      	bne.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015c8:	4013      	ands	r3, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d119      	bne.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	085b      	lsrs	r3, r3, #1
 80015e0:	3b01      	subs	r3, #1
 80015e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d10f      	bne.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d107      	bne.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d001      	beq.n	800160c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0d0      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001634:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d910      	bls.n	8001664 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b67      	ldr	r3, [pc, #412]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 020f 	bic.w	r2, r3, #15
 800164a:	4965      	ldr	r1, [pc, #404]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0b8      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800167c:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001686:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800169a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800169e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a0:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	494d      	ldr	r1, [pc, #308]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d040      	beq.n	8001740 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d115      	bne.n	80016fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e07f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e073      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06b      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f023 0203 	bic.w	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4936      	ldr	r1, [pc, #216]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	4313      	orrs	r3, r2
 800170e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001710:	f7ff f9e0 	bl	8000ad4 <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	e00a      	b.n	800172e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001718:	f7ff f9dc 	bl	8000ad4 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e053      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 020c 	and.w	r2, r3, #12
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	429a      	cmp	r2, r3
 800173e:	d1eb      	bne.n	8001718 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d210      	bcs.n	8001770 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 020f 	bic.w	r2, r3, #15
 8001756:	4922      	ldr	r1, [pc, #136]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e032      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4916      	ldr	r1, [pc, #88]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ae:	f000 f821 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	490a      	ldr	r1, [pc, #40]	; (80017e8 <HAL_RCC_ClockConfig+0x1cc>)
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	fa22 f303 	lsr.w	r3, r2, r3
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1d0>)
 80017c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_ClockConfig+0x1d4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f93c 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00
 80017e4:	40023800 	.word	0x40023800
 80017e8:	08005074 	.word	0x08005074
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80017fa:	2100      	movs	r1, #0
 80017fc:	6079      	str	r1, [r7, #4]
 80017fe:	2100      	movs	r1, #0
 8001800:	60f9      	str	r1, [r7, #12]
 8001802:	2100      	movs	r1, #0
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001806:	2100      	movs	r1, #0
 8001808:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800180a:	4952      	ldr	r1, [pc, #328]	; (8001954 <HAL_RCC_GetSysClockFreq+0x160>)
 800180c:	6889      	ldr	r1, [r1, #8]
 800180e:	f001 010c 	and.w	r1, r1, #12
 8001812:	2908      	cmp	r1, #8
 8001814:	d00d      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0x3e>
 8001816:	2908      	cmp	r1, #8
 8001818:	f200 8094 	bhi.w	8001944 <HAL_RCC_GetSysClockFreq+0x150>
 800181c:	2900      	cmp	r1, #0
 800181e:	d002      	beq.n	8001826 <HAL_RCC_GetSysClockFreq+0x32>
 8001820:	2904      	cmp	r1, #4
 8001822:	d003      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x38>
 8001824:	e08e      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001826:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <HAL_RCC_GetSysClockFreq+0x164>)
 8001828:	60bb      	str	r3, [r7, #8]
      break;
 800182a:	e08e      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800182c:	4b4b      	ldr	r3, [pc, #300]	; (800195c <HAL_RCC_GetSysClockFreq+0x168>)
 800182e:	60bb      	str	r3, [r7, #8]
      break;
 8001830:	e08b      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001832:	4948      	ldr	r1, [pc, #288]	; (8001954 <HAL_RCC_GetSysClockFreq+0x160>)
 8001834:	6849      	ldr	r1, [r1, #4]
 8001836:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800183a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800183c:	4945      	ldr	r1, [pc, #276]	; (8001954 <HAL_RCC_GetSysClockFreq+0x160>)
 800183e:	6849      	ldr	r1, [r1, #4]
 8001840:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001844:	2900      	cmp	r1, #0
 8001846:	d024      	beq.n	8001892 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001848:	4942      	ldr	r1, [pc, #264]	; (8001954 <HAL_RCC_GetSysClockFreq+0x160>)
 800184a:	6849      	ldr	r1, [r1, #4]
 800184c:	0989      	lsrs	r1, r1, #6
 800184e:	4608      	mov	r0, r1
 8001850:	f04f 0100 	mov.w	r1, #0
 8001854:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001858:	f04f 0500 	mov.w	r5, #0
 800185c:	ea00 0204 	and.w	r2, r0, r4
 8001860:	ea01 0305 	and.w	r3, r1, r5
 8001864:	493d      	ldr	r1, [pc, #244]	; (800195c <HAL_RCC_GetSysClockFreq+0x168>)
 8001866:	fb01 f003 	mul.w	r0, r1, r3
 800186a:	2100      	movs	r1, #0
 800186c:	fb01 f102 	mul.w	r1, r1, r2
 8001870:	1844      	adds	r4, r0, r1
 8001872:	493a      	ldr	r1, [pc, #232]	; (800195c <HAL_RCC_GetSysClockFreq+0x168>)
 8001874:	fba2 0101 	umull	r0, r1, r2, r1
 8001878:	1863      	adds	r3, r4, r1
 800187a:	4619      	mov	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	461a      	mov	r2, r3
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	f7fe fcdc 	bl	8000240 <__aeabi_uldivmod>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4613      	mov	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	e04a      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_GetSysClockFreq+0x160>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	099b      	lsrs	r3, r3, #6
 8001898:	461a      	mov	r2, r3
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018a2:	f04f 0100 	mov.w	r1, #0
 80018a6:	ea02 0400 	and.w	r4, r2, r0
 80018aa:	ea03 0501 	and.w	r5, r3, r1
 80018ae:	4620      	mov	r0, r4
 80018b0:	4629      	mov	r1, r5
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	014b      	lsls	r3, r1, #5
 80018bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018c0:	0142      	lsls	r2, r0, #5
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	1b00      	subs	r0, r0, r4
 80018c8:	eb61 0105 	sbc.w	r1, r1, r5
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	018b      	lsls	r3, r1, #6
 80018d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018da:	0182      	lsls	r2, r0, #6
 80018dc:	1a12      	subs	r2, r2, r0
 80018de:	eb63 0301 	sbc.w	r3, r3, r1
 80018e2:	f04f 0000 	mov.w	r0, #0
 80018e6:	f04f 0100 	mov.w	r1, #0
 80018ea:	00d9      	lsls	r1, r3, #3
 80018ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018f0:	00d0      	lsls	r0, r2, #3
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	1912      	adds	r2, r2, r4
 80018f8:	eb45 0303 	adc.w	r3, r5, r3
 80018fc:	f04f 0000 	mov.w	r0, #0
 8001900:	f04f 0100 	mov.w	r1, #0
 8001904:	0299      	lsls	r1, r3, #10
 8001906:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800190a:	0290      	lsls	r0, r2, #10
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	461a      	mov	r2, r3
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	f7fe fc90 	bl	8000240 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_RCC_GetSysClockFreq+0x160>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	3301      	adds	r3, #1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	60bb      	str	r3, [r7, #8]
      break;
 8001942:	e002      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <HAL_RCC_GetSysClockFreq+0x164>)
 8001946:	60bb      	str	r3, [r7, #8]
      break;
 8001948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194a:	68bb      	ldr	r3, [r7, #8]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bdb0      	pop	{r4, r5, r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	00f42400 	.word	0x00f42400
 800195c:	017d7840 	.word	0x017d7840

08001960 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001976:	f3ef 8305 	mrs	r3, IPSR
 800197a:	60bb      	str	r3, [r7, #8]
  return(result);
 800197c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001982:	f3ef 8310 	mrs	r3, PRIMASK
 8001986:	607b      	str	r3, [r7, #4]
  return(result);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d105      	bne.n	800199a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800198e:	f3ef 8311 	mrs	r3, BASEPRI
 8001992:	603b      	str	r3, [r7, #0]
  return(result);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <osKernelInitialize+0x3a>
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <osKernelInitialize+0x64>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d103      	bne.n	80019aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80019a2:	f06f 0305 	mvn.w	r3, #5
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e00c      	b.n	80019c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <osKernelInitialize+0x64>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d105      	bne.n	80019be <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <osKernelInitialize+0x64>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e002      	b.n	80019c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80019c4:	68fb      	ldr	r3, [r7, #12]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000098 	.word	0x20000098

080019d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019de:	f3ef 8305 	mrs	r3, IPSR
 80019e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80019e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10f      	bne.n	8001a0a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019ea:	f3ef 8310 	mrs	r3, PRIMASK
 80019ee:	607b      	str	r3, [r7, #4]
  return(result);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019f6:	f3ef 8311 	mrs	r3, BASEPRI
 80019fa:	603b      	str	r3, [r7, #0]
  return(result);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d007      	beq.n	8001a12 <osKernelStart+0x3a>
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <osKernelStart+0x68>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d103      	bne.n	8001a12 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001a0a:	f06f 0305 	mvn.w	r3, #5
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e010      	b.n	8001a34 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <osKernelStart+0x68>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d109      	bne.n	8001a2e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001a1a:	f7ff ffa1 	bl	8001960 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <osKernelStart+0x68>)
 8001a20:	2202      	movs	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001a24:	f001 f8b8 	bl	8002b98 <vTaskStartScheduler>
      stat = osOK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e002      	b.n	8001a34 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000098 	.word	0x20000098

08001a44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b090      	sub	sp, #64	; 0x40
 8001a48:	af04      	add	r7, sp, #16
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a54:	f3ef 8305 	mrs	r3, IPSR
 8001a58:	61fb      	str	r3, [r7, #28]
  return(result);
 8001a5a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f040 808f 	bne.w	8001b80 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a62:	f3ef 8310 	mrs	r3, PRIMASK
 8001a66:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d105      	bne.n	8001a7a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8001a72:	617b      	str	r3, [r7, #20]
  return(result);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <osThreadNew+0x3e>
 8001a7a:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <osThreadNew+0x148>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d07e      	beq.n	8001b80 <osThreadNew+0x13c>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d07b      	beq.n	8001b80 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001a8c:	2318      	movs	r3, #24
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d045      	beq.n	8001b2c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <osThreadNew+0x6a>
        name = attr->name;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <osThreadNew+0x90>
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	2b38      	cmp	r3, #56	; 0x38
 8001ac6:	d805      	bhi.n	8001ad4 <osThreadNew+0x90>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <osThreadNew+0x94>
        return (NULL);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e054      	b.n	8001b82 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00e      	beq.n	8001b0e <osThreadNew+0xca>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b5b      	cmp	r3, #91	; 0x5b
 8001af6:	d90a      	bls.n	8001b0e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <osThreadNew+0xca>
        mem = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]
 8001b0c:	e010      	b.n	8001b30 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <osThreadNew+0xec>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <osThreadNew+0xec>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <osThreadNew+0xec>
          mem = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
 8001b2a:	e001      	b.n	8001b30 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d110      	bne.n	8001b58 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b3e:	9202      	str	r2, [sp, #8]
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fe11 	bl	8002774 <xTaskCreateStatic>
 8001b52:	4603      	mov	r3, r0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	e013      	b.n	8001b80 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d110      	bne.n	8001b80 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 fe62 	bl	800283a <xTaskCreate>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d001      	beq.n	8001b80 <osThreadNew+0x13c>
          hTask = NULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001b80:	693b      	ldr	r3, [r7, #16]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3730      	adds	r7, #48	; 0x30
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000098 	.word	0x20000098

08001b90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <vApplicationGetIdleTaskMemory+0x2c>)
 8001ba0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <vApplicationGetIdleTaskMemory+0x30>)
 8001ba6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	2000009c 	.word	0x2000009c
 8001bc0:	200000f8 	.word	0x200000f8

08001bc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8001bd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <vApplicationGetTimerTaskMemory+0x30>)
 8001bda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be2:	601a      	str	r2, [r3, #0]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	200002f8 	.word	0x200002f8
 8001bf4:	20000354 	.word	0x20000354

08001bf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f103 0208 	add.w	r2, r3, #8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f103 0208 	add.w	r2, r3, #8
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f103 0208 	add.w	r2, r3, #8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	601a      	str	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b085      	sub	sp, #20
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d103      	bne.n	8001cba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e00c      	b.n	8001cd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3308      	adds	r3, #8
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e002      	b.n	8001cc8 <vListInsert+0x2e>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d2f6      	bcs.n	8001cc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	601a      	str	r2, [r3, #0]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6892      	ldr	r2, [r2, #8]
 8001d22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6852      	ldr	r2, [r2, #4]
 8001d2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d103      	bne.n	8001d40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	1e5a      	subs	r2, r3, #1
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10c      	bne.n	8001d8e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d78:	b672      	cpsid	i
 8001d7a:	f383 8811 	msr	BASEPRI, r3
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	b662      	cpsie	i
 8001d88:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d8a:	bf00      	nop
 8001d8c:	e7fe      	b.n	8001d8c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8001d8e:	f002 f90d 	bl	8003fac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9a:	68f9      	ldr	r1, [r7, #12]
 8001d9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	441a      	add	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	68f9      	ldr	r1, [r7, #12]
 8001dc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	441a      	add	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	22ff      	movs	r2, #255	; 0xff
 8001dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	22ff      	movs	r2, #255	; 0xff
 8001dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d114      	bne.n	8001e0e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01a      	beq.n	8001e22 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3310      	adds	r3, #16
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 f969 	bl	80030c8 <xTaskRemoveFromEventList>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d012      	beq.n	8001e22 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <xQueueGenericReset+0xd0>)
 8001dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	f3bf 8f4f 	dsb	sy
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	e009      	b.n	8001e22 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3310      	adds	r3, #16
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fef0 	bl	8001bf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3324      	adds	r3, #36	; 0x24
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff feeb 	bl	8001bf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e22:	f002 f8f7 	bl	8004014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	e000ed04 	.word	0xe000ed04

08001e34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08e      	sub	sp, #56	; 0x38
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10c      	bne.n	8001e62 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8001e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4c:	b672      	cpsid	i
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	b662      	cpsie	i
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001e5e:	bf00      	nop
 8001e60:	e7fe      	b.n	8001e60 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10c      	bne.n	8001e82 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8001e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6c:	b672      	cpsid	i
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	b662      	cpsie	i
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001e7e:	bf00      	nop
 8001e80:	e7fe      	b.n	8001e80 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <xQueueGenericCreateStatic+0x5a>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <xQueueGenericCreateStatic+0x5e>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <xQueueGenericCreateStatic+0x60>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10c      	bne.n	8001eb2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8001e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9c:	b672      	cpsid	i
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	b662      	cpsie	i
 8001eac:	623b      	str	r3, [r7, #32]
}
 8001eae:	bf00      	nop
 8001eb0:	e7fe      	b.n	8001eb0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <xQueueGenericCreateStatic+0x8a>
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <xQueueGenericCreateStatic+0x8e>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <xQueueGenericCreateStatic+0x90>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10c      	bne.n	8001ee2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8001ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ecc:	b672      	cpsid	i
 8001ece:	f383 8811 	msr	BASEPRI, r3
 8001ed2:	f3bf 8f6f 	isb	sy
 8001ed6:	f3bf 8f4f 	dsb	sy
 8001eda:	b662      	cpsie	i
 8001edc:	61fb      	str	r3, [r7, #28]
}
 8001ede:	bf00      	nop
 8001ee0:	e7fe      	b.n	8001ee0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001ee2:	2350      	movs	r3, #80	; 0x50
 8001ee4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b50      	cmp	r3, #80	; 0x50
 8001eea:	d00c      	beq.n	8001f06 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8001eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef0:	b672      	cpsid	i
 8001ef2:	f383 8811 	msr	BASEPRI, r3
 8001ef6:	f3bf 8f6f 	isb	sy
 8001efa:	f3bf 8f4f 	dsb	sy
 8001efe:	b662      	cpsie	i
 8001f00:	61bb      	str	r3, [r7, #24]
}
 8001f02:	bf00      	nop
 8001f04:	e7fe      	b.n	8001f04 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001f06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00d      	beq.n	8001f2e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f805 	bl	8001f38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3730      	adds	r7, #48	; 0x30
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e002      	b.n	8001f5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f66:	2101      	movs	r1, #1
 8001f68:	69b8      	ldr	r0, [r7, #24]
 8001f6a:	f7ff fef9 	bl	8001d60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10c      	bne.n	8001fb6 <xQueueGenericSend+0x36>
	__asm volatile
 8001f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa0:	b672      	cpsid	i
 8001fa2:	f383 8811 	msr	BASEPRI, r3
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	f3bf 8f4f 	dsb	sy
 8001fae:	b662      	cpsie	i
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001fb2:	bf00      	nop
 8001fb4:	e7fe      	b.n	8001fb4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d103      	bne.n	8001fc4 <xQueueGenericSend+0x44>
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <xQueueGenericSend+0x48>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <xQueueGenericSend+0x4a>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <xQueueGenericSend+0x68>
	__asm volatile
 8001fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd2:	b672      	cpsid	i
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	b662      	cpsie	i
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001fe4:	bf00      	nop
 8001fe6:	e7fe      	b.n	8001fe6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d103      	bne.n	8001ff6 <xQueueGenericSend+0x76>
 8001fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <xQueueGenericSend+0x7a>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <xQueueGenericSend+0x7c>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10c      	bne.n	800201a <xQueueGenericSend+0x9a>
	__asm volatile
 8002000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002004:	b672      	cpsid	i
 8002006:	f383 8811 	msr	BASEPRI, r3
 800200a:	f3bf 8f6f 	isb	sy
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	b662      	cpsie	i
 8002014:	623b      	str	r3, [r7, #32]
}
 8002016:	bf00      	nop
 8002018:	e7fe      	b.n	8002018 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800201a:	f001 fa1b 	bl	8003454 <xTaskGetSchedulerState>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <xQueueGenericSend+0xaa>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <xQueueGenericSend+0xae>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <xQueueGenericSend+0xb0>
 800202e:	2300      	movs	r3, #0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10c      	bne.n	800204e <xQueueGenericSend+0xce>
	__asm volatile
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	b672      	cpsid	i
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	b662      	cpsie	i
 8002048:	61fb      	str	r3, [r7, #28]
}
 800204a:	bf00      	nop
 800204c:	e7fe      	b.n	800204c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800204e:	f001 ffad 	bl	8003fac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205a:	429a      	cmp	r2, r3
 800205c:	d302      	bcc.n	8002064 <xQueueGenericSend+0xe4>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d129      	bne.n	80020b8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800206a:	f000 fa15 	bl	8002498 <prvCopyDataToQueue>
 800206e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	3324      	adds	r3, #36	; 0x24
 800207c:	4618      	mov	r0, r3
 800207e:	f001 f823 	bl	80030c8 <xTaskRemoveFromEventList>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002088:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <xQueueGenericSend+0x208>)
 800208a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	f3bf 8f6f 	isb	sy
 8002098:	e00a      	b.n	80020b0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80020a0:	4b39      	ldr	r3, [pc, #228]	; (8002188 <xQueueGenericSend+0x208>)
 80020a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020b0:	f001 ffb0 	bl	8004014 <vPortExitCritical>
				return pdPASS;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e063      	b.n	8002180 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d103      	bne.n	80020c6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020be:	f001 ffa9 	bl	8004014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e05c      	b.n	8002180 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 f85f 	bl	8003194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020d6:	2301      	movs	r3, #1
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020da:	f001 ff9b 	bl	8004014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020de:	f000 fdc5 	bl	8002c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020e2:	f001 ff63 	bl	8003fac <vPortEnterCritical>
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020ec:	b25b      	sxtb	r3, r3
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d103      	bne.n	80020fc <xQueueGenericSend+0x17c>
 80020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002102:	b25b      	sxtb	r3, r3
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d103      	bne.n	8002112 <xQueueGenericSend+0x192>
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002112:	f001 ff7f 	bl	8004014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002116:	1d3a      	adds	r2, r7, #4
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f001 f84e 	bl	80031c0 <xTaskCheckForTimeOut>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d124      	bne.n	8002174 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800212a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800212c:	f000 faac 	bl	8002688 <prvIsQueueFull>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d018      	beq.n	8002168 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	3310      	adds	r3, #16
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f000 ff6e 	bl	8003020 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002146:	f000 fa37 	bl	80025b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800214a:	f000 fd9d 	bl	8002c88 <xTaskResumeAll>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f af7c 	bne.w	800204e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <xQueueGenericSend+0x208>)
 8002158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	e772      	b.n	800204e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800216a:	f000 fa25 	bl	80025b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800216e:	f000 fd8b 	bl	8002c88 <xTaskResumeAll>
 8002172:	e76c      	b.n	800204e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002176:	f000 fa1f 	bl	80025b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800217a:	f000 fd85 	bl	8002c88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800217e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002180:	4618      	mov	r0, r3
 8002182:	3738      	adds	r7, #56	; 0x38
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	e000ed04 	.word	0xe000ed04

0800218c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10c      	bne.n	80021be <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80021a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a8:	b672      	cpsid	i
 80021aa:	f383 8811 	msr	BASEPRI, r3
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	f3bf 8f4f 	dsb	sy
 80021b6:	b662      	cpsie	i
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021ba:	bf00      	nop
 80021bc:	e7fe      	b.n	80021bc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d103      	bne.n	80021cc <xQueueGenericSendFromISR+0x40>
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <xQueueGenericSendFromISR+0x44>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <xQueueGenericSendFromISR+0x46>
 80021d0:	2300      	movs	r3, #0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80021d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021da:	b672      	cpsid	i
 80021dc:	f383 8811 	msr	BASEPRI, r3
 80021e0:	f3bf 8f6f 	isb	sy
 80021e4:	f3bf 8f4f 	dsb	sy
 80021e8:	b662      	cpsie	i
 80021ea:	623b      	str	r3, [r7, #32]
}
 80021ec:	bf00      	nop
 80021ee:	e7fe      	b.n	80021ee <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d103      	bne.n	80021fe <xQueueGenericSendFromISR+0x72>
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <xQueueGenericSendFromISR+0x76>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <xQueueGenericSendFromISR+0x78>
 8002202:	2300      	movs	r3, #0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10c      	bne.n	8002222 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8002208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220c:	b672      	cpsid	i
 800220e:	f383 8811 	msr	BASEPRI, r3
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	f3bf 8f4f 	dsb	sy
 800221a:	b662      	cpsie	i
 800221c:	61fb      	str	r3, [r7, #28]
}
 800221e:	bf00      	nop
 8002220:	e7fe      	b.n	8002220 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002222:	f001 ffab 	bl	800417c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002226:	f3ef 8211 	mrs	r2, BASEPRI
 800222a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222e:	b672      	cpsid	i
 8002230:	f383 8811 	msr	BASEPRI, r3
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	b662      	cpsie	i
 800223e:	61ba      	str	r2, [r7, #24]
 8002240:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002242:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	429a      	cmp	r2, r3
 8002250:	d302      	bcc.n	8002258 <xQueueGenericSendFromISR+0xcc>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d12c      	bne.n	80022b2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800225e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002268:	f000 f916 	bl	8002498 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800226c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d112      	bne.n	800229c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	2b00      	cmp	r3, #0
 800227c:	d016      	beq.n	80022ac <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	3324      	adds	r3, #36	; 0x24
 8002282:	4618      	mov	r0, r3
 8002284:	f000 ff20 	bl	80030c8 <xTaskRemoveFromEventList>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00e      	beq.n	80022ac <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e007      	b.n	80022ac <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800229c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	b25a      	sxtb	r2, r3
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80022ac:	2301      	movs	r3, #1
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80022b0:	e001      	b.n	80022b6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3738      	adds	r7, #56	; 0x38
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80022d8:	2300      	movs	r3, #0
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <xQueueReceive+0x34>
	__asm volatile
 80022e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ea:	b672      	cpsid	i
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	b662      	cpsie	i
 80022fa:	623b      	str	r3, [r7, #32]
}
 80022fc:	bf00      	nop
 80022fe:	e7fe      	b.n	80022fe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <xQueueReceive+0x42>
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <xQueueReceive+0x46>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <xQueueReceive+0x48>
 8002312:	2300      	movs	r3, #0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10c      	bne.n	8002332 <xQueueReceive+0x66>
	__asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231c:	b672      	cpsid	i
 800231e:	f383 8811 	msr	BASEPRI, r3
 8002322:	f3bf 8f6f 	isb	sy
 8002326:	f3bf 8f4f 	dsb	sy
 800232a:	b662      	cpsie	i
 800232c:	61fb      	str	r3, [r7, #28]
}
 800232e:	bf00      	nop
 8002330:	e7fe      	b.n	8002330 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002332:	f001 f88f 	bl	8003454 <xTaskGetSchedulerState>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <xQueueReceive+0x76>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <xQueueReceive+0x7a>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <xQueueReceive+0x7c>
 8002346:	2300      	movs	r3, #0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10c      	bne.n	8002366 <xQueueReceive+0x9a>
	__asm volatile
 800234c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002350:	b672      	cpsid	i
 8002352:	f383 8811 	msr	BASEPRI, r3
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	f3bf 8f4f 	dsb	sy
 800235e:	b662      	cpsie	i
 8002360:	61bb      	str	r3, [r7, #24]
}
 8002362:	bf00      	nop
 8002364:	e7fe      	b.n	8002364 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002366:	f001 fe21 	bl	8003fac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01f      	beq.n	80023b6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800237a:	f000 f8f7 	bl	800256c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00f      	beq.n	80023ae <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	3310      	adds	r3, #16
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fe98 	bl	80030c8 <xTaskRemoveFromEventList>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <xQueueReceive+0x1c8>)
 80023a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023ae:	f001 fe31 	bl	8004014 <vPortExitCritical>
				return pdPASS;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e069      	b.n	800248a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d103      	bne.n	80023c4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023bc:	f001 fe2a 	bl	8004014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e062      	b.n	800248a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023ca:	f107 0310 	add.w	r3, r7, #16
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fee0 	bl	8003194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023d4:	2301      	movs	r3, #1
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023d8:	f001 fe1c 	bl	8004014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023dc:	f000 fc46 	bl	8002c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023e0:	f001 fde4 	bl	8003fac <vPortEnterCritical>
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d103      	bne.n	80023fa <xQueueReceive+0x12e>
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002400:	b25b      	sxtb	r3, r3
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d103      	bne.n	8002410 <xQueueReceive+0x144>
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002410:	f001 fe00 	bl	8004014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002414:	1d3a      	adds	r2, r7, #4
 8002416:	f107 0310 	add.w	r3, r7, #16
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fecf 	bl	80031c0 <xTaskCheckForTimeOut>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d123      	bne.n	8002470 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800242a:	f000 f917 	bl	800265c <prvIsQueueEmpty>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d017      	beq.n	8002464 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	3324      	adds	r3, #36	; 0x24
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fdef 	bl	8003020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002444:	f000 f8b8 	bl	80025b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002448:	f000 fc1e 	bl	8002c88 <xTaskResumeAll>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d189      	bne.n	8002366 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <xQueueReceive+0x1c8>)
 8002454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f3bf 8f4f 	dsb	sy
 800245e:	f3bf 8f6f 	isb	sy
 8002462:	e780      	b.n	8002366 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002466:	f000 f8a7 	bl	80025b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800246a:	f000 fc0d 	bl	8002c88 <xTaskResumeAll>
 800246e:	e77a      	b.n	8002366 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002472:	f000 f8a1 	bl	80025b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002476:	f000 fc07 	bl	8002c88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800247a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800247c:	f000 f8ee 	bl	800265c <prvIsQueueEmpty>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	f43f af6f 	beq.w	8002366 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002488:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800248a:	4618      	mov	r0, r3
 800248c:	3730      	adds	r7, #48	; 0x30
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	e000ed04 	.word	0xe000ed04

08002498 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d14d      	bne.n	800255a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 ffe4 	bl	8003490 <xTaskPriorityDisinherit>
 80024c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e043      	b.n	800255a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d119      	bne.n	800250c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6858      	ldr	r0, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	461a      	mov	r2, r3
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	f002 f89c 	bl	8004620 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	441a      	add	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d32b      	bcc.n	800255a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	e026      	b.n	800255a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68d8      	ldr	r0, [r3, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	461a      	mov	r2, r3
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	f002 f882 	bl	8004620 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	425b      	negs	r3, r3
 8002526:	441a      	add	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d207      	bcs.n	8002548 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	425b      	negs	r3, r3
 8002542:	441a      	add	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d105      	bne.n	800255a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	3b01      	subs	r3, #1
 8002558:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002562:	697b      	ldr	r3, [r7, #20]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d018      	beq.n	80025b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	441a      	add	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	429a      	cmp	r2, r3
 8002596:	d303      	bcc.n	80025a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68d9      	ldr	r1, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	461a      	mov	r2, r3
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	f002 f838 	bl	8004620 <memcpy>
	}
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025c0:	f001 fcf4 	bl	8003fac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025cc:	e011      	b.n	80025f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d012      	beq.n	80025fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3324      	adds	r3, #36	; 0x24
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fd74 	bl	80030c8 <xTaskRemoveFromEventList>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80025e6:	f000 fe51 	bl	800328c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dce9      	bgt.n	80025ce <prvUnlockQueue+0x16>
 80025fa:	e000      	b.n	80025fe <prvUnlockQueue+0x46>
					break;
 80025fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	22ff      	movs	r2, #255	; 0xff
 8002602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002606:	f001 fd05 	bl	8004014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800260a:	f001 fccf 	bl	8003fac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002614:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002616:	e011      	b.n	800263c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3310      	adds	r3, #16
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fd4f 	bl	80030c8 <xTaskRemoveFromEventList>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002630:	f000 fe2c 	bl	800328c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002634:	7bbb      	ldrb	r3, [r7, #14]
 8002636:	3b01      	subs	r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800263c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002640:	2b00      	cmp	r3, #0
 8002642:	dce9      	bgt.n	8002618 <prvUnlockQueue+0x60>
 8002644:	e000      	b.n	8002648 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002646:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	22ff      	movs	r2, #255	; 0xff
 800264c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002650:	f001 fce0 	bl	8004014 <vPortExitCritical>
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002664:	f001 fca2 	bl	8003fac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002670:	2301      	movs	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e001      	b.n	800267a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800267a:	f001 fccb 	bl	8004014 <vPortExitCritical>

	return xReturn;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002690:	f001 fc8c 	bl	8003fac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	429a      	cmp	r2, r3
 800269e:	d102      	bne.n	80026a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80026a0:	2301      	movs	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e001      	b.n	80026aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026aa:	f001 fcb3 	bl	8004014 <vPortExitCritical>

	return xReturn;
 80026ae:	68fb      	ldr	r3, [r7, #12]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e014      	b.n	80026f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80026c8:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <vQueueAddToRegistry+0x50>)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80026d4:	490c      	ldr	r1, [pc, #48]	; (8002708 <vQueueAddToRegistry+0x50>)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <vQueueAddToRegistry+0x50>)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80026ea:	e006      	b.n	80026fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3301      	adds	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b07      	cmp	r3, #7
 80026f6:	d9e7      	bls.n	80026c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	200049b8 	.word	0x200049b8

0800270c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800271c:	f001 fc46 	bl	8003fac <vPortEnterCritical>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002726:	b25b      	sxtb	r3, r3
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d103      	bne.n	8002736 <vQueueWaitForMessageRestricted+0x2a>
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800273c:	b25b      	sxtb	r3, r3
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d103      	bne.n	800274c <vQueueWaitForMessageRestricted+0x40>
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800274c:	f001 fc62 	bl	8004014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3324      	adds	r3, #36	; 0x24
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fc83 	bl	800306c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff26 	bl	80025b8 <prvUnlockQueue>
	}
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08e      	sub	sp, #56	; 0x38
 8002778:	af04      	add	r7, sp, #16
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10c      	bne.n	80027a2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	b672      	cpsid	i
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	b662      	cpsie	i
 800279c:	623b      	str	r3, [r7, #32]
}
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10c      	bne.n	80027c2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	b672      	cpsid	i
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	b662      	cpsie	i
 80027bc:	61fb      	str	r3, [r7, #28]
}
 80027be:	bf00      	nop
 80027c0:	e7fe      	b.n	80027c0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80027c2:	235c      	movs	r3, #92	; 0x5c
 80027c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b5c      	cmp	r3, #92	; 0x5c
 80027ca:	d00c      	beq.n	80027e6 <xTaskCreateStatic+0x72>
	__asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d0:	b672      	cpsid	i
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	b662      	cpsie	i
 80027e0:	61bb      	str	r3, [r7, #24]
}
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80027e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01e      	beq.n	800282c <xTaskCreateStatic+0xb8>
 80027ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01b      	beq.n	800282c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	2202      	movs	r2, #2
 8002802:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002806:	2300      	movs	r3, #0
 8002808:	9303      	str	r3, [sp, #12]
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f850 	bl	80028c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002826:	f000 f8df 	bl	80029e8 <prvAddNewTaskToReadyList>
 800282a:	e001      	b.n	8002830 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002830:	697b      	ldr	r3, [r7, #20]
	}
 8002832:	4618      	mov	r0, r3
 8002834:	3728      	adds	r7, #40	; 0x28
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800283a:	b580      	push	{r7, lr}
 800283c:	b08c      	sub	sp, #48	; 0x30
 800283e:	af04      	add	r7, sp, #16
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fcd8 	bl	8004204 <pvPortMalloc>
 8002854:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00e      	beq.n	800287a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800285c:	205c      	movs	r0, #92	; 0x5c
 800285e:	f001 fcd1 	bl	8004204 <pvPortMalloc>
 8002862:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
 8002870:	e005      	b.n	800287e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f001 fd90 	bl	8004398 <vPortFree>
 8002878:	e001      	b.n	800287e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d017      	beq.n	80028b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800288c:	88fa      	ldrh	r2, [r7, #6]
 800288e:	2300      	movs	r3, #0
 8002890:	9303      	str	r3, [sp, #12]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	9302      	str	r3, [sp, #8]
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f80e 	bl	80028c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028a8:	69f8      	ldr	r0, [r7, #28]
 80028aa:	f000 f89d 	bl	80029e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e002      	b.n	80028ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
 80028b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80028ba:	69bb      	ldr	r3, [r7, #24]
	}
 80028bc:	4618      	mov	r0, r3
 80028be:	3720      	adds	r7, #32
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	461a      	mov	r2, r3
 80028dc:	21a5      	movs	r1, #165	; 0xa5
 80028de:	f001 fead 	bl	800463c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80028ec:	440b      	add	r3, r1
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f023 0307 	bic.w	r3, r3, #7
 80028fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00c      	beq.n	8002920 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	b672      	cpsid	i
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	b662      	cpsie	i
 800291a:	617b      	str	r3, [r7, #20]
}
 800291c:	bf00      	nop
 800291e:	e7fe      	b.n	800291e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d01f      	beq.n	8002966 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	e012      	b.n	8002952 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	4413      	add	r3, r2
 8002932:	7819      	ldrb	r1, [r3, #0]
 8002934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	3334      	adds	r3, #52	; 0x34
 800293c:	460a      	mov	r2, r1
 800293e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	4413      	add	r3, r2
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	3301      	adds	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	2b0f      	cmp	r3, #15
 8002956:	d9e9      	bls.n	800292c <prvInitialiseNewTask+0x68>
 8002958:	e000      	b.n	800295c <prvInitialiseNewTask+0x98>
			{
				break;
 800295a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002964:	e003      	b.n	800296e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	2b37      	cmp	r3, #55	; 0x37
 8002972:	d901      	bls.n	8002978 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002974:	2337      	movs	r3, #55	; 0x37
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800297c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002982:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	2200      	movs	r2, #0
 8002988:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	3304      	adds	r3, #4
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff f952 	bl	8001c38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	3318      	adds	r3, #24
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f94d 	bl	8001c38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	2200      	movs	r2, #0
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	69b8      	ldr	r0, [r7, #24]
 80029c8:	f001 f9e2 	bl	8003d90 <pxPortInitialiseStack>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029de:	bf00      	nop
 80029e0:	3720      	adds	r7, #32
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029f0:	f001 fadc 	bl	8003fac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <prvAddNewTaskToReadyList+0xc4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <prvAddNewTaskToReadyList+0xc4>)
 80029fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029fe:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <prvAddNewTaskToReadyList+0xc8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a06:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <prvAddNewTaskToReadyList+0xc8>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <prvAddNewTaskToReadyList+0xc4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d110      	bne.n	8002a36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a14:	f000 fc5e 	bl	80032d4 <prvInitialiseTaskLists>
 8002a18:	e00d      	b.n	8002a36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a1a:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <prvAddNewTaskToReadyList+0xcc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a22:	4b23      	ldr	r3, [pc, #140]	; (8002ab0 <prvAddNewTaskToReadyList+0xc8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d802      	bhi.n	8002a36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a30:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <prvAddNewTaskToReadyList+0xc8>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <prvAddNewTaskToReadyList+0xd0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <prvAddNewTaskToReadyList+0xd0>)
 8002a3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <prvAddNewTaskToReadyList+0xd0>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <prvAddNewTaskToReadyList+0xd4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d903      	bls.n	8002a5c <prvAddNewTaskToReadyList+0x74>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	4a18      	ldr	r2, [pc, #96]	; (8002abc <prvAddNewTaskToReadyList+0xd4>)
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <prvAddNewTaskToReadyList+0xd8>)
 8002a6a:	441a      	add	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f7ff f8ed 	bl	8001c52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a78:	f001 facc 	bl	8004014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <prvAddNewTaskToReadyList+0xcc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00e      	beq.n	8002aa2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <prvAddNewTaskToReadyList+0xc8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d207      	bcs.n	8002aa2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a92:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <prvAddNewTaskToReadyList+0xdc>)
 8002a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000c28 	.word	0x20000c28
 8002ab0:	20000754 	.word	0x20000754
 8002ab4:	20000c34 	.word	0x20000c34
 8002ab8:	20000c44 	.word	0x20000c44
 8002abc:	20000c30 	.word	0x20000c30
 8002ac0:	20000758 	.word	0x20000758
 8002ac4:	e000ed04 	.word	0xe000ed04

08002ac8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10c      	bne.n	8002af4 <eTaskGetState+0x2c>
	__asm volatile
 8002ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ade:	b672      	cpsid	i
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	b662      	cpsie	i
 8002aee:	60bb      	str	r3, [r7, #8]
}
 8002af0:	bf00      	nop
 8002af2:	e7fe      	b.n	8002af2 <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 8002af4:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <eTaskGetState+0xbc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d102      	bne.n	8002b04 <eTaskGetState+0x3c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8002afe:	2300      	movs	r3, #0
 8002b00:	77fb      	strb	r3, [r7, #31]
 8002b02:	e03a      	b.n	8002b7a <eTaskGetState+0xb2>
		}
		else
		{
			taskENTER_CRITICAL();
 8002b04:	f001 fa52 	bl	8003fac <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <eTaskGetState+0xc0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <eTaskGetState+0xc4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8002b1a:	f001 fa7b 	bl	8004014 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d003      	beq.n	8002b2e <eTaskGetState+0x66>
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d102      	bne.n	8002b34 <eTaskGetState+0x6c>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	77fb      	strb	r3, [r7, #31]
 8002b32:	e022      	b.n	8002b7a <eTaskGetState+0xb2>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <eTaskGetState+0xc8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d112      	bne.n	8002b62 <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10b      	bne.n	8002b5c <eTaskGetState+0x94>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d102      	bne.n	8002b56 <eTaskGetState+0x8e>
							{
								eReturn = eBlocked;
 8002b50:	2302      	movs	r3, #2
 8002b52:	77fb      	strb	r3, [r7, #31]
 8002b54:	e011      	b.n	8002b7a <eTaskGetState+0xb2>
							}
							else
							{
								eReturn = eSuspended;
 8002b56:	2303      	movs	r3, #3
 8002b58:	77fb      	strb	r3, [r7, #31]
 8002b5a:	e00e      	b.n	8002b7a <eTaskGetState+0xb2>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	77fb      	strb	r3, [r7, #31]
 8002b60:	e00b      	b.n	8002b7a <eTaskGetState+0xb2>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <eTaskGetState+0xcc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d002      	beq.n	8002b70 <eTaskGetState+0xa8>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <eTaskGetState+0xae>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8002b70:	2304      	movs	r3, #4
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e001      	b.n	8002b7a <eTaskGetState+0xb2>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8002b76:	2301      	movs	r3, #1
 8002b78:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8002b7a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000754 	.word	0x20000754
 8002b88:	20000be0 	.word	0x20000be0
 8002b8c:	20000be4 	.word	0x20000be4
 8002b90:	20000c14 	.word	0x20000c14
 8002b94:	20000bfc 	.word	0x20000bfc

08002b98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	; 0x28
 8002b9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ba6:	463a      	mov	r2, r7
 8002ba8:	1d39      	adds	r1, r7, #4
 8002baa:	f107 0308 	add.w	r3, r7, #8
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe ffee 	bl	8001b90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002bb4:	6839      	ldr	r1, [r7, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	9202      	str	r2, [sp, #8]
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	4923      	ldr	r1, [pc, #140]	; (8002c54 <vTaskStartScheduler+0xbc>)
 8002bc8:	4823      	ldr	r0, [pc, #140]	; (8002c58 <vTaskStartScheduler+0xc0>)
 8002bca:	f7ff fdd3 	bl	8002774 <xTaskCreateStatic>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4a22      	ldr	r2, [pc, #136]	; (8002c5c <vTaskStartScheduler+0xc4>)
 8002bd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002bd4:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <vTaskStartScheduler+0xc4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e001      	b.n	8002be6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d102      	bne.n	8002bf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002bec:	f000 fd16 	bl	800361c <xTimerCreateTimerTask>
 8002bf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d118      	bne.n	8002c2a <vTaskStartScheduler+0x92>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	b672      	cpsid	i
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	b662      	cpsie	i
 8002c0c:	613b      	str	r3, [r7, #16]
}
 8002c0e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <vTaskStartScheduler+0xc8>)
 8002c12:	f04f 32ff 	mov.w	r2, #4294967295
 8002c16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <vTaskStartScheduler+0xcc>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <vTaskStartScheduler+0xd0>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c24:	f001 f944 	bl	8003eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c28:	e010      	b.n	8002c4c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d10c      	bne.n	8002c4c <vTaskStartScheduler+0xb4>
	__asm volatile
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	b672      	cpsid	i
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	b662      	cpsie	i
 8002c46:	60fb      	str	r3, [r7, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	e7fe      	b.n	8002c4a <vTaskStartScheduler+0xb2>
}
 8002c4c:	bf00      	nop
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	08005038 	.word	0x08005038
 8002c58:	080032a5 	.word	0x080032a5
 8002c5c:	20000c4c 	.word	0x20000c4c
 8002c60:	20000c48 	.word	0x20000c48
 8002c64:	20000c34 	.word	0x20000c34
 8002c68:	20000c2c 	.word	0x20000c2c

08002c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <vTaskSuspendAll+0x18>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	4a03      	ldr	r2, [pc, #12]	; (8002c84 <vTaskSuspendAll+0x18>)
 8002c78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002c7a:	bf00      	nop
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	20000c50 	.word	0x20000c50

08002c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c96:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <xTaskResumeAll+0x11c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10c      	bne.n	8002cb8 <xTaskResumeAll+0x30>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca2:	b672      	cpsid	i
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	b662      	cpsie	i
 8002cb2:	603b      	str	r3, [r7, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	e7fe      	b.n	8002cb6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002cb8:	f001 f978 	bl	8003fac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <xTaskResumeAll+0x11c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <xTaskResumeAll+0x11c>)
 8002cc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cc6:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <xTaskResumeAll+0x11c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d162      	bne.n	8002d94 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <xTaskResumeAll+0x120>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d05e      	beq.n	8002d94 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cd6:	e02f      	b.n	8002d38 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cd8:	4b34      	ldr	r3, [pc, #208]	; (8002dac <xTaskResumeAll+0x124>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff f811 	bl	8001d0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3304      	adds	r3, #4
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f80c 	bl	8001d0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf8:	4b2d      	ldr	r3, [pc, #180]	; (8002db0 <xTaskResumeAll+0x128>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d903      	bls.n	8002d08 <xTaskResumeAll+0x80>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <xTaskResumeAll+0x128>)
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <xTaskResumeAll+0x12c>)
 8002d16:	441a      	add	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	f7fe ff97 	bl	8001c52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <xTaskResumeAll+0x130>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d302      	bcc.n	8002d38 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <xTaskResumeAll+0x134>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d38:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <xTaskResumeAll+0x124>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1cb      	bne.n	8002cd8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d46:	f000 fb65 	bl	8003414 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <xTaskResumeAll+0x138>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d010      	beq.n	8002d78 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d56:	f000 f847 	bl	8002de8 <xTaskIncrementTick>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <xTaskResumeAll+0x134>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f1      	bne.n	8002d56 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <xTaskResumeAll+0x138>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <xTaskResumeAll+0x134>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d80:	2301      	movs	r3, #1
 8002d82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <xTaskResumeAll+0x13c>)
 8002d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d94:	f001 f93e 	bl	8004014 <vPortExitCritical>

	return xAlreadyYielded;
 8002d98:	68bb      	ldr	r3, [r7, #8]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000c50 	.word	0x20000c50
 8002da8:	20000c28 	.word	0x20000c28
 8002dac:	20000be8 	.word	0x20000be8
 8002db0:	20000c30 	.word	0x20000c30
 8002db4:	20000758 	.word	0x20000758
 8002db8:	20000754 	.word	0x20000754
 8002dbc:	20000c3c 	.word	0x20000c3c
 8002dc0:	20000c38 	.word	0x20000c38
 8002dc4:	e000ed04 	.word	0xe000ed04

08002dc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <xTaskGetTickCount+0x1c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002dd4:	687b      	ldr	r3, [r7, #4]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000c2c 	.word	0x20000c2c

08002de8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002df2:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <xTaskIncrementTick+0x14c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 808b 	bne.w	8002f12 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002dfc:	4b4e      	ldr	r3, [pc, #312]	; (8002f38 <xTaskIncrementTick+0x150>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3301      	adds	r3, #1
 8002e02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e04:	4a4c      	ldr	r2, [pc, #304]	; (8002f38 <xTaskIncrementTick+0x150>)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d122      	bne.n	8002e56 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e10:	4b4a      	ldr	r3, [pc, #296]	; (8002f3c <xTaskIncrementTick+0x154>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <xTaskIncrementTick+0x4c>
	__asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	b672      	cpsid	i
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	b662      	cpsie	i
 8002e2e:	603b      	str	r3, [r7, #0]
}
 8002e30:	bf00      	nop
 8002e32:	e7fe      	b.n	8002e32 <xTaskIncrementTick+0x4a>
 8002e34:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <xTaskIncrementTick+0x154>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	4b41      	ldr	r3, [pc, #260]	; (8002f40 <xTaskIncrementTick+0x158>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a3f      	ldr	r2, [pc, #252]	; (8002f3c <xTaskIncrementTick+0x154>)
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4a3f      	ldr	r2, [pc, #252]	; (8002f40 <xTaskIncrementTick+0x158>)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b3e      	ldr	r3, [pc, #248]	; (8002f44 <xTaskIncrementTick+0x15c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	4a3d      	ldr	r2, [pc, #244]	; (8002f44 <xTaskIncrementTick+0x15c>)
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	f000 fadf 	bl	8003414 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e56:	4b3c      	ldr	r3, [pc, #240]	; (8002f48 <xTaskIncrementTick+0x160>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d349      	bcc.n	8002ef4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e60:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <xTaskIncrementTick+0x154>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e6a:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <xTaskIncrementTick+0x160>)
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	601a      	str	r2, [r3, #0]
					break;
 8002e72:	e03f      	b.n	8002ef4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <xTaskIncrementTick+0x154>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d203      	bcs.n	8002e94 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e8c:	4a2e      	ldr	r2, [pc, #184]	; (8002f48 <xTaskIncrementTick+0x160>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e92:	e02f      	b.n	8002ef4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe ff37 	bl	8001d0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	3318      	adds	r3, #24
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe ff2e 	bl	8001d0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb4:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <xTaskIncrementTick+0x164>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d903      	bls.n	8002ec4 <xTaskIncrementTick+0xdc>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	4a22      	ldr	r2, [pc, #136]	; (8002f4c <xTaskIncrementTick+0x164>)
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <xTaskIncrementTick+0x168>)
 8002ed2:	441a      	add	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f7fe feb9 	bl	8001c52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <xTaskIncrementTick+0x16c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d3b8      	bcc.n	8002e60 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ef2:	e7b5      	b.n	8002e60 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ef4:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <xTaskIncrementTick+0x16c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efa:	4915      	ldr	r1, [pc, #84]	; (8002f50 <xTaskIncrementTick+0x168>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d907      	bls.n	8002f1c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	e004      	b.n	8002f1c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <xTaskIncrementTick+0x170>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <xTaskIncrementTick+0x170>)
 8002f1a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <xTaskIncrementTick+0x174>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8002f24:	2301      	movs	r3, #1
 8002f26:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002f28:	697b      	ldr	r3, [r7, #20]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000c50 	.word	0x20000c50
 8002f38:	20000c2c 	.word	0x20000c2c
 8002f3c:	20000be0 	.word	0x20000be0
 8002f40:	20000be4 	.word	0x20000be4
 8002f44:	20000c40 	.word	0x20000c40
 8002f48:	20000c48 	.word	0x20000c48
 8002f4c:	20000c30 	.word	0x20000c30
 8002f50:	20000758 	.word	0x20000758
 8002f54:	20000754 	.word	0x20000754
 8002f58:	20000c38 	.word	0x20000c38
 8002f5c:	20000c3c 	.word	0x20000c3c

08002f60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <vTaskSwitchContext+0xac>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <vTaskSwitchContext+0xb0>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f74:	e043      	b.n	8002ffe <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <vTaskSwitchContext+0xb0>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <vTaskSwitchContext+0xb4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e012      	b.n	8002faa <vTaskSwitchContext+0x4a>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10c      	bne.n	8002fa4 <vTaskSwitchContext+0x44>
	__asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	b672      	cpsid	i
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	b662      	cpsie	i
 8002f9e:	607b      	str	r3, [r7, #4]
}
 8002fa0:	bf00      	nop
 8002fa2:	e7fe      	b.n	8002fa2 <vTaskSwitchContext+0x42>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	491b      	ldr	r1, [pc, #108]	; (8003018 <vTaskSwitchContext+0xb8>)
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0e2      	beq.n	8002f84 <vTaskSwitchContext+0x24>
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4a13      	ldr	r2, [pc, #76]	; (8003018 <vTaskSwitchContext+0xb8>)
 8002fca:	4413      	add	r3, r2
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3308      	adds	r3, #8
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d104      	bne.n	8002fee <vTaskSwitchContext+0x8e>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a09      	ldr	r2, [pc, #36]	; (800301c <vTaskSwitchContext+0xbc>)
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	4a06      	ldr	r2, [pc, #24]	; (8003014 <vTaskSwitchContext+0xb4>)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6013      	str	r3, [r2, #0]
}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000c50 	.word	0x20000c50
 8003010:	20000c3c 	.word	0x20000c3c
 8003014:	20000c30 	.word	0x20000c30
 8003018:	20000758 	.word	0x20000758
 800301c:	20000754 	.word	0x20000754

08003020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10c      	bne.n	800304a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	b672      	cpsid	i
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	b662      	cpsie	i
 8003044:	60fb      	str	r3, [r7, #12]
}
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <vTaskPlaceOnEventList+0x48>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3318      	adds	r3, #24
 8003050:	4619      	mov	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe fe21 	bl	8001c9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003058:	2101      	movs	r1, #1
 800305a:	6838      	ldr	r0, [r7, #0]
 800305c:	f000 fa8a 	bl	8003574 <prvAddCurrentTaskToDelayedList>
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20000754 	.word	0x20000754

0800306c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	b672      	cpsid	i
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	b662      	cpsie	i
 8003092:	617b      	str	r3, [r7, #20]
}
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <vTaskPlaceOnEventListRestricted+0x58>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3318      	adds	r3, #24
 800309e:	4619      	mov	r1, r3
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7fe fdd6 	bl	8001c52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80030ac:	f04f 33ff 	mov.w	r3, #4294967295
 80030b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	68b8      	ldr	r0, [r7, #8]
 80030b6:	f000 fa5d 	bl	8003574 <prvAddCurrentTaskToDelayedList>
	}
 80030ba:	bf00      	nop
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000754 	.word	0x20000754

080030c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	b672      	cpsid	i
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	b662      	cpsie	i
 80030f2:	60fb      	str	r3, [r7, #12]
}
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	3318      	adds	r3, #24
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fe05 	bl	8001d0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <xTaskRemoveFromEventList+0xb4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d11d      	bne.n	8003146 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	3304      	adds	r3, #4
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fdfc 	bl	8001d0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <xTaskRemoveFromEventList+0xb8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d903      	bls.n	8003128 <xTaskRemoveFromEventList+0x60>
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	4a16      	ldr	r2, [pc, #88]	; (8003180 <xTaskRemoveFromEventList+0xb8>)
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4a13      	ldr	r2, [pc, #76]	; (8003184 <xTaskRemoveFromEventList+0xbc>)
 8003136:	441a      	add	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	3304      	adds	r3, #4
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f7fe fd87 	bl	8001c52 <vListInsertEnd>
 8003144:	e005      	b.n	8003152 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	3318      	adds	r3, #24
 800314a:	4619      	mov	r1, r3
 800314c:	480e      	ldr	r0, [pc, #56]	; (8003188 <xTaskRemoveFromEventList+0xc0>)
 800314e:	f7fe fd80 	bl	8001c52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <xTaskRemoveFromEventList+0xc4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	429a      	cmp	r2, r3
 800315e:	d905      	bls.n	800316c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <xTaskRemoveFromEventList+0xc8>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e001      	b.n	8003170 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003170:	697b      	ldr	r3, [r7, #20]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000c50 	.word	0x20000c50
 8003180:	20000c30 	.word	0x20000c30
 8003184:	20000758 	.word	0x20000758
 8003188:	20000be8 	.word	0x20000be8
 800318c:	20000754 	.word	0x20000754
 8003190:	20000c3c 	.word	0x20000c3c

08003194 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <vTaskInternalSetTimeOutState+0x24>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <vTaskInternalSetTimeOutState+0x28>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	605a      	str	r2, [r3, #4]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	20000c40 	.word	0x20000c40
 80031bc:	20000c2c 	.word	0x20000c2c

080031c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10c      	bne.n	80031ea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	b672      	cpsid	i
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	b662      	cpsie	i
 80031e4:	613b      	str	r3, [r7, #16]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10c      	bne.n	800320a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	b672      	cpsid	i
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	b662      	cpsie	i
 8003204:	60fb      	str	r3, [r7, #12]
}
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800320a:	f000 fecf 	bl	8003fac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <xTaskCheckForTimeOut+0xc4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d102      	bne.n	800322e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	e023      	b.n	8003276 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <xTaskCheckForTimeOut+0xc8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d007      	beq.n	800324a <xTaskCheckForTimeOut+0x8a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	429a      	cmp	r2, r3
 8003242:	d302      	bcc.n	800324a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003244:	2301      	movs	r3, #1
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	e015      	b.n	8003276 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	d20b      	bcs.n	800326c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	1ad2      	subs	r2, r2, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff97 	bl	8003194 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	e004      	b.n	8003276 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003272:	2301      	movs	r3, #1
 8003274:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003276:	f000 fecd 	bl	8004014 <vPortExitCritical>

	return xReturn;
 800327a:	69fb      	ldr	r3, [r7, #28]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000c2c 	.word	0x20000c2c
 8003288:	20000c40 	.word	0x20000c40

0800328c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <vTaskMissedYield+0x14>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	20000c3c 	.word	0x20000c3c

080032a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032ac:	f000 f852 	bl	8003354 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <prvIdleTask+0x28>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d9f9      	bls.n	80032ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <prvIdleTask+0x2c>)
 80032ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032c8:	e7f0      	b.n	80032ac <prvIdleTask+0x8>
 80032ca:	bf00      	nop
 80032cc:	20000758 	.word	0x20000758
 80032d0:	e000ed04 	.word	0xe000ed04

080032d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032da:	2300      	movs	r3, #0
 80032dc:	607b      	str	r3, [r7, #4]
 80032de:	e00c      	b.n	80032fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <prvInitialiseTaskLists+0x60>)
 80032ec:	4413      	add	r3, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fc82 	bl	8001bf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3301      	adds	r3, #1
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b37      	cmp	r3, #55	; 0x37
 80032fe:	d9ef      	bls.n	80032e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003300:	480d      	ldr	r0, [pc, #52]	; (8003338 <prvInitialiseTaskLists+0x64>)
 8003302:	f7fe fc79 	bl	8001bf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003306:	480d      	ldr	r0, [pc, #52]	; (800333c <prvInitialiseTaskLists+0x68>)
 8003308:	f7fe fc76 	bl	8001bf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800330c:	480c      	ldr	r0, [pc, #48]	; (8003340 <prvInitialiseTaskLists+0x6c>)
 800330e:	f7fe fc73 	bl	8001bf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003312:	480c      	ldr	r0, [pc, #48]	; (8003344 <prvInitialiseTaskLists+0x70>)
 8003314:	f7fe fc70 	bl	8001bf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003318:	480b      	ldr	r0, [pc, #44]	; (8003348 <prvInitialiseTaskLists+0x74>)
 800331a:	f7fe fc6d 	bl	8001bf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <prvInitialiseTaskLists+0x78>)
 8003320:	4a05      	ldr	r2, [pc, #20]	; (8003338 <prvInitialiseTaskLists+0x64>)
 8003322:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003324:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <prvInitialiseTaskLists+0x7c>)
 8003326:	4a05      	ldr	r2, [pc, #20]	; (800333c <prvInitialiseTaskLists+0x68>)
 8003328:	601a      	str	r2, [r3, #0]
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000758 	.word	0x20000758
 8003338:	20000bb8 	.word	0x20000bb8
 800333c:	20000bcc 	.word	0x20000bcc
 8003340:	20000be8 	.word	0x20000be8
 8003344:	20000bfc 	.word	0x20000bfc
 8003348:	20000c14 	.word	0x20000c14
 800334c:	20000be0 	.word	0x20000be0
 8003350:	20000be4 	.word	0x20000be4

08003354 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800335a:	e019      	b.n	8003390 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800335c:	f000 fe26 	bl	8003fac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <prvCheckTasksWaitingTermination+0x50>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe fccd 	bl	8001d0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <prvCheckTasksWaitingTermination+0x54>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3b01      	subs	r3, #1
 8003378:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <prvCheckTasksWaitingTermination+0x54>)
 800337a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <prvCheckTasksWaitingTermination+0x58>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3b01      	subs	r3, #1
 8003382:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <prvCheckTasksWaitingTermination+0x58>)
 8003384:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003386:	f000 fe45 	bl	8004014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f810 	bl	80033b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <prvCheckTasksWaitingTermination+0x58>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e1      	bne.n	800335c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000bfc 	.word	0x20000bfc
 80033a8:	20000c28 	.word	0x20000c28
 80033ac:	20000c10 	.word	0x20000c10

080033b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d108      	bne.n	80033d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 ffe6 	bl	8004398 <vPortFree>
				vPortFree( pxTCB );
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 ffe3 	bl	8004398 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033d2:	e01a      	b.n	800340a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d103      	bne.n	80033e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 ffda 	bl	8004398 <vPortFree>
	}
 80033e4:	e011      	b.n	800340a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d00c      	beq.n	800340a <prvDeleteTCB+0x5a>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	b672      	cpsid	i
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	b662      	cpsie	i
 8003404:	60fb      	str	r3, [r7, #12]
}
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <prvDeleteTCB+0x58>
	}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <prvResetNextTaskUnblockTime+0x38>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <prvResetNextTaskUnblockTime+0x3c>)
 8003426:	f04f 32ff 	mov.w	r2, #4294967295
 800342a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800342c:	e008      	b.n	8003440 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <prvResetNextTaskUnblockTime+0x38>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a04      	ldr	r2, [pc, #16]	; (8003450 <prvResetNextTaskUnblockTime+0x3c>)
 800343e:	6013      	str	r3, [r2, #0]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	20000be0 	.word	0x20000be0
 8003450:	20000c48 	.word	0x20000c48

08003454 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <xTaskGetSchedulerState+0x34>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d102      	bne.n	8003468 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003462:	2301      	movs	r3, #1
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	e008      	b.n	800347a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <xTaskGetSchedulerState+0x38>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003470:	2302      	movs	r3, #2
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	e001      	b.n	800347a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800347a:	687b      	ldr	r3, [r7, #4]
	}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	20000c34 	.word	0x20000c34
 800348c:	20000c50 	.word	0x20000c50

08003490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d05a      	beq.n	800355c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80034a6:	4b30      	ldr	r3, [pc, #192]	; (8003568 <xTaskPriorityDisinherit+0xd8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d00c      	beq.n	80034ca <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	b672      	cpsid	i
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	b662      	cpsie	i
 80034c4:	60fb      	str	r3, [r7, #12]
}
 80034c6:	bf00      	nop
 80034c8:	e7fe      	b.n	80034c8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	b672      	cpsid	i
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	b662      	cpsie	i
 80034e6:	60bb      	str	r3, [r7, #8]
}
 80034e8:	bf00      	nop
 80034ea:	e7fe      	b.n	80034ea <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f0:	1e5a      	subs	r2, r3, #1
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	429a      	cmp	r2, r3
 8003500:	d02c      	beq.n	800355c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003506:	2b00      	cmp	r3, #0
 8003508:	d128      	bne.n	800355c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	3304      	adds	r3, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fbfc 	bl	8001d0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <xTaskPriorityDisinherit+0xdc>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d903      	bls.n	800353c <xTaskPriorityDisinherit+0xac>
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	4a0c      	ldr	r2, [pc, #48]	; (800356c <xTaskPriorityDisinherit+0xdc>)
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4a09      	ldr	r2, [pc, #36]	; (8003570 <xTaskPriorityDisinherit+0xe0>)
 800354a:	441a      	add	r2, r3
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	3304      	adds	r3, #4
 8003550:	4619      	mov	r1, r3
 8003552:	4610      	mov	r0, r2
 8003554:	f7fe fb7d 	bl	8001c52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003558:	2301      	movs	r3, #1
 800355a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800355c:	697b      	ldr	r3, [r7, #20]
	}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000754 	.word	0x20000754
 800356c:	20000c30 	.word	0x20000c30
 8003570:	20000758 	.word	0x20000758

08003574 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800357e:	4b21      	ldr	r3, [pc, #132]	; (8003604 <prvAddCurrentTaskToDelayedList+0x90>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003584:	4b20      	ldr	r3, [pc, #128]	; (8003608 <prvAddCurrentTaskToDelayedList+0x94>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3304      	adds	r3, #4
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fbbe 	bl	8001d0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d10a      	bne.n	80035ae <prvAddCurrentTaskToDelayedList+0x3a>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800359e:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <prvAddCurrentTaskToDelayedList+0x94>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4619      	mov	r1, r3
 80035a6:	4819      	ldr	r0, [pc, #100]	; (800360c <prvAddCurrentTaskToDelayedList+0x98>)
 80035a8:	f7fe fb53 	bl	8001c52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035ac:	e026      	b.n	80035fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4413      	add	r3, r2
 80035b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <prvAddCurrentTaskToDelayedList+0x94>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d209      	bcs.n	80035da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <prvAddCurrentTaskToDelayedList+0x9c>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <prvAddCurrentTaskToDelayedList+0x94>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f7fe fb61 	bl	8001c9a <vListInsert>
}
 80035d8:	e010      	b.n	80035fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <prvAddCurrentTaskToDelayedList+0xa0>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <prvAddCurrentTaskToDelayedList+0x94>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f7fe fb57 	bl	8001c9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <prvAddCurrentTaskToDelayedList+0xa4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d202      	bcs.n	80035fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80035f6:	4a08      	ldr	r2, [pc, #32]	; (8003618 <prvAddCurrentTaskToDelayedList+0xa4>)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6013      	str	r3, [r2, #0]
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20000c2c 	.word	0x20000c2c
 8003608:	20000754 	.word	0x20000754
 800360c:	20000c14 	.word	0x20000c14
 8003610:	20000be4 	.word	0x20000be4
 8003614:	20000be0 	.word	0x20000be0
 8003618:	20000c48 	.word	0x20000c48

0800361c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003626:	f000 fb73 	bl	8003d10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800362a:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <xTimerCreateTimerTask+0x84>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d021      	beq.n	8003676 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800363a:	1d3a      	adds	r2, r7, #4
 800363c:	f107 0108 	add.w	r1, r7, #8
 8003640:	f107 030c 	add.w	r3, r7, #12
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe fabd 	bl	8001bc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	9202      	str	r2, [sp, #8]
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	2302      	movs	r3, #2
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2300      	movs	r3, #0
 800365a:	460a      	mov	r2, r1
 800365c:	4911      	ldr	r1, [pc, #68]	; (80036a4 <xTimerCreateTimerTask+0x88>)
 800365e:	4812      	ldr	r0, [pc, #72]	; (80036a8 <xTimerCreateTimerTask+0x8c>)
 8003660:	f7ff f888 	bl	8002774 <xTaskCreateStatic>
 8003664:	4603      	mov	r3, r0
 8003666:	4a11      	ldr	r2, [pc, #68]	; (80036ac <xTimerCreateTimerTask+0x90>)
 8003668:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <xTimerCreateTimerTask+0x90>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003672:	2301      	movs	r3, #1
 8003674:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10c      	bne.n	8003696 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	b672      	cpsid	i
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	b662      	cpsie	i
 8003690:	613b      	str	r3, [r7, #16]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8003696:	697b      	ldr	r3, [r7, #20]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000c84 	.word	0x20000c84
 80036a4:	08005040 	.word	0x08005040
 80036a8:	080038a9 	.word	0x080038a9
 80036ac:	20000c88 	.word	0x20000c88

080036b0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80036be:	202c      	movs	r0, #44	; 0x2c
 80036c0:	f000 fda0 	bl	8004204 <pvPortMalloc>
 80036c4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f805 	bl	80036f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80036e8:	697b      	ldr	r3, [r7, #20]
	}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10c      	bne.n	8003720 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370a:	b672      	cpsid	i
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	b662      	cpsie	i
 800371a:	617b      	str	r3, [r7, #20]
}
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01e      	beq.n	8003764 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003726:	f000 faf3 	bl	8003d10 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	6a3a      	ldr	r2, [r7, #32]
 8003740:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	3304      	adds	r3, #4
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fa76 	bl	8001c38 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	b2da      	uxtb	r2, r3
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003764:	bf00      	nop
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08a      	sub	sp, #40	; 0x28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10c      	bne.n	800379e <xTimerGenericCommand+0x32>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	b672      	cpsid	i
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	b662      	cpsie	i
 8003798:	623b      	str	r3, [r7, #32]
}
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800379e:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <xTimerGenericCommand+0x9c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02a      	beq.n	80037fc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	dc18      	bgt.n	80037ea <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80037b8:	f7ff fe4c 	bl	8003454 <xTaskGetSchedulerState>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d109      	bne.n	80037d6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <xTimerGenericCommand+0x9c>)
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	f107 0110 	add.w	r1, r7, #16
 80037ca:	2300      	movs	r3, #0
 80037cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ce:	f7fe fbd7 	bl	8001f80 <xQueueGenericSend>
 80037d2:	6278      	str	r0, [r7, #36]	; 0x24
 80037d4:	e012      	b.n	80037fc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <xTimerGenericCommand+0x9c>)
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	f107 0110 	add.w	r1, r7, #16
 80037de:	2300      	movs	r3, #0
 80037e0:	2200      	movs	r2, #0
 80037e2:	f7fe fbcd 	bl	8001f80 <xQueueGenericSend>
 80037e6:	6278      	str	r0, [r7, #36]	; 0x24
 80037e8:	e008      	b.n	80037fc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <xTimerGenericCommand+0x9c>)
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	f107 0110 	add.w	r1, r7, #16
 80037f2:	2300      	movs	r3, #0
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	f7fe fcc9 	bl	800218c <xQueueGenericSendFromISR>
 80037fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3728      	adds	r7, #40	; 0x28
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000c84 	.word	0x20000c84

0800380c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af02      	add	r7, sp, #8
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003816:	4b23      	ldr	r3, [pc, #140]	; (80038a4 <prvProcessExpiredTimer+0x98>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	3304      	adds	r3, #4
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fa71 	bl	8001d0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d024      	beq.n	8003882 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	699a      	ldr	r2, [r3, #24]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	18d1      	adds	r1, r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	6978      	ldr	r0, [r7, #20]
 8003846:	f000 f8d3 	bl	80039f0 <prvInsertTimerInActiveList>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d021      	beq.n	8003894 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003850:	2300      	movs	r3, #0
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2300      	movs	r3, #0
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	2100      	movs	r1, #0
 800385a:	6978      	ldr	r0, [r7, #20]
 800385c:	f7ff ff86 	bl	800376c <xTimerGenericCommand>
 8003860:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d115      	bne.n	8003894 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	b672      	cpsid	i
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	b662      	cpsie	i
 800387c:	60fb      	str	r3, [r7, #12]
}
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	b2da      	uxtb	r2, r3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	6978      	ldr	r0, [r7, #20]
 800389a:	4798      	blx	r3
}
 800389c:	bf00      	nop
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000c7c 	.word	0x20000c7c

080038a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038b0:	f107 0308 	add.w	r3, r7, #8
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f857 	bl	8003968 <prvGetNextExpireTime>
 80038ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4619      	mov	r1, r3
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f803 	bl	80038cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80038c6:	f000 f8d5 	bl	8003a74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038ca:	e7f1      	b.n	80038b0 <prvTimerTask+0x8>

080038cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80038d6:	f7ff f9c9 	bl	8002c6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038da:	f107 0308 	add.w	r3, r7, #8
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f866 	bl	80039b0 <prvSampleTimeNow>
 80038e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d130      	bne.n	800394e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <prvProcessTimerOrBlockTask+0x3c>
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d806      	bhi.n	8003908 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80038fa:	f7ff f9c5 	bl	8002c88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff83 	bl	800380c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003906:	e024      	b.n	8003952 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <prvProcessTimerOrBlockTask+0x90>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <prvProcessTimerOrBlockTask+0x50>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <prvProcessTimerOrBlockTask+0x52>
 800391c:	2300      	movs	r3, #0
 800391e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <prvProcessTimerOrBlockTask+0x94>)
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	4619      	mov	r1, r3
 800392e:	f7fe feed 	bl	800270c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003932:	f7ff f9a9 	bl	8002c88 <xTaskResumeAll>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <prvProcessTimerOrBlockTask+0x98>)
 800393e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	f3bf 8f6f 	isb	sy
}
 800394c:	e001      	b.n	8003952 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800394e:	f7ff f99b 	bl	8002c88 <xTaskResumeAll>
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000c80 	.word	0x20000c80
 8003960:	20000c84 	.word	0x20000c84
 8003964:	e000ed04 	.word	0xe000ed04

08003968 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003970:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <prvGetNextExpireTime+0x44>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <prvGetNextExpireTime+0x16>
 800397a:	2201      	movs	r2, #1
 800397c:	e000      	b.n	8003980 <prvGetNextExpireTime+0x18>
 800397e:	2200      	movs	r2, #0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <prvGetNextExpireTime+0x44>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	e001      	b.n	800399c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800399c:	68fb      	ldr	r3, [r7, #12]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000c7c 	.word	0x20000c7c

080039b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80039b8:	f7ff fa06 	bl	8002dc8 <xTaskGetTickCount>
 80039bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <prvSampleTimeNow+0x3c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d205      	bcs.n	80039d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80039c8:	f000 f93c 	bl	8003c44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e002      	b.n	80039da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <prvSampleTimeNow+0x3c>)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80039e0:	68fb      	ldr	r3, [r7, #12]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000c8c 	.word	0x20000c8c

080039f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d812      	bhi.n	8003a3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	1ad2      	subs	r2, r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e01b      	b.n	8003a62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <prvInsertTimerInActiveList+0x7c>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f7fe f930 	bl	8001c9a <vListInsert>
 8003a3a:	e012      	b.n	8003a62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d206      	bcs.n	8003a52 <prvInsertTimerInActiveList+0x62>
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e007      	b.n	8003a62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a52:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <prvInsertTimerInActiveList+0x80>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f7fe f91c 	bl	8001c9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003a62:	697b      	ldr	r3, [r7, #20]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000c80 	.word	0x20000c80
 8003a70:	20000c7c 	.word	0x20000c7c

08003a74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08e      	sub	sp, #56	; 0x38
 8003a78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a7a:	e0d0      	b.n	8003c1e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da1a      	bge.n	8003ab8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	3304      	adds	r3, #4
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10c      	bne.n	8003aa8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	b672      	cpsid	i
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	b662      	cpsie	i
 8003aa2:	61fb      	str	r3, [r7, #28]
}
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aae:	6850      	ldr	r0, [r2, #4]
 8003ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab2:	6892      	ldr	r2, [r2, #8]
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f2c0 80ae 	blt.w	8003c1c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe f91b 	bl	8001d0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ad6:	463b      	mov	r3, r7
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ff69 	bl	80039b0 <prvSampleTimeNow>
 8003ade:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b09      	cmp	r3, #9
 8003ae4:	f200 809b 	bhi.w	8003c1e <prvProcessReceivedCommands+0x1aa>
 8003ae8:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <prvProcessReceivedCommands+0x7c>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	08003b19 	.word	0x08003b19
 8003af8:	08003b19 	.word	0x08003b19
 8003afc:	08003b91 	.word	0x08003b91
 8003b00:	08003ba5 	.word	0x08003ba5
 8003b04:	08003bf3 	.word	0x08003bf3
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b19 	.word	0x08003b19
 8003b10:	08003b91 	.word	0x08003b91
 8003b14:	08003ba5 	.word	0x08003ba5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	18d1      	adds	r1, r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b38:	f7ff ff5a 	bl	80039f0 <prvInsertTimerInActiveList>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d06d      	beq.n	8003c1e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d062      	beq.n	8003c1e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	441a      	add	r2, r3
 8003b60:	2300      	movs	r3, #0
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	2300      	movs	r3, #0
 8003b66:	2100      	movs	r1, #0
 8003b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b6a:	f7ff fdff 	bl	800376c <xTimerGenericCommand>
 8003b6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d153      	bne.n	8003c1e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	b672      	cpsid	i
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	b662      	cpsie	i
 8003b8a:	61bb      	str	r3, [r7, #24]
}
 8003b8c:	bf00      	nop
 8003b8e:	e7fe      	b.n	8003b8e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003ba2:	e03c      	b.n	8003c1e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10c      	bne.n	8003bde <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	b672      	cpsid	i
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	b662      	cpsie	i
 8003bd8:	617b      	str	r3, [r7, #20]
}
 8003bda:	bf00      	nop
 8003bdc:	e7fe      	b.n	8003bdc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	18d1      	adds	r1, r2, r3
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bec:	f7ff ff00 	bl	80039f0 <prvInsertTimerInActiveList>
					break;
 8003bf0:	e015      	b.n	8003c1e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8003c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c02:	f000 fbc9 	bl	8004398 <vPortFree>
 8003c06:	e00a      	b.n	8003c1e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003c1a:	e000      	b.n	8003c1e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003c1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <prvProcessReceivedCommands+0x1cc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	1d39      	adds	r1, r7, #4
 8003c24:	2200      	movs	r2, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fb50 	bl	80022cc <xQueueReceive>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f47f af24 	bne.w	8003a7c <prvProcessReceivedCommands+0x8>
	}
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3730      	adds	r7, #48	; 0x30
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000c84 	.word	0x20000c84

08003c44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c4a:	e04a      	b.n	8003ce2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c4c:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <prvSwitchTimerLists+0xc4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c56:	4b2c      	ldr	r3, [pc, #176]	; (8003d08 <prvSwitchTimerLists+0xc4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe f851 	bl	8001d0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d030      	beq.n	8003ce2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d90e      	bls.n	8003cb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <prvSwitchTimerLists+0xc4>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f7fd fff6 	bl	8001c9a <vListInsert>
 8003cae:	e018      	b.n	8003ce2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	2100      	movs	r1, #0
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff fd56 	bl	800376c <xTimerGenericCommand>
 8003cc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10c      	bne.n	8003ce2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	b672      	cpsid	i
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	b662      	cpsie	i
 8003cdc:	603b      	str	r3, [r7, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ce2:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <prvSwitchTimerLists+0xc4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1af      	bne.n	8003c4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <prvSwitchTimerLists+0xc4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <prvSwitchTimerLists+0xc8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <prvSwitchTimerLists+0xc4>)
 8003cf8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <prvSwitchTimerLists+0xc8>)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	bf00      	nop
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000c7c 	.word	0x20000c7c
 8003d0c:	20000c80 	.word	0x20000c80

08003d10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003d16:	f000 f949 	bl	8003fac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <prvCheckForValidListAndQueue+0x60>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d120      	bne.n	8003d64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003d22:	4814      	ldr	r0, [pc, #80]	; (8003d74 <prvCheckForValidListAndQueue+0x64>)
 8003d24:	f7fd ff68 	bl	8001bf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d28:	4813      	ldr	r0, [pc, #76]	; (8003d78 <prvCheckForValidListAndQueue+0x68>)
 8003d2a:	f7fd ff65 	bl	8001bf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <prvCheckForValidListAndQueue+0x6c>)
 8003d30:	4a10      	ldr	r2, [pc, #64]	; (8003d74 <prvCheckForValidListAndQueue+0x64>)
 8003d32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d34:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <prvCheckForValidListAndQueue+0x70>)
 8003d36:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <prvCheckForValidListAndQueue+0x68>)
 8003d38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <prvCheckForValidListAndQueue+0x74>)
 8003d40:	4a11      	ldr	r2, [pc, #68]	; (8003d88 <prvCheckForValidListAndQueue+0x78>)
 8003d42:	2110      	movs	r1, #16
 8003d44:	200a      	movs	r0, #10
 8003d46:	f7fe f875 	bl	8001e34 <xQueueGenericCreateStatic>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <prvCheckForValidListAndQueue+0x60>)
 8003d4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <prvCheckForValidListAndQueue+0x60>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <prvCheckForValidListAndQueue+0x60>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	490b      	ldr	r1, [pc, #44]	; (8003d8c <prvCheckForValidListAndQueue+0x7c>)
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fcaa 	bl	80026b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d64:	f000 f956 	bl	8004014 <vPortExitCritical>
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000c84 	.word	0x20000c84
 8003d74:	20000c54 	.word	0x20000c54
 8003d78:	20000c68 	.word	0x20000c68
 8003d7c:	20000c7c 	.word	0x20000c7c
 8003d80:	20000c80 	.word	0x20000c80
 8003d84:	20000d30 	.word	0x20000d30
 8003d88:	20000c90 	.word	0x20000c90
 8003d8c:	08005048 	.word	0x08005048

08003d90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3b04      	subs	r3, #4
 8003da0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b04      	subs	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f023 0201 	bic.w	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3b04      	subs	r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003dc0:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <pxPortInitialiseStack+0x64>)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3b14      	subs	r3, #20
 8003dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b04      	subs	r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f06f 0202 	mvn.w	r2, #2
 8003dde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b20      	subs	r3, #32
 8003de4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003de6:	68fb      	ldr	r3, [r7, #12]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	08003df9 	.word	0x08003df9

08003df8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e02:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <prvTaskExitError+0x5c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0a:	d00c      	beq.n	8003e26 <prvTaskExitError+0x2e>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	b672      	cpsid	i
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	b662      	cpsie	i
 8003e20:	60fb      	str	r3, [r7, #12]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <prvTaskExitError+0x2c>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	b672      	cpsid	i
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	b662      	cpsie	i
 8003e3a:	60bb      	str	r3, [r7, #8]
}
 8003e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e3e:	bf00      	nop
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0fc      	beq.n	8003e40 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	2000000c 	.word	0x2000000c
	...

08003e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e60:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <pxCurrentTCBConst2>)
 8003e62:	6819      	ldr	r1, [r3, #0]
 8003e64:	6808      	ldr	r0, [r1, #0]
 8003e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e6a:	f380 8809 	msr	PSP, r0
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f04f 0000 	mov.w	r0, #0
 8003e76:	f380 8811 	msr	BASEPRI, r0
 8003e7a:	4770      	bx	lr
 8003e7c:	f3af 8000 	nop.w

08003e80 <pxCurrentTCBConst2>:
 8003e80:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop

08003e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e88:	4808      	ldr	r0, [pc, #32]	; (8003eac <prvPortStartFirstTask+0x24>)
 8003e8a:	6800      	ldr	r0, [r0, #0]
 8003e8c:	6800      	ldr	r0, [r0, #0]
 8003e8e:	f380 8808 	msr	MSP, r0
 8003e92:	f04f 0000 	mov.w	r0, #0
 8003e96:	f380 8814 	msr	CONTROL, r0
 8003e9a:	b662      	cpsie	i
 8003e9c:	b661      	cpsie	f
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	df00      	svc	0
 8003ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003eaa:	bf00      	nop
 8003eac:	e000ed08 	.word	0xe000ed08

08003eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eb6:	4b37      	ldr	r3, [pc, #220]	; (8003f94 <xPortStartScheduler+0xe4>)
 8003eb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	22ff      	movs	r2, #255	; 0xff
 8003ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <xPortStartScheduler+0xe8>)
 8003edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ede:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <xPortStartScheduler+0xec>)
 8003ee0:	2207      	movs	r2, #7
 8003ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ee4:	e009      	b.n	8003efa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003ee6:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <xPortStartScheduler+0xec>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <xPortStartScheduler+0xec>)
 8003eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b80      	cmp	r3, #128	; 0x80
 8003f04:	d0ef      	beq.n	8003ee6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f06:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <xPortStartScheduler+0xec>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1c3 0307 	rsb	r3, r3, #7
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d00c      	beq.n	8003f2c <xPortStartScheduler+0x7c>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	b672      	cpsid	i
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	b662      	cpsie	i
 8003f26:	60bb      	str	r3, [r7, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <xPortStartScheduler+0xec>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <xPortStartScheduler+0xec>)
 8003f34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f36:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <xPortStartScheduler+0xec>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <xPortStartScheduler+0xec>)
 8003f40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f4a:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <xPortStartScheduler+0xf0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <xPortStartScheduler+0xf0>)
 8003f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <xPortStartScheduler+0xf0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <xPortStartScheduler+0xf0>)
 8003f5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f62:	f000 f8dd 	bl	8004120 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <xPortStartScheduler+0xf4>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f6c:	f000 f8fc 	bl	8004168 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f70:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <xPortStartScheduler+0xf8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <xPortStartScheduler+0xf8>)
 8003f76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f7c:	f7ff ff84 	bl	8003e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f80:	f7fe ffee 	bl	8002f60 <vTaskSwitchContext>
	prvTaskExitError();
 8003f84:	f7ff ff38 	bl	8003df8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	e000e400 	.word	0xe000e400
 8003f98:	20000d80 	.word	0x20000d80
 8003f9c:	20000d84 	.word	0x20000d84
 8003fa0:	e000ed20 	.word	0xe000ed20
 8003fa4:	2000000c 	.word	0x2000000c
 8003fa8:	e000ef34 	.word	0xe000ef34

08003fac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	b672      	cpsid	i
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	b662      	cpsie	i
 8003fc6:	607b      	str	r3, [r7, #4]
}
 8003fc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fca:	4b10      	ldr	r3, [pc, #64]	; (800400c <vPortEnterCritical+0x60>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	4a0e      	ldr	r2, [pc, #56]	; (800400c <vPortEnterCritical+0x60>)
 8003fd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	; (800400c <vPortEnterCritical+0x60>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d111      	bne.n	8004000 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <vPortEnterCritical+0x64>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00c      	beq.n	8004000 <vPortEnterCritical+0x54>
	__asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	b672      	cpsid	i
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	b662      	cpsie	i
 8003ffa:	603b      	str	r3, [r7, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <vPortEnterCritical+0x52>
	}
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	2000000c 	.word	0x2000000c
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <vPortExitCritical+0x54>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10c      	bne.n	800403c <vPortExitCritical+0x28>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	b672      	cpsid	i
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	b662      	cpsie	i
 8004036:	607b      	str	r3, [r7, #4]
}
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <vPortExitCritical+0x54>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3b01      	subs	r3, #1
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <vPortExitCritical+0x54>)
 8004044:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <vPortExitCritical+0x54>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d105      	bne.n	800405a <vPortExitCritical+0x46>
 800404e:	2300      	movs	r3, #0
 8004050:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	f383 8811 	msr	BASEPRI, r3
}
 8004058:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	2000000c 	.word	0x2000000c
 800406c:	00000000 	.word	0x00000000

08004070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004070:	f3ef 8009 	mrs	r0, PSP
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <pxCurrentTCBConst>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	f01e 0f10 	tst.w	lr, #16
 8004080:	bf08      	it	eq
 8004082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408a:	6010      	str	r0, [r2, #0]
 800408c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004094:	b672      	cpsid	i
 8004096:	f380 8811 	msr	BASEPRI, r0
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	b662      	cpsie	i
 80040a4:	f7fe ff5c 	bl	8002f60 <vTaskSwitchContext>
 80040a8:	f04f 0000 	mov.w	r0, #0
 80040ac:	f380 8811 	msr	BASEPRI, r0
 80040b0:	bc09      	pop	{r0, r3}
 80040b2:	6819      	ldr	r1, [r3, #0]
 80040b4:	6808      	ldr	r0, [r1, #0]
 80040b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ba:	f01e 0f10 	tst.w	lr, #16
 80040be:	bf08      	it	eq
 80040c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040c4:	f380 8809 	msr	PSP, r0
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop

080040d0 <pxCurrentTCBConst>:
 80040d0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop

080040d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	b672      	cpsid	i
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	b662      	cpsie	i
 80040f2:	607b      	str	r3, [r7, #4]
}
 80040f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040f6:	f7fe fe77 	bl	8002de8 <xTaskIncrementTick>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <xPortSysTickHandler+0x44>)
 8004102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	2300      	movs	r3, #0
 800410a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f383 8811 	msr	BASEPRI, r3
}
 8004112:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <vPortSetupTimerInterrupt+0x34>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <vPortSetupTimerInterrupt+0x38>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <vPortSetupTimerInterrupt+0x3c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <vPortSetupTimerInterrupt+0x40>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	099b      	lsrs	r3, r3, #6
 800413c:	4a09      	ldr	r2, [pc, #36]	; (8004164 <vPortSetupTimerInterrupt+0x44>)
 800413e:	3b01      	subs	r3, #1
 8004140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <vPortSetupTimerInterrupt+0x34>)
 8004144:	2207      	movs	r2, #7
 8004146:	601a      	str	r2, [r3, #0]
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	e000e010 	.word	0xe000e010
 8004158:	e000e018 	.word	0xe000e018
 800415c:	20000000 	.word	0x20000000
 8004160:	10624dd3 	.word	0x10624dd3
 8004164:	e000e014 	.word	0xe000e014

08004168 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004168:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004178 <vPortEnableVFP+0x10>
 800416c:	6801      	ldr	r1, [r0, #0]
 800416e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004172:	6001      	str	r1, [r0, #0]
 8004174:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004176:	bf00      	nop
 8004178:	e000ed88 	.word	0xe000ed88

0800417c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004182:	f3ef 8305 	mrs	r3, IPSR
 8004186:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b0f      	cmp	r3, #15
 800418c:	d916      	bls.n	80041bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800418e:	4a19      	ldr	r2, [pc, #100]	; (80041f4 <vPortValidateInterruptPriority+0x78>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004198:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <vPortValidateInterruptPriority+0x7c>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	7afa      	ldrb	r2, [r7, #11]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d20c      	bcs.n	80041bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	b672      	cpsid	i
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	b662      	cpsie	i
 80041b6:	607b      	str	r3, [r7, #4]
}
 80041b8:	bf00      	nop
 80041ba:	e7fe      	b.n	80041ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <vPortValidateInterruptPriority+0x80>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <vPortValidateInterruptPriority+0x84>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d90c      	bls.n	80041e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	b672      	cpsid	i
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	b662      	cpsie	i
 80041e0:	603b      	str	r3, [r7, #0]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <vPortValidateInterruptPriority+0x68>
	}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	e000e3f0 	.word	0xe000e3f0
 80041f8:	20000d80 	.word	0x20000d80
 80041fc:	e000ed0c 	.word	0xe000ed0c
 8004200:	20000d84 	.word	0x20000d84

08004204 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004210:	f7fe fd2c 	bl	8002c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004214:	4b5b      	ldr	r3, [pc, #364]	; (8004384 <pvPortMalloc+0x180>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800421c:	f000 f91a 	bl	8004454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004220:	4b59      	ldr	r3, [pc, #356]	; (8004388 <pvPortMalloc+0x184>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	f040 8092 	bne.w	8004352 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01f      	beq.n	8004274 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004234:	2208      	movs	r2, #8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f023 0307 	bic.w	r3, r3, #7
 800424c:	3308      	adds	r3, #8
 800424e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00c      	beq.n	8004274 <pvPortMalloc+0x70>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	b672      	cpsid	i
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	b662      	cpsie	i
 800426e:	617b      	str	r3, [r7, #20]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d06b      	beq.n	8004352 <pvPortMalloc+0x14e>
 800427a:	4b44      	ldr	r3, [pc, #272]	; (800438c <pvPortMalloc+0x188>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	d866      	bhi.n	8004352 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004284:	4b42      	ldr	r3, [pc, #264]	; (8004390 <pvPortMalloc+0x18c>)
 8004286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004288:	4b41      	ldr	r3, [pc, #260]	; (8004390 <pvPortMalloc+0x18c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800428e:	e004      	b.n	800429a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d903      	bls.n	80042ac <pvPortMalloc+0xa8>
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f1      	bne.n	8004290 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042ac:	4b35      	ldr	r3, [pc, #212]	; (8004384 <pvPortMalloc+0x180>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d04d      	beq.n	8004352 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2208      	movs	r2, #8
 80042bc:	4413      	add	r3, r2
 80042be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	1ad2      	subs	r2, r2, r3
 80042d0:	2308      	movs	r3, #8
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d921      	bls.n	800431c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00c      	beq.n	8004304 <pvPortMalloc+0x100>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	b672      	cpsid	i
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	b662      	cpsie	i
 80042fe:	613b      	str	r3, [r7, #16]
}
 8004300:	bf00      	nop
 8004302:	e7fe      	b.n	8004302 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	1ad2      	subs	r2, r2, r3
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004316:	69b8      	ldr	r0, [r7, #24]
 8004318:	f000 f8fe 	bl	8004518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <pvPortMalloc+0x188>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	4a19      	ldr	r2, [pc, #100]	; (800438c <pvPortMalloc+0x188>)
 8004328:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <pvPortMalloc+0x188>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4b19      	ldr	r3, [pc, #100]	; (8004394 <pvPortMalloc+0x190>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d203      	bcs.n	800433e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004336:	4b15      	ldr	r3, [pc, #84]	; (800438c <pvPortMalloc+0x188>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a16      	ldr	r2, [pc, #88]	; (8004394 <pvPortMalloc+0x190>)
 800433c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	4b11      	ldr	r3, [pc, #68]	; (8004388 <pvPortMalloc+0x184>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	431a      	orrs	r2, r3
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004352:	f7fe fc99 	bl	8002c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00c      	beq.n	800437a <pvPortMalloc+0x176>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	b672      	cpsid	i
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	b662      	cpsie	i
 8004374:	60fb      	str	r3, [r7, #12]
}
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <pvPortMalloc+0x174>
	return pvReturn;
 800437a:	69fb      	ldr	r3, [r7, #28]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3728      	adds	r7, #40	; 0x28
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20004990 	.word	0x20004990
 8004388:	2000499c 	.word	0x2000499c
 800438c:	20004994 	.word	0x20004994
 8004390:	20004988 	.word	0x20004988
 8004394:	20004998 	.word	0x20004998

08004398 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d04c      	beq.n	8004444 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043aa:	2308      	movs	r3, #8
 80043ac:	425b      	negs	r3, r3
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4413      	add	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	4b23      	ldr	r3, [pc, #140]	; (800444c <vPortFree+0xb4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10c      	bne.n	80043e0 <vPortFree+0x48>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	b672      	cpsid	i
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	b662      	cpsie	i
 80043da:	60fb      	str	r3, [r7, #12]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00c      	beq.n	8004402 <vPortFree+0x6a>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	b672      	cpsid	i
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	b662      	cpsie	i
 80043fc:	60bb      	str	r3, [r7, #8]
}
 80043fe:	bf00      	nop
 8004400:	e7fe      	b.n	8004400 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	4b11      	ldr	r3, [pc, #68]	; (800444c <vPortFree+0xb4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d019      	beq.n	8004444 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d115      	bne.n	8004444 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <vPortFree+0xb4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	43db      	mvns	r3, r3
 8004422:	401a      	ands	r2, r3
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004428:	f7fe fc20 	bl	8002c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <vPortFree+0xb8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4413      	add	r3, r2
 8004436:	4a06      	ldr	r2, [pc, #24]	; (8004450 <vPortFree+0xb8>)
 8004438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800443a:	6938      	ldr	r0, [r7, #16]
 800443c:	f000 f86c 	bl	8004518 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004440:	f7fe fc22 	bl	8002c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004444:	bf00      	nop
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	2000499c 	.word	0x2000499c
 8004450:	20004994 	.word	0x20004994

08004454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800445a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800445e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <prvHeapInit+0xac>)
 8004462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3307      	adds	r3, #7
 8004472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0307 	bic.w	r3, r3, #7
 800447a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <prvHeapInit+0xac>)
 8004484:	4413      	add	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800448c:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <prvHeapInit+0xb0>)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <prvHeapInit+0xb0>)
 8004494:	2200      	movs	r2, #0
 8004496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	4413      	add	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044a0:	2208      	movs	r2, #8
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0307 	bic.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a15      	ldr	r2, [pc, #84]	; (8004508 <prvHeapInit+0xb4>)
 80044b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044b6:	4b14      	ldr	r3, [pc, #80]	; (8004508 <prvHeapInit+0xb4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <prvHeapInit+0xb4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	1ad2      	subs	r2, r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <prvHeapInit+0xb4>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	; (800450c <prvHeapInit+0xb8>)
 80044e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <prvHeapInit+0xbc>)
 80044ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <prvHeapInit+0xc0>)
 80044ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000d88 	.word	0x20000d88
 8004504:	20004988 	.word	0x20004988
 8004508:	20004990 	.word	0x20004990
 800450c:	20004998 	.word	0x20004998
 8004510:	20004994 	.word	0x20004994
 8004514:	2000499c 	.word	0x2000499c

08004518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <prvInsertBlockIntoFreeList+0xac>)
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e002      	b.n	800452c <prvInsertBlockIntoFreeList+0x14>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d8f7      	bhi.n	8004526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d108      	bne.n	800455a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	441a      	add	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	441a      	add	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d118      	bne.n	80045a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d00d      	beq.n	8004596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e008      	b.n	80045a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e003      	b.n	80045a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d002      	beq.n	80045b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20004988 	.word	0x20004988
 80045c8:	20004990 	.word	0x20004990

080045cc <__errno>:
 80045cc:	4b01      	ldr	r3, [pc, #4]	; (80045d4 <__errno+0x8>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000010 	.word	0x20000010

080045d8 <__libc_init_array>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	4d0d      	ldr	r5, [pc, #52]	; (8004610 <__libc_init_array+0x38>)
 80045dc:	4c0d      	ldr	r4, [pc, #52]	; (8004614 <__libc_init_array+0x3c>)
 80045de:	1b64      	subs	r4, r4, r5
 80045e0:	10a4      	asrs	r4, r4, #2
 80045e2:	2600      	movs	r6, #0
 80045e4:	42a6      	cmp	r6, r4
 80045e6:	d109      	bne.n	80045fc <__libc_init_array+0x24>
 80045e8:	4d0b      	ldr	r5, [pc, #44]	; (8004618 <__libc_init_array+0x40>)
 80045ea:	4c0c      	ldr	r4, [pc, #48]	; (800461c <__libc_init_array+0x44>)
 80045ec:	f000 fcf4 	bl	8004fd8 <_init>
 80045f0:	1b64      	subs	r4, r4, r5
 80045f2:	10a4      	asrs	r4, r4, #2
 80045f4:	2600      	movs	r6, #0
 80045f6:	42a6      	cmp	r6, r4
 80045f8:	d105      	bne.n	8004606 <__libc_init_array+0x2e>
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
 80045fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004600:	4798      	blx	r3
 8004602:	3601      	adds	r6, #1
 8004604:	e7ee      	b.n	80045e4 <__libc_init_array+0xc>
 8004606:	f855 3b04 	ldr.w	r3, [r5], #4
 800460a:	4798      	blx	r3
 800460c:	3601      	adds	r6, #1
 800460e:	e7f2      	b.n	80045f6 <__libc_init_array+0x1e>
 8004610:	080050f0 	.word	0x080050f0
 8004614:	080050f0 	.word	0x080050f0
 8004618:	080050f0 	.word	0x080050f0
 800461c:	080050f4 	.word	0x080050f4

08004620 <memcpy>:
 8004620:	440a      	add	r2, r1
 8004622:	4291      	cmp	r1, r2
 8004624:	f100 33ff 	add.w	r3, r0, #4294967295
 8004628:	d100      	bne.n	800462c <memcpy+0xc>
 800462a:	4770      	bx	lr
 800462c:	b510      	push	{r4, lr}
 800462e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004636:	4291      	cmp	r1, r2
 8004638:	d1f9      	bne.n	800462e <memcpy+0xe>
 800463a:	bd10      	pop	{r4, pc}

0800463c <memset>:
 800463c:	4402      	add	r2, r0
 800463e:	4603      	mov	r3, r0
 8004640:	4293      	cmp	r3, r2
 8004642:	d100      	bne.n	8004646 <memset+0xa>
 8004644:	4770      	bx	lr
 8004646:	f803 1b01 	strb.w	r1, [r3], #1
 800464a:	e7f9      	b.n	8004640 <memset+0x4>

0800464c <_puts_r>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	460e      	mov	r6, r1
 8004650:	4605      	mov	r5, r0
 8004652:	b118      	cbz	r0, 800465c <_puts_r+0x10>
 8004654:	6983      	ldr	r3, [r0, #24]
 8004656:	b90b      	cbnz	r3, 800465c <_puts_r+0x10>
 8004658:	f000 fa48 	bl	8004aec <__sinit>
 800465c:	69ab      	ldr	r3, [r5, #24]
 800465e:	68ac      	ldr	r4, [r5, #8]
 8004660:	b913      	cbnz	r3, 8004668 <_puts_r+0x1c>
 8004662:	4628      	mov	r0, r5
 8004664:	f000 fa42 	bl	8004aec <__sinit>
 8004668:	4b2c      	ldr	r3, [pc, #176]	; (800471c <_puts_r+0xd0>)
 800466a:	429c      	cmp	r4, r3
 800466c:	d120      	bne.n	80046b0 <_puts_r+0x64>
 800466e:	686c      	ldr	r4, [r5, #4]
 8004670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004672:	07db      	lsls	r3, r3, #31
 8004674:	d405      	bmi.n	8004682 <_puts_r+0x36>
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	0598      	lsls	r0, r3, #22
 800467a:	d402      	bmi.n	8004682 <_puts_r+0x36>
 800467c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800467e:	f000 fad3 	bl	8004c28 <__retarget_lock_acquire_recursive>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	0719      	lsls	r1, r3, #28
 8004686:	d51d      	bpl.n	80046c4 <_puts_r+0x78>
 8004688:	6923      	ldr	r3, [r4, #16]
 800468a:	b1db      	cbz	r3, 80046c4 <_puts_r+0x78>
 800468c:	3e01      	subs	r6, #1
 800468e:	68a3      	ldr	r3, [r4, #8]
 8004690:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004694:	3b01      	subs	r3, #1
 8004696:	60a3      	str	r3, [r4, #8]
 8004698:	bb39      	cbnz	r1, 80046ea <_puts_r+0x9e>
 800469a:	2b00      	cmp	r3, #0
 800469c:	da38      	bge.n	8004710 <_puts_r+0xc4>
 800469e:	4622      	mov	r2, r4
 80046a0:	210a      	movs	r1, #10
 80046a2:	4628      	mov	r0, r5
 80046a4:	f000 f848 	bl	8004738 <__swbuf_r>
 80046a8:	3001      	adds	r0, #1
 80046aa:	d011      	beq.n	80046d0 <_puts_r+0x84>
 80046ac:	250a      	movs	r5, #10
 80046ae:	e011      	b.n	80046d4 <_puts_r+0x88>
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <_puts_r+0xd4>)
 80046b2:	429c      	cmp	r4, r3
 80046b4:	d101      	bne.n	80046ba <_puts_r+0x6e>
 80046b6:	68ac      	ldr	r4, [r5, #8]
 80046b8:	e7da      	b.n	8004670 <_puts_r+0x24>
 80046ba:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <_puts_r+0xd8>)
 80046bc:	429c      	cmp	r4, r3
 80046be:	bf08      	it	eq
 80046c0:	68ec      	ldreq	r4, [r5, #12]
 80046c2:	e7d5      	b.n	8004670 <_puts_r+0x24>
 80046c4:	4621      	mov	r1, r4
 80046c6:	4628      	mov	r0, r5
 80046c8:	f000 f888 	bl	80047dc <__swsetup_r>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d0dd      	beq.n	800468c <_puts_r+0x40>
 80046d0:	f04f 35ff 	mov.w	r5, #4294967295
 80046d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046d6:	07da      	lsls	r2, r3, #31
 80046d8:	d405      	bmi.n	80046e6 <_puts_r+0x9a>
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	059b      	lsls	r3, r3, #22
 80046de:	d402      	bmi.n	80046e6 <_puts_r+0x9a>
 80046e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046e2:	f000 faa2 	bl	8004c2a <__retarget_lock_release_recursive>
 80046e6:	4628      	mov	r0, r5
 80046e8:	bd70      	pop	{r4, r5, r6, pc}
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	da04      	bge.n	80046f8 <_puts_r+0xac>
 80046ee:	69a2      	ldr	r2, [r4, #24]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	dc06      	bgt.n	8004702 <_puts_r+0xb6>
 80046f4:	290a      	cmp	r1, #10
 80046f6:	d004      	beq.n	8004702 <_puts_r+0xb6>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	6022      	str	r2, [r4, #0]
 80046fe:	7019      	strb	r1, [r3, #0]
 8004700:	e7c5      	b.n	800468e <_puts_r+0x42>
 8004702:	4622      	mov	r2, r4
 8004704:	4628      	mov	r0, r5
 8004706:	f000 f817 	bl	8004738 <__swbuf_r>
 800470a:	3001      	adds	r0, #1
 800470c:	d1bf      	bne.n	800468e <_puts_r+0x42>
 800470e:	e7df      	b.n	80046d0 <_puts_r+0x84>
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	250a      	movs	r5, #10
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	6022      	str	r2, [r4, #0]
 8004718:	701d      	strb	r5, [r3, #0]
 800471a:	e7db      	b.n	80046d4 <_puts_r+0x88>
 800471c:	080050a8 	.word	0x080050a8
 8004720:	080050c8 	.word	0x080050c8
 8004724:	08005088 	.word	0x08005088

08004728 <puts>:
 8004728:	4b02      	ldr	r3, [pc, #8]	; (8004734 <puts+0xc>)
 800472a:	4601      	mov	r1, r0
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	f7ff bf8d 	b.w	800464c <_puts_r>
 8004732:	bf00      	nop
 8004734:	20000010 	.word	0x20000010

08004738 <__swbuf_r>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	460e      	mov	r6, r1
 800473c:	4614      	mov	r4, r2
 800473e:	4605      	mov	r5, r0
 8004740:	b118      	cbz	r0, 800474a <__swbuf_r+0x12>
 8004742:	6983      	ldr	r3, [r0, #24]
 8004744:	b90b      	cbnz	r3, 800474a <__swbuf_r+0x12>
 8004746:	f000 f9d1 	bl	8004aec <__sinit>
 800474a:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <__swbuf_r+0x98>)
 800474c:	429c      	cmp	r4, r3
 800474e:	d12b      	bne.n	80047a8 <__swbuf_r+0x70>
 8004750:	686c      	ldr	r4, [r5, #4]
 8004752:	69a3      	ldr	r3, [r4, #24]
 8004754:	60a3      	str	r3, [r4, #8]
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	071a      	lsls	r2, r3, #28
 800475a:	d52f      	bpl.n	80047bc <__swbuf_r+0x84>
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	b36b      	cbz	r3, 80047bc <__swbuf_r+0x84>
 8004760:	6923      	ldr	r3, [r4, #16]
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	1ac0      	subs	r0, r0, r3
 8004766:	6963      	ldr	r3, [r4, #20]
 8004768:	b2f6      	uxtb	r6, r6
 800476a:	4283      	cmp	r3, r0
 800476c:	4637      	mov	r7, r6
 800476e:	dc04      	bgt.n	800477a <__swbuf_r+0x42>
 8004770:	4621      	mov	r1, r4
 8004772:	4628      	mov	r0, r5
 8004774:	f000 f926 	bl	80049c4 <_fflush_r>
 8004778:	bb30      	cbnz	r0, 80047c8 <__swbuf_r+0x90>
 800477a:	68a3      	ldr	r3, [r4, #8]
 800477c:	3b01      	subs	r3, #1
 800477e:	60a3      	str	r3, [r4, #8]
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	6022      	str	r2, [r4, #0]
 8004786:	701e      	strb	r6, [r3, #0]
 8004788:	6963      	ldr	r3, [r4, #20]
 800478a:	3001      	adds	r0, #1
 800478c:	4283      	cmp	r3, r0
 800478e:	d004      	beq.n	800479a <__swbuf_r+0x62>
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	07db      	lsls	r3, r3, #31
 8004794:	d506      	bpl.n	80047a4 <__swbuf_r+0x6c>
 8004796:	2e0a      	cmp	r6, #10
 8004798:	d104      	bne.n	80047a4 <__swbuf_r+0x6c>
 800479a:	4621      	mov	r1, r4
 800479c:	4628      	mov	r0, r5
 800479e:	f000 f911 	bl	80049c4 <_fflush_r>
 80047a2:	b988      	cbnz	r0, 80047c8 <__swbuf_r+0x90>
 80047a4:	4638      	mov	r0, r7
 80047a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <__swbuf_r+0x9c>)
 80047aa:	429c      	cmp	r4, r3
 80047ac:	d101      	bne.n	80047b2 <__swbuf_r+0x7a>
 80047ae:	68ac      	ldr	r4, [r5, #8]
 80047b0:	e7cf      	b.n	8004752 <__swbuf_r+0x1a>
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <__swbuf_r+0xa0>)
 80047b4:	429c      	cmp	r4, r3
 80047b6:	bf08      	it	eq
 80047b8:	68ec      	ldreq	r4, [r5, #12]
 80047ba:	e7ca      	b.n	8004752 <__swbuf_r+0x1a>
 80047bc:	4621      	mov	r1, r4
 80047be:	4628      	mov	r0, r5
 80047c0:	f000 f80c 	bl	80047dc <__swsetup_r>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	d0cb      	beq.n	8004760 <__swbuf_r+0x28>
 80047c8:	f04f 37ff 	mov.w	r7, #4294967295
 80047cc:	e7ea      	b.n	80047a4 <__swbuf_r+0x6c>
 80047ce:	bf00      	nop
 80047d0:	080050a8 	.word	0x080050a8
 80047d4:	080050c8 	.word	0x080050c8
 80047d8:	08005088 	.word	0x08005088

080047dc <__swsetup_r>:
 80047dc:	4b32      	ldr	r3, [pc, #200]	; (80048a8 <__swsetup_r+0xcc>)
 80047de:	b570      	push	{r4, r5, r6, lr}
 80047e0:	681d      	ldr	r5, [r3, #0]
 80047e2:	4606      	mov	r6, r0
 80047e4:	460c      	mov	r4, r1
 80047e6:	b125      	cbz	r5, 80047f2 <__swsetup_r+0x16>
 80047e8:	69ab      	ldr	r3, [r5, #24]
 80047ea:	b913      	cbnz	r3, 80047f2 <__swsetup_r+0x16>
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 f97d 	bl	8004aec <__sinit>
 80047f2:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <__swsetup_r+0xd0>)
 80047f4:	429c      	cmp	r4, r3
 80047f6:	d10f      	bne.n	8004818 <__swsetup_r+0x3c>
 80047f8:	686c      	ldr	r4, [r5, #4]
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004800:	0719      	lsls	r1, r3, #28
 8004802:	d42c      	bmi.n	800485e <__swsetup_r+0x82>
 8004804:	06dd      	lsls	r5, r3, #27
 8004806:	d411      	bmi.n	800482c <__swsetup_r+0x50>
 8004808:	2309      	movs	r3, #9
 800480a:	6033      	str	r3, [r6, #0]
 800480c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004810:	81a3      	strh	r3, [r4, #12]
 8004812:	f04f 30ff 	mov.w	r0, #4294967295
 8004816:	e03e      	b.n	8004896 <__swsetup_r+0xba>
 8004818:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <__swsetup_r+0xd4>)
 800481a:	429c      	cmp	r4, r3
 800481c:	d101      	bne.n	8004822 <__swsetup_r+0x46>
 800481e:	68ac      	ldr	r4, [r5, #8]
 8004820:	e7eb      	b.n	80047fa <__swsetup_r+0x1e>
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <__swsetup_r+0xd8>)
 8004824:	429c      	cmp	r4, r3
 8004826:	bf08      	it	eq
 8004828:	68ec      	ldreq	r4, [r5, #12]
 800482a:	e7e6      	b.n	80047fa <__swsetup_r+0x1e>
 800482c:	0758      	lsls	r0, r3, #29
 800482e:	d512      	bpl.n	8004856 <__swsetup_r+0x7a>
 8004830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004832:	b141      	cbz	r1, 8004846 <__swsetup_r+0x6a>
 8004834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004838:	4299      	cmp	r1, r3
 800483a:	d002      	beq.n	8004842 <__swsetup_r+0x66>
 800483c:	4630      	mov	r0, r6
 800483e:	f000 fa59 	bl	8004cf4 <_free_r>
 8004842:	2300      	movs	r3, #0
 8004844:	6363      	str	r3, [r4, #52]	; 0x34
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	2300      	movs	r3, #0
 8004850:	6063      	str	r3, [r4, #4]
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	f043 0308 	orr.w	r3, r3, #8
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	b94b      	cbnz	r3, 8004876 <__swsetup_r+0x9a>
 8004862:	89a3      	ldrh	r3, [r4, #12]
 8004864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486c:	d003      	beq.n	8004876 <__swsetup_r+0x9a>
 800486e:	4621      	mov	r1, r4
 8004870:	4630      	mov	r0, r6
 8004872:	f000 f9ff 	bl	8004c74 <__smakebuf_r>
 8004876:	89a0      	ldrh	r0, [r4, #12]
 8004878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800487c:	f010 0301 	ands.w	r3, r0, #1
 8004880:	d00a      	beq.n	8004898 <__swsetup_r+0xbc>
 8004882:	2300      	movs	r3, #0
 8004884:	60a3      	str	r3, [r4, #8]
 8004886:	6963      	ldr	r3, [r4, #20]
 8004888:	425b      	negs	r3, r3
 800488a:	61a3      	str	r3, [r4, #24]
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	b943      	cbnz	r3, 80048a2 <__swsetup_r+0xc6>
 8004890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004894:	d1ba      	bne.n	800480c <__swsetup_r+0x30>
 8004896:	bd70      	pop	{r4, r5, r6, pc}
 8004898:	0781      	lsls	r1, r0, #30
 800489a:	bf58      	it	pl
 800489c:	6963      	ldrpl	r3, [r4, #20]
 800489e:	60a3      	str	r3, [r4, #8]
 80048a0:	e7f4      	b.n	800488c <__swsetup_r+0xb0>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e7f7      	b.n	8004896 <__swsetup_r+0xba>
 80048a6:	bf00      	nop
 80048a8:	20000010 	.word	0x20000010
 80048ac:	080050a8 	.word	0x080050a8
 80048b0:	080050c8 	.word	0x080050c8
 80048b4:	08005088 	.word	0x08005088

080048b8 <__sflush_r>:
 80048b8:	898a      	ldrh	r2, [r1, #12]
 80048ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048be:	4605      	mov	r5, r0
 80048c0:	0710      	lsls	r0, r2, #28
 80048c2:	460c      	mov	r4, r1
 80048c4:	d458      	bmi.n	8004978 <__sflush_r+0xc0>
 80048c6:	684b      	ldr	r3, [r1, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	dc05      	bgt.n	80048d8 <__sflush_r+0x20>
 80048cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	dc02      	bgt.n	80048d8 <__sflush_r+0x20>
 80048d2:	2000      	movs	r0, #0
 80048d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048da:	2e00      	cmp	r6, #0
 80048dc:	d0f9      	beq.n	80048d2 <__sflush_r+0x1a>
 80048de:	2300      	movs	r3, #0
 80048e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048e4:	682f      	ldr	r7, [r5, #0]
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	d032      	beq.n	8004950 <__sflush_r+0x98>
 80048ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	075a      	lsls	r2, r3, #29
 80048f0:	d505      	bpl.n	80048fe <__sflush_r+0x46>
 80048f2:	6863      	ldr	r3, [r4, #4]
 80048f4:	1ac0      	subs	r0, r0, r3
 80048f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048f8:	b10b      	cbz	r3, 80048fe <__sflush_r+0x46>
 80048fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048fc:	1ac0      	subs	r0, r0, r3
 80048fe:	2300      	movs	r3, #0
 8004900:	4602      	mov	r2, r0
 8004902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004904:	6a21      	ldr	r1, [r4, #32]
 8004906:	4628      	mov	r0, r5
 8004908:	47b0      	blx	r6
 800490a:	1c43      	adds	r3, r0, #1
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	d106      	bne.n	800491e <__sflush_r+0x66>
 8004910:	6829      	ldr	r1, [r5, #0]
 8004912:	291d      	cmp	r1, #29
 8004914:	d82c      	bhi.n	8004970 <__sflush_r+0xb8>
 8004916:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <__sflush_r+0x108>)
 8004918:	40ca      	lsrs	r2, r1
 800491a:	07d6      	lsls	r6, r2, #31
 800491c:	d528      	bpl.n	8004970 <__sflush_r+0xb8>
 800491e:	2200      	movs	r2, #0
 8004920:	6062      	str	r2, [r4, #4]
 8004922:	04d9      	lsls	r1, r3, #19
 8004924:	6922      	ldr	r2, [r4, #16]
 8004926:	6022      	str	r2, [r4, #0]
 8004928:	d504      	bpl.n	8004934 <__sflush_r+0x7c>
 800492a:	1c42      	adds	r2, r0, #1
 800492c:	d101      	bne.n	8004932 <__sflush_r+0x7a>
 800492e:	682b      	ldr	r3, [r5, #0]
 8004930:	b903      	cbnz	r3, 8004934 <__sflush_r+0x7c>
 8004932:	6560      	str	r0, [r4, #84]	; 0x54
 8004934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004936:	602f      	str	r7, [r5, #0]
 8004938:	2900      	cmp	r1, #0
 800493a:	d0ca      	beq.n	80048d2 <__sflush_r+0x1a>
 800493c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004940:	4299      	cmp	r1, r3
 8004942:	d002      	beq.n	800494a <__sflush_r+0x92>
 8004944:	4628      	mov	r0, r5
 8004946:	f000 f9d5 	bl	8004cf4 <_free_r>
 800494a:	2000      	movs	r0, #0
 800494c:	6360      	str	r0, [r4, #52]	; 0x34
 800494e:	e7c1      	b.n	80048d4 <__sflush_r+0x1c>
 8004950:	6a21      	ldr	r1, [r4, #32]
 8004952:	2301      	movs	r3, #1
 8004954:	4628      	mov	r0, r5
 8004956:	47b0      	blx	r6
 8004958:	1c41      	adds	r1, r0, #1
 800495a:	d1c7      	bne.n	80048ec <__sflush_r+0x34>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0c4      	beq.n	80048ec <__sflush_r+0x34>
 8004962:	2b1d      	cmp	r3, #29
 8004964:	d001      	beq.n	800496a <__sflush_r+0xb2>
 8004966:	2b16      	cmp	r3, #22
 8004968:	d101      	bne.n	800496e <__sflush_r+0xb6>
 800496a:	602f      	str	r7, [r5, #0]
 800496c:	e7b1      	b.n	80048d2 <__sflush_r+0x1a>
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004974:	81a3      	strh	r3, [r4, #12]
 8004976:	e7ad      	b.n	80048d4 <__sflush_r+0x1c>
 8004978:	690f      	ldr	r7, [r1, #16]
 800497a:	2f00      	cmp	r7, #0
 800497c:	d0a9      	beq.n	80048d2 <__sflush_r+0x1a>
 800497e:	0793      	lsls	r3, r2, #30
 8004980:	680e      	ldr	r6, [r1, #0]
 8004982:	bf08      	it	eq
 8004984:	694b      	ldreq	r3, [r1, #20]
 8004986:	600f      	str	r7, [r1, #0]
 8004988:	bf18      	it	ne
 800498a:	2300      	movne	r3, #0
 800498c:	eba6 0807 	sub.w	r8, r6, r7
 8004990:	608b      	str	r3, [r1, #8]
 8004992:	f1b8 0f00 	cmp.w	r8, #0
 8004996:	dd9c      	ble.n	80048d2 <__sflush_r+0x1a>
 8004998:	6a21      	ldr	r1, [r4, #32]
 800499a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800499c:	4643      	mov	r3, r8
 800499e:	463a      	mov	r2, r7
 80049a0:	4628      	mov	r0, r5
 80049a2:	47b0      	blx	r6
 80049a4:	2800      	cmp	r0, #0
 80049a6:	dc06      	bgt.n	80049b6 <__sflush_r+0xfe>
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
 80049b4:	e78e      	b.n	80048d4 <__sflush_r+0x1c>
 80049b6:	4407      	add	r7, r0
 80049b8:	eba8 0800 	sub.w	r8, r8, r0
 80049bc:	e7e9      	b.n	8004992 <__sflush_r+0xda>
 80049be:	bf00      	nop
 80049c0:	20400001 	.word	0x20400001

080049c4 <_fflush_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	690b      	ldr	r3, [r1, #16]
 80049c8:	4605      	mov	r5, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	b913      	cbnz	r3, 80049d4 <_fflush_r+0x10>
 80049ce:	2500      	movs	r5, #0
 80049d0:	4628      	mov	r0, r5
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	b118      	cbz	r0, 80049de <_fflush_r+0x1a>
 80049d6:	6983      	ldr	r3, [r0, #24]
 80049d8:	b90b      	cbnz	r3, 80049de <_fflush_r+0x1a>
 80049da:	f000 f887 	bl	8004aec <__sinit>
 80049de:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <_fflush_r+0x6c>)
 80049e0:	429c      	cmp	r4, r3
 80049e2:	d11b      	bne.n	8004a1c <_fflush_r+0x58>
 80049e4:	686c      	ldr	r4, [r5, #4]
 80049e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0ef      	beq.n	80049ce <_fflush_r+0xa>
 80049ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049f0:	07d0      	lsls	r0, r2, #31
 80049f2:	d404      	bmi.n	80049fe <_fflush_r+0x3a>
 80049f4:	0599      	lsls	r1, r3, #22
 80049f6:	d402      	bmi.n	80049fe <_fflush_r+0x3a>
 80049f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049fa:	f000 f915 	bl	8004c28 <__retarget_lock_acquire_recursive>
 80049fe:	4628      	mov	r0, r5
 8004a00:	4621      	mov	r1, r4
 8004a02:	f7ff ff59 	bl	80048b8 <__sflush_r>
 8004a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a08:	07da      	lsls	r2, r3, #31
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	d4e0      	bmi.n	80049d0 <_fflush_r+0xc>
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	059b      	lsls	r3, r3, #22
 8004a12:	d4dd      	bmi.n	80049d0 <_fflush_r+0xc>
 8004a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a16:	f000 f908 	bl	8004c2a <__retarget_lock_release_recursive>
 8004a1a:	e7d9      	b.n	80049d0 <_fflush_r+0xc>
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <_fflush_r+0x70>)
 8004a1e:	429c      	cmp	r4, r3
 8004a20:	d101      	bne.n	8004a26 <_fflush_r+0x62>
 8004a22:	68ac      	ldr	r4, [r5, #8]
 8004a24:	e7df      	b.n	80049e6 <_fflush_r+0x22>
 8004a26:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <_fflush_r+0x74>)
 8004a28:	429c      	cmp	r4, r3
 8004a2a:	bf08      	it	eq
 8004a2c:	68ec      	ldreq	r4, [r5, #12]
 8004a2e:	e7da      	b.n	80049e6 <_fflush_r+0x22>
 8004a30:	080050a8 	.word	0x080050a8
 8004a34:	080050c8 	.word	0x080050c8
 8004a38:	08005088 	.word	0x08005088

08004a3c <std>:
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	b510      	push	{r4, lr}
 8004a40:	4604      	mov	r4, r0
 8004a42:	e9c0 3300 	strd	r3, r3, [r0]
 8004a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a4a:	6083      	str	r3, [r0, #8]
 8004a4c:	8181      	strh	r1, [r0, #12]
 8004a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a50:	81c2      	strh	r2, [r0, #14]
 8004a52:	6183      	str	r3, [r0, #24]
 8004a54:	4619      	mov	r1, r3
 8004a56:	2208      	movs	r2, #8
 8004a58:	305c      	adds	r0, #92	; 0x5c
 8004a5a:	f7ff fdef 	bl	800463c <memset>
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <std+0x38>)
 8004a60:	6263      	str	r3, [r4, #36]	; 0x24
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <std+0x3c>)
 8004a64:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <std+0x40>)
 8004a68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <std+0x44>)
 8004a6c:	6224      	str	r4, [r4, #32]
 8004a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a70:	bd10      	pop	{r4, pc}
 8004a72:	bf00      	nop
 8004a74:	08004e69 	.word	0x08004e69
 8004a78:	08004e8b 	.word	0x08004e8b
 8004a7c:	08004ec3 	.word	0x08004ec3
 8004a80:	08004ee7 	.word	0x08004ee7

08004a84 <_cleanup_r>:
 8004a84:	4901      	ldr	r1, [pc, #4]	; (8004a8c <_cleanup_r+0x8>)
 8004a86:	f000 b8af 	b.w	8004be8 <_fwalk_reent>
 8004a8a:	bf00      	nop
 8004a8c:	080049c5 	.word	0x080049c5

08004a90 <__sfmoreglue>:
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	1e4a      	subs	r2, r1, #1
 8004a94:	2568      	movs	r5, #104	; 0x68
 8004a96:	4355      	muls	r5, r2
 8004a98:	460e      	mov	r6, r1
 8004a9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a9e:	f000 f979 	bl	8004d94 <_malloc_r>
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	b140      	cbz	r0, 8004ab8 <__sfmoreglue+0x28>
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	e9c0 1600 	strd	r1, r6, [r0]
 8004aac:	300c      	adds	r0, #12
 8004aae:	60a0      	str	r0, [r4, #8]
 8004ab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ab4:	f7ff fdc2 	bl	800463c <memset>
 8004ab8:	4620      	mov	r0, r4
 8004aba:	bd70      	pop	{r4, r5, r6, pc}

08004abc <__sfp_lock_acquire>:
 8004abc:	4801      	ldr	r0, [pc, #4]	; (8004ac4 <__sfp_lock_acquire+0x8>)
 8004abe:	f000 b8b3 	b.w	8004c28 <__retarget_lock_acquire_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	20004a00 	.word	0x20004a00

08004ac8 <__sfp_lock_release>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	; (8004ad0 <__sfp_lock_release+0x8>)
 8004aca:	f000 b8ae 	b.w	8004c2a <__retarget_lock_release_recursive>
 8004ace:	bf00      	nop
 8004ad0:	20004a00 	.word	0x20004a00

08004ad4 <__sinit_lock_acquire>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	; (8004adc <__sinit_lock_acquire+0x8>)
 8004ad6:	f000 b8a7 	b.w	8004c28 <__retarget_lock_acquire_recursive>
 8004ada:	bf00      	nop
 8004adc:	200049fb 	.word	0x200049fb

08004ae0 <__sinit_lock_release>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	; (8004ae8 <__sinit_lock_release+0x8>)
 8004ae2:	f000 b8a2 	b.w	8004c2a <__retarget_lock_release_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	200049fb 	.word	0x200049fb

08004aec <__sinit>:
 8004aec:	b510      	push	{r4, lr}
 8004aee:	4604      	mov	r4, r0
 8004af0:	f7ff fff0 	bl	8004ad4 <__sinit_lock_acquire>
 8004af4:	69a3      	ldr	r3, [r4, #24]
 8004af6:	b11b      	cbz	r3, 8004b00 <__sinit+0x14>
 8004af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004afc:	f7ff bff0 	b.w	8004ae0 <__sinit_lock_release>
 8004b00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b04:	6523      	str	r3, [r4, #80]	; 0x50
 8004b06:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <__sinit+0x68>)
 8004b08:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <__sinit+0x6c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b0e:	42a3      	cmp	r3, r4
 8004b10:	bf04      	itt	eq
 8004b12:	2301      	moveq	r3, #1
 8004b14:	61a3      	streq	r3, [r4, #24]
 8004b16:	4620      	mov	r0, r4
 8004b18:	f000 f820 	bl	8004b5c <__sfp>
 8004b1c:	6060      	str	r0, [r4, #4]
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f000 f81c 	bl	8004b5c <__sfp>
 8004b24:	60a0      	str	r0, [r4, #8]
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 f818 	bl	8004b5c <__sfp>
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	60e0      	str	r0, [r4, #12]
 8004b30:	2104      	movs	r1, #4
 8004b32:	6860      	ldr	r0, [r4, #4]
 8004b34:	f7ff ff82 	bl	8004a3c <std>
 8004b38:	68a0      	ldr	r0, [r4, #8]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	2109      	movs	r1, #9
 8004b3e:	f7ff ff7d 	bl	8004a3c <std>
 8004b42:	68e0      	ldr	r0, [r4, #12]
 8004b44:	2202      	movs	r2, #2
 8004b46:	2112      	movs	r1, #18
 8004b48:	f7ff ff78 	bl	8004a3c <std>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	61a3      	str	r3, [r4, #24]
 8004b50:	e7d2      	b.n	8004af8 <__sinit+0xc>
 8004b52:	bf00      	nop
 8004b54:	08005084 	.word	0x08005084
 8004b58:	08004a85 	.word	0x08004a85

08004b5c <__sfp>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	4607      	mov	r7, r0
 8004b60:	f7ff ffac 	bl	8004abc <__sfp_lock_acquire>
 8004b64:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <__sfp+0x84>)
 8004b66:	681e      	ldr	r6, [r3, #0]
 8004b68:	69b3      	ldr	r3, [r6, #24]
 8004b6a:	b913      	cbnz	r3, 8004b72 <__sfp+0x16>
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	f7ff ffbd 	bl	8004aec <__sinit>
 8004b72:	3648      	adds	r6, #72	; 0x48
 8004b74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	d503      	bpl.n	8004b84 <__sfp+0x28>
 8004b7c:	6833      	ldr	r3, [r6, #0]
 8004b7e:	b30b      	cbz	r3, 8004bc4 <__sfp+0x68>
 8004b80:	6836      	ldr	r6, [r6, #0]
 8004b82:	e7f7      	b.n	8004b74 <__sfp+0x18>
 8004b84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b88:	b9d5      	cbnz	r5, 8004bc0 <__sfp+0x64>
 8004b8a:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <__sfp+0x88>)
 8004b8c:	60e3      	str	r3, [r4, #12]
 8004b8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b92:	6665      	str	r5, [r4, #100]	; 0x64
 8004b94:	f000 f847 	bl	8004c26 <__retarget_lock_init_recursive>
 8004b98:	f7ff ff96 	bl	8004ac8 <__sfp_lock_release>
 8004b9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ba0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ba4:	6025      	str	r5, [r4, #0]
 8004ba6:	61a5      	str	r5, [r4, #24]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	4629      	mov	r1, r5
 8004bac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bb0:	f7ff fd44 	bl	800463c <memset>
 8004bb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bc0:	3468      	adds	r4, #104	; 0x68
 8004bc2:	e7d9      	b.n	8004b78 <__sfp+0x1c>
 8004bc4:	2104      	movs	r1, #4
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	f7ff ff62 	bl	8004a90 <__sfmoreglue>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	6030      	str	r0, [r6, #0]
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d1d5      	bne.n	8004b80 <__sfp+0x24>
 8004bd4:	f7ff ff78 	bl	8004ac8 <__sfp_lock_release>
 8004bd8:	230c      	movs	r3, #12
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	e7ee      	b.n	8004bbc <__sfp+0x60>
 8004bde:	bf00      	nop
 8004be0:	08005084 	.word	0x08005084
 8004be4:	ffff0001 	.word	0xffff0001

08004be8 <_fwalk_reent>:
 8004be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bec:	4606      	mov	r6, r0
 8004bee:	4688      	mov	r8, r1
 8004bf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bf4:	2700      	movs	r7, #0
 8004bf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bfa:	f1b9 0901 	subs.w	r9, r9, #1
 8004bfe:	d505      	bpl.n	8004c0c <_fwalk_reent+0x24>
 8004c00:	6824      	ldr	r4, [r4, #0]
 8004c02:	2c00      	cmp	r4, #0
 8004c04:	d1f7      	bne.n	8004bf6 <_fwalk_reent+0xe>
 8004c06:	4638      	mov	r0, r7
 8004c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0c:	89ab      	ldrh	r3, [r5, #12]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d907      	bls.n	8004c22 <_fwalk_reent+0x3a>
 8004c12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c16:	3301      	adds	r3, #1
 8004c18:	d003      	beq.n	8004c22 <_fwalk_reent+0x3a>
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	47c0      	blx	r8
 8004c20:	4307      	orrs	r7, r0
 8004c22:	3568      	adds	r5, #104	; 0x68
 8004c24:	e7e9      	b.n	8004bfa <_fwalk_reent+0x12>

08004c26 <__retarget_lock_init_recursive>:
 8004c26:	4770      	bx	lr

08004c28 <__retarget_lock_acquire_recursive>:
 8004c28:	4770      	bx	lr

08004c2a <__retarget_lock_release_recursive>:
 8004c2a:	4770      	bx	lr

08004c2c <__swhatbuf_r>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	460e      	mov	r6, r1
 8004c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c34:	2900      	cmp	r1, #0
 8004c36:	b096      	sub	sp, #88	; 0x58
 8004c38:	4614      	mov	r4, r2
 8004c3a:	461d      	mov	r5, r3
 8004c3c:	da07      	bge.n	8004c4e <__swhatbuf_r+0x22>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	602b      	str	r3, [r5, #0]
 8004c42:	89b3      	ldrh	r3, [r6, #12]
 8004c44:	061a      	lsls	r2, r3, #24
 8004c46:	d410      	bmi.n	8004c6a <__swhatbuf_r+0x3e>
 8004c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c4c:	e00e      	b.n	8004c6c <__swhatbuf_r+0x40>
 8004c4e:	466a      	mov	r2, sp
 8004c50:	f000 f970 	bl	8004f34 <_fstat_r>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	dbf2      	blt.n	8004c3e <__swhatbuf_r+0x12>
 8004c58:	9a01      	ldr	r2, [sp, #4]
 8004c5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c62:	425a      	negs	r2, r3
 8004c64:	415a      	adcs	r2, r3
 8004c66:	602a      	str	r2, [r5, #0]
 8004c68:	e7ee      	b.n	8004c48 <__swhatbuf_r+0x1c>
 8004c6a:	2340      	movs	r3, #64	; 0x40
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	6023      	str	r3, [r4, #0]
 8004c70:	b016      	add	sp, #88	; 0x58
 8004c72:	bd70      	pop	{r4, r5, r6, pc}

08004c74 <__smakebuf_r>:
 8004c74:	898b      	ldrh	r3, [r1, #12]
 8004c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c78:	079d      	lsls	r5, r3, #30
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	d507      	bpl.n	8004c90 <__smakebuf_r+0x1c>
 8004c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	6123      	str	r3, [r4, #16]
 8004c88:	2301      	movs	r3, #1
 8004c8a:	6163      	str	r3, [r4, #20]
 8004c8c:	b002      	add	sp, #8
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	ab01      	add	r3, sp, #4
 8004c92:	466a      	mov	r2, sp
 8004c94:	f7ff ffca 	bl	8004c2c <__swhatbuf_r>
 8004c98:	9900      	ldr	r1, [sp, #0]
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f000 f879 	bl	8004d94 <_malloc_r>
 8004ca2:	b948      	cbnz	r0, 8004cb8 <__smakebuf_r+0x44>
 8004ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca8:	059a      	lsls	r2, r3, #22
 8004caa:	d4ef      	bmi.n	8004c8c <__smakebuf_r+0x18>
 8004cac:	f023 0303 	bic.w	r3, r3, #3
 8004cb0:	f043 0302 	orr.w	r3, r3, #2
 8004cb4:	81a3      	strh	r3, [r4, #12]
 8004cb6:	e7e3      	b.n	8004c80 <__smakebuf_r+0xc>
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <__smakebuf_r+0x7c>)
 8004cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	6020      	str	r0, [r4, #0]
 8004cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc4:	81a3      	strh	r3, [r4, #12]
 8004cc6:	9b00      	ldr	r3, [sp, #0]
 8004cc8:	6163      	str	r3, [r4, #20]
 8004cca:	9b01      	ldr	r3, [sp, #4]
 8004ccc:	6120      	str	r0, [r4, #16]
 8004cce:	b15b      	cbz	r3, 8004ce8 <__smakebuf_r+0x74>
 8004cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f000 f93f 	bl	8004f58 <_isatty_r>
 8004cda:	b128      	cbz	r0, 8004ce8 <__smakebuf_r+0x74>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	81a3      	strh	r3, [r4, #12]
 8004ce8:	89a0      	ldrh	r0, [r4, #12]
 8004cea:	4305      	orrs	r5, r0
 8004cec:	81a5      	strh	r5, [r4, #12]
 8004cee:	e7cd      	b.n	8004c8c <__smakebuf_r+0x18>
 8004cf0:	08004a85 	.word	0x08004a85

08004cf4 <_free_r>:
 8004cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cf6:	2900      	cmp	r1, #0
 8004cf8:	d048      	beq.n	8004d8c <_free_r+0x98>
 8004cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cfe:	9001      	str	r0, [sp, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f1a1 0404 	sub.w	r4, r1, #4
 8004d06:	bfb8      	it	lt
 8004d08:	18e4      	addlt	r4, r4, r3
 8004d0a:	f000 f947 	bl	8004f9c <__malloc_lock>
 8004d0e:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <_free_r+0x9c>)
 8004d10:	9801      	ldr	r0, [sp, #4]
 8004d12:	6813      	ldr	r3, [r2, #0]
 8004d14:	4615      	mov	r5, r2
 8004d16:	b933      	cbnz	r3, 8004d26 <_free_r+0x32>
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	6014      	str	r4, [r2, #0]
 8004d1c:	b003      	add	sp, #12
 8004d1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d22:	f000 b941 	b.w	8004fa8 <__malloc_unlock>
 8004d26:	42a3      	cmp	r3, r4
 8004d28:	d90b      	bls.n	8004d42 <_free_r+0x4e>
 8004d2a:	6821      	ldr	r1, [r4, #0]
 8004d2c:	1862      	adds	r2, r4, r1
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	bf04      	itt	eq
 8004d32:	681a      	ldreq	r2, [r3, #0]
 8004d34:	685b      	ldreq	r3, [r3, #4]
 8004d36:	6063      	str	r3, [r4, #4]
 8004d38:	bf04      	itt	eq
 8004d3a:	1852      	addeq	r2, r2, r1
 8004d3c:	6022      	streq	r2, [r4, #0]
 8004d3e:	602c      	str	r4, [r5, #0]
 8004d40:	e7ec      	b.n	8004d1c <_free_r+0x28>
 8004d42:	461a      	mov	r2, r3
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	b10b      	cbz	r3, 8004d4c <_free_r+0x58>
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	d9fa      	bls.n	8004d42 <_free_r+0x4e>
 8004d4c:	6811      	ldr	r1, [r2, #0]
 8004d4e:	1855      	adds	r5, r2, r1
 8004d50:	42a5      	cmp	r5, r4
 8004d52:	d10b      	bne.n	8004d6c <_free_r+0x78>
 8004d54:	6824      	ldr	r4, [r4, #0]
 8004d56:	4421      	add	r1, r4
 8004d58:	1854      	adds	r4, r2, r1
 8004d5a:	42a3      	cmp	r3, r4
 8004d5c:	6011      	str	r1, [r2, #0]
 8004d5e:	d1dd      	bne.n	8004d1c <_free_r+0x28>
 8004d60:	681c      	ldr	r4, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	6053      	str	r3, [r2, #4]
 8004d66:	4421      	add	r1, r4
 8004d68:	6011      	str	r1, [r2, #0]
 8004d6a:	e7d7      	b.n	8004d1c <_free_r+0x28>
 8004d6c:	d902      	bls.n	8004d74 <_free_r+0x80>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	6003      	str	r3, [r0, #0]
 8004d72:	e7d3      	b.n	8004d1c <_free_r+0x28>
 8004d74:	6825      	ldr	r5, [r4, #0]
 8004d76:	1961      	adds	r1, r4, r5
 8004d78:	428b      	cmp	r3, r1
 8004d7a:	bf04      	itt	eq
 8004d7c:	6819      	ldreq	r1, [r3, #0]
 8004d7e:	685b      	ldreq	r3, [r3, #4]
 8004d80:	6063      	str	r3, [r4, #4]
 8004d82:	bf04      	itt	eq
 8004d84:	1949      	addeq	r1, r1, r5
 8004d86:	6021      	streq	r1, [r4, #0]
 8004d88:	6054      	str	r4, [r2, #4]
 8004d8a:	e7c7      	b.n	8004d1c <_free_r+0x28>
 8004d8c:	b003      	add	sp, #12
 8004d8e:	bd30      	pop	{r4, r5, pc}
 8004d90:	200049a0 	.word	0x200049a0

08004d94 <_malloc_r>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	1ccd      	adds	r5, r1, #3
 8004d98:	f025 0503 	bic.w	r5, r5, #3
 8004d9c:	3508      	adds	r5, #8
 8004d9e:	2d0c      	cmp	r5, #12
 8004da0:	bf38      	it	cc
 8004da2:	250c      	movcc	r5, #12
 8004da4:	2d00      	cmp	r5, #0
 8004da6:	4606      	mov	r6, r0
 8004da8:	db01      	blt.n	8004dae <_malloc_r+0x1a>
 8004daa:	42a9      	cmp	r1, r5
 8004dac:	d903      	bls.n	8004db6 <_malloc_r+0x22>
 8004dae:	230c      	movs	r3, #12
 8004db0:	6033      	str	r3, [r6, #0]
 8004db2:	2000      	movs	r0, #0
 8004db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db6:	f000 f8f1 	bl	8004f9c <__malloc_lock>
 8004dba:	4921      	ldr	r1, [pc, #132]	; (8004e40 <_malloc_r+0xac>)
 8004dbc:	680a      	ldr	r2, [r1, #0]
 8004dbe:	4614      	mov	r4, r2
 8004dc0:	b99c      	cbnz	r4, 8004dea <_malloc_r+0x56>
 8004dc2:	4f20      	ldr	r7, [pc, #128]	; (8004e44 <_malloc_r+0xb0>)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	b923      	cbnz	r3, 8004dd2 <_malloc_r+0x3e>
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f000 f83c 	bl	8004e48 <_sbrk_r>
 8004dd0:	6038      	str	r0, [r7, #0]
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f000 f837 	bl	8004e48 <_sbrk_r>
 8004dda:	1c43      	adds	r3, r0, #1
 8004ddc:	d123      	bne.n	8004e26 <_malloc_r+0x92>
 8004dde:	230c      	movs	r3, #12
 8004de0:	6033      	str	r3, [r6, #0]
 8004de2:	4630      	mov	r0, r6
 8004de4:	f000 f8e0 	bl	8004fa8 <__malloc_unlock>
 8004de8:	e7e3      	b.n	8004db2 <_malloc_r+0x1e>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	1b5b      	subs	r3, r3, r5
 8004dee:	d417      	bmi.n	8004e20 <_malloc_r+0x8c>
 8004df0:	2b0b      	cmp	r3, #11
 8004df2:	d903      	bls.n	8004dfc <_malloc_r+0x68>
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	441c      	add	r4, r3
 8004df8:	6025      	str	r5, [r4, #0]
 8004dfa:	e004      	b.n	8004e06 <_malloc_r+0x72>
 8004dfc:	6863      	ldr	r3, [r4, #4]
 8004dfe:	42a2      	cmp	r2, r4
 8004e00:	bf0c      	ite	eq
 8004e02:	600b      	streq	r3, [r1, #0]
 8004e04:	6053      	strne	r3, [r2, #4]
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 f8ce 	bl	8004fa8 <__malloc_unlock>
 8004e0c:	f104 000b 	add.w	r0, r4, #11
 8004e10:	1d23      	adds	r3, r4, #4
 8004e12:	f020 0007 	bic.w	r0, r0, #7
 8004e16:	1ac2      	subs	r2, r0, r3
 8004e18:	d0cc      	beq.n	8004db4 <_malloc_r+0x20>
 8004e1a:	1a1b      	subs	r3, r3, r0
 8004e1c:	50a3      	str	r3, [r4, r2]
 8004e1e:	e7c9      	b.n	8004db4 <_malloc_r+0x20>
 8004e20:	4622      	mov	r2, r4
 8004e22:	6864      	ldr	r4, [r4, #4]
 8004e24:	e7cc      	b.n	8004dc0 <_malloc_r+0x2c>
 8004e26:	1cc4      	adds	r4, r0, #3
 8004e28:	f024 0403 	bic.w	r4, r4, #3
 8004e2c:	42a0      	cmp	r0, r4
 8004e2e:	d0e3      	beq.n	8004df8 <_malloc_r+0x64>
 8004e30:	1a21      	subs	r1, r4, r0
 8004e32:	4630      	mov	r0, r6
 8004e34:	f000 f808 	bl	8004e48 <_sbrk_r>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d1dd      	bne.n	8004df8 <_malloc_r+0x64>
 8004e3c:	e7cf      	b.n	8004dde <_malloc_r+0x4a>
 8004e3e:	bf00      	nop
 8004e40:	200049a0 	.word	0x200049a0
 8004e44:	200049a4 	.word	0x200049a4

08004e48 <_sbrk_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4d06      	ldr	r5, [pc, #24]	; (8004e64 <_sbrk_r+0x1c>)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4604      	mov	r4, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	602b      	str	r3, [r5, #0]
 8004e54:	f7fb fd7c 	bl	8000950 <_sbrk>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_sbrk_r+0x1a>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_sbrk_r+0x1a>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	20004a04 	.word	0x20004a04

08004e68 <__sread>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e70:	f000 f8a0 	bl	8004fb4 <_read_r>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	bfab      	itete	ge
 8004e78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e7c:	181b      	addge	r3, r3, r0
 8004e7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e82:	bfac      	ite	ge
 8004e84:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e86:	81a3      	strhlt	r3, [r4, #12]
 8004e88:	bd10      	pop	{r4, pc}

08004e8a <__swrite>:
 8004e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8e:	461f      	mov	r7, r3
 8004e90:	898b      	ldrh	r3, [r1, #12]
 8004e92:	05db      	lsls	r3, r3, #23
 8004e94:	4605      	mov	r5, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	4616      	mov	r6, r2
 8004e9a:	d505      	bpl.n	8004ea8 <__swrite+0x1e>
 8004e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f000 f868 	bl	8004f78 <_lseek_r>
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	4632      	mov	r2, r6
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	4628      	mov	r0, r5
 8004eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebe:	f000 b817 	b.w	8004ef0 <_write_r>

08004ec2 <__sseek>:
 8004ec2:	b510      	push	{r4, lr}
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eca:	f000 f855 	bl	8004f78 <_lseek_r>
 8004ece:	1c43      	adds	r3, r0, #1
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	bf15      	itete	ne
 8004ed4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004eda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ede:	81a3      	strheq	r3, [r4, #12]
 8004ee0:	bf18      	it	ne
 8004ee2:	81a3      	strhne	r3, [r4, #12]
 8004ee4:	bd10      	pop	{r4, pc}

08004ee6 <__sclose>:
 8004ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eea:	f000 b813 	b.w	8004f14 <_close_r>
	...

08004ef0 <_write_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	4d07      	ldr	r5, [pc, #28]	; (8004f10 <_write_r+0x20>)
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	4608      	mov	r0, r1
 8004ef8:	4611      	mov	r1, r2
 8004efa:	2200      	movs	r2, #0
 8004efc:	602a      	str	r2, [r5, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f7fb fcd5 	bl	80008ae <_write>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d102      	bne.n	8004f0e <_write_r+0x1e>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	b103      	cbz	r3, 8004f0e <_write_r+0x1e>
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	20004a04 	.word	0x20004a04

08004f14 <_close_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4d06      	ldr	r5, [pc, #24]	; (8004f30 <_close_r+0x1c>)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	f7fb fce1 	bl	80008e6 <_close>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_close_r+0x1a>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_close_r+0x1a>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	20004a04 	.word	0x20004a04

08004f34 <_fstat_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4d07      	ldr	r5, [pc, #28]	; (8004f54 <_fstat_r+0x20>)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	f7fb fcdc 	bl	80008fe <_fstat>
 8004f46:	1c43      	adds	r3, r0, #1
 8004f48:	d102      	bne.n	8004f50 <_fstat_r+0x1c>
 8004f4a:	682b      	ldr	r3, [r5, #0]
 8004f4c:	b103      	cbz	r3, 8004f50 <_fstat_r+0x1c>
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	bd38      	pop	{r3, r4, r5, pc}
 8004f52:	bf00      	nop
 8004f54:	20004a04 	.word	0x20004a04

08004f58 <_isatty_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4d06      	ldr	r5, [pc, #24]	; (8004f74 <_isatty_r+0x1c>)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4604      	mov	r4, r0
 8004f60:	4608      	mov	r0, r1
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	f7fb fcdb 	bl	800091e <_isatty>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_isatty_r+0x1a>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_isatty_r+0x1a>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	20004a04 	.word	0x20004a04

08004f78 <_lseek_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4d07      	ldr	r5, [pc, #28]	; (8004f98 <_lseek_r+0x20>)
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	4608      	mov	r0, r1
 8004f80:	4611      	mov	r1, r2
 8004f82:	2200      	movs	r2, #0
 8004f84:	602a      	str	r2, [r5, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	f7fb fcd4 	bl	8000934 <_lseek>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	d102      	bne.n	8004f96 <_lseek_r+0x1e>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	b103      	cbz	r3, 8004f96 <_lseek_r+0x1e>
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
 8004f98:	20004a04 	.word	0x20004a04

08004f9c <__malloc_lock>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	; (8004fa4 <__malloc_lock+0x8>)
 8004f9e:	f7ff be43 	b.w	8004c28 <__retarget_lock_acquire_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	200049fc 	.word	0x200049fc

08004fa8 <__malloc_unlock>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__malloc_unlock+0x8>)
 8004faa:	f7ff be3e 	b.w	8004c2a <__retarget_lock_release_recursive>
 8004fae:	bf00      	nop
 8004fb0:	200049fc 	.word	0x200049fc

08004fb4 <_read_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4d07      	ldr	r5, [pc, #28]	; (8004fd4 <_read_r+0x20>)
 8004fb8:	4604      	mov	r4, r0
 8004fba:	4608      	mov	r0, r1
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fb fc56 	bl	8000874 <_read>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_read_r+0x1e>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_read_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	20004a04 	.word	0x20004a04

08004fd8 <_init>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr

08004fe4 <_fini>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	bf00      	nop
 8004fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fea:	bc08      	pop	{r3}
 8004fec:	469e      	mov	lr, r3
 8004fee:	4770      	bx	lr
